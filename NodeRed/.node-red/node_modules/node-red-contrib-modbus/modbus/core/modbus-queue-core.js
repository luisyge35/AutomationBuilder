"use strict";require("source-map-support").install();var de=de||{biancoroyal:{modbus:{queue:{core:{}}}}};de.biancoroyal.modbus.queue.core.internalDebug=de.biancoroyal.modbus.queue.core.internalDebug||require("debug")("contribModbus:queue:core"),de.biancoroyal.modbus.queue.core.core=de.biancoroyal.modbus.queue.core.core||require("./modbus-core"),de.biancoroyal.modbus.queue.core.initQueue=function(e){e.bufferCommandList.clear(),e.sendingAllowed.clear(),e.unitSendingAllowed=[];for(var u=0;u<=255;u++)e.bufferCommandList.set(u,[]),e.sendingAllowed.set(u,!0)},de.biancoroyal.modbus.queue.core.checkQueuesAreEmpty=function(e){for(var u=!0,o=0;o<=255;o++)u&=0===e.bufferCommandList.get(o).length;return u},de.biancoroyal.modbus.queue.core.sequentialDequeueCommand=function(i){return new Promise(function(e,u){var o=de.biancoroyal.modbus.queue.core;if(i.parallelUnitIdsAllowed)for(var n=0;n<256;n+=1)o.sendQueueDataToModbus(i,n);else{var d=i.unitSendingAllowed.shift();i.queueLog(JSON.stringify({type:"sequential dequeue command",unitId:d,isValidUnitId:o.isValidUnitId(d),sendingAllowed:i.sendingAllowed.get(d),serialSendingAllowed:i.serialSendingAllowed})),i.serialSendingAllowed&&o.isValidUnitId(d)&&i.sendingAllowed.get(d)?(i.serialSendingAllowed=!1,o.sendQueueDataToModbus(i,d)):i.warn("sequential dequeue command not possible")}e()})},de.biancoroyal.modbus.queue.core.sendQueueDataToModbus=function(e,u){var o=e.bufferCommandList.get(u).length;if(e.queueLog(JSON.stringify({type:"send queue data to Modbus",unitId:u,queueLength:o,sendingAllowed:e.sendingAllowed.get(u),serialSendingAllowed:e.serialSendingAllowed})),o){var n=e.bufferCommandList.get(u).shift();if(!n)throw new Error("Command On Send Not Valid");e.sendingAllowed.set(u,!1),n.callModbus(e,n.msg,n.cb,n.cberr)}},de.biancoroyal.modbus.queue.core.dequeueLogEntry=function(e,u,o){e.queueLog(JSON.stringify({state:u.value,message:"".concat(o," ").concat(e.clienttype),delay:e.commandDelay}))},de.biancoroyal.modbus.queue.core.dequeueCommand=function(u){var o=de.biancoroyal.modbus.queue.core,n=u.actualServiceState;-1===u.messageAllowedStates.indexOf(n.value)?o.dequeueLogEntry(u,n,"dequeue command disallowed state"):o.sequentialDequeueCommand(u).then(function(){o.dequeueLogEntry(u,n,"dequeue command done")}).catch(function(e){o.dequeueLogEntry(u,n,"dequeue command error "+e.message)})},de.biancoroyal.modbus.queue.core.getUnitIdToQueue=function(e,u){return parseInt(u.payload.unitid)||parseInt(e.unit_id)},de.biancoroyal.modbus.queue.core.isValidUnitId=function(e){return 0<=e||e<=255},de.biancoroyal.modbus.queue.core.getQueueLengthByUnitId=function(e,u){if(this.isValidUnitId(u))return e.bufferCommandList.get(u).length;throw new Error("(0-255) Got A Wrong Unit-Id: "+u)},de.biancoroyal.modbus.queue.core.pushToQueueByUnitId=function(d,i,t,r,a){var l=de.biancoroyal.modbus.queue.core;return new Promise(function(e,u){try{var o=l.getUnitIdToQueue(d,t),n=l.getQueueLengthByUnitId(d,o);t.queueLengthByUnitId={unitId:o,queueLength:n},t.queueUnitId=o,d.parallelUnitIdsAllowed||d.unitSendingAllowed.push(o),d.bufferCommandList.get(o).push({callModbus:i,msg:t,cb:r,cberr:a}),d.queueLog(JSON.stringify({info:"pushed to Queue by Unit-Id",message:t.payload,unitId:o})),e()}catch(e){u(e)}})},module.exports=de.biancoroyal.modbus.queue.core;
//# sourceMappingURL=../maps/core/modbus-queue-core.js.map
