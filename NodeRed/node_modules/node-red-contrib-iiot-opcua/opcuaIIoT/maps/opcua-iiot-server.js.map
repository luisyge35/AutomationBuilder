{"version":3,"sources":["opcua-iiot-server.js"],"names":["module","exports","RED","require","install","coreServer","node","bianco","initNewServer","config","nodes","OPCUAIIoTServer","createNode","this","asoDemo","readConfigOfServerNode","initServerNode","__dirname","loadNodeSets","loadCertificates","iiot","buildServerOptions","serverOptions","userManager","userName","password","isValidUser","checkUser","setDiscoveryOptions","createServer","settings","JSON","stringify","opcuaServer","createServerObject","core","setNodeStatusTo","initialize","initRegisterServerMethod","err","handleServerError","payload","postInitialize","constructAddressSpace","then","start","emit","catch","isInitializedBiancoIIoTNode","msg","initialized","injectType","on","changeAddressSpace","executeOpcuaCommand","Error","send","objecttype","indexOf","addVariableToAddressSpace","addObjectToAddressSpace","restartServer","internalDebugLog","deleteNOdeFromAddressSpace","done","resetBiancoNode","closeServer","destructAddressSpace","removeAllListeners","shutdown","delayToClose"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAaF,QAAQ,iCA6IrBG,EAAAA,MAAKC,aAAYC,oBA3IrB,SAA0BC,GAA1BP,EAAAQ,MAASC,WAAAA,KAAiBF,GACxBP,EAAUU,iBAAiBH,oBAG3BI,KAAKC,QAAUL,EAAOK,QACtB,IAAIR,EAAOD,EAAWU,uBAAuBF,KAAMJ,GAAnDH,EAAIA,EAAOD,eAAWU,GACtBT,EAAOD,EAAWW,aAAAA,EAAXC,WACPX,EAAOD,EAAWa,iBAAXZ,GACPA,EAAOD,KAAAA,OAAWc,EAAAA,OAAiBb,MAGnCA,EAAKC,OAAOa,KAAKC,mBAAqB,WAAtCf,IAAKC,EAAYc,EAAAA,mBAAiCf,EAAA,OAEpB,OAD5BgB,EAAIA,YAAgBjB,CACpBiB,YAAcC,SAAdC,EAA4BC,GAC1BC,OAAAA,EAAaC,UAAArB,EAAUkB,EAAUC,KADnCpB,EAAAuB,oBAAAtB,EAAAgB,IAQFhB,EAAKC,OAAOa,KAAKS,aAAe,SAAUP,GAArCf,EAAAA,SAAYsB,SACfxB,EAAQyB,eAAkB,iBAAAC,KAAAC,UAAAV,IAEzBhB,EAAAC,OAAAa,KAAAa,YAAA5B,EAAA6B,mBAAA5B,EAAAgB,GAEDjB,EAAW8B,KAAKC,gBAAgB9B,EAAM,WADtCA,EAAKC,OAAOa,KAAKa,YAAjBI,WAA+BhC,EAAW6B,OAAAA,KAAAA,gBAC1C7B,EAAW8B,uBAAqB7B,IAGjCA,EARDC,OAAAa,KAAAZ,cAAA,WAUAF,IAAKC,GACHD,EAAOD,EAAWiC,yBAAyBhC,IAD5BE,OAAgBY,KAAAC,qBAC/Bf,EAAOD,EAAWiC,oBAAXhC,EAAPgB,GAEAA,IAGEhB,EAAKC,OAAOa,KAAKS,aAAaP,GADhC,MAAIiB,GACFjC,EAAKC,KAAAA,uBACLF,EAAAmC,kBAAYlC,EAAAiC,EAAA,CAAAE,QAAA,yDAE4BnC,EAAxCC,OAAAa,KAAAsB,eAAA,WACDrC,EAAAsC,sBAAArC,EAAAC,OAAAa,KAAAa,YAAA3B,EAAAQ,SAVH8B,KAAA,SAAAL,GAgBUA,EAHLhC,EAAYmC,kBAAiBpC,EAAAiC,EAAY,CAAAE,QAAA,iCAGpCF,EAAKM,MAAAvC,EAAAC,OAAAa,KAAAa,YAAA3B,GACPD,KAAU,WAAgCoC,EAASN,KAAAC,gBAAA9B,EAAA,UAAnDA,EAAAwC,KAAA,oBACKC,MAAA,SAAAR,GACKlC,EAAW8B,KAAC5B,4BACnBqC,KACCvC,EAAW8B,OAAKC,KAAAA,YAAhB,MAECW,EAAMD,KAAA,sBACHzC,EAAW8B,KAAKa,gBAAAA,EAAAA,UAClB1C,EAAYc,kBAAmBd,EAA/BiC,EAAA,CAAAE,QAAA,6BAEFnC,MAAKwC,SAAKP,GACVlC,EAAAA,kBAAgB+B,EAAgB9B,EAAM,CAAAmC,QAAtC,oCAEDnC,EAAAC,OAXHa,KAAAZ,gBAaHF,EAAEyC,GAAAA,QAAM,SAAeE,GACtB5C,GAAAA,EAAAA,OAAWmC,KAAAA,aAAwBD,EAAKhC,OAAAa,KAAA8B,YAAxC7C,CAYJ,OAAQ4C,EAAIE,YARV,IAAC5C,MAEA6C,EAAG7C,OAASa,KAAAiC,mBAAeJ,GAC1B,MACF5C,IAAAA,MACAC,EAAAC,OAAAa,KAAAkC,oBAAAL,GACD,MASC,QAPF5C,EAAY8C,kBAAZ7C,EAAA,IAAAiD,MAAA,uBAAAN,EAAAE,YAAAF,GAGI3C,EAAAkD,KAAAP,QAf0CR,EAASD,kBAAAlC,EAAA,IAAAiD,MAAA,+BAAAN,KAiBnD3C,EAAAA,OAAKC,KAAL8C,mBAAiBC,SAAjBL,GAWAA,EAAIR,QAAQgB,aAA4D,EAA9CR,EAAIR,QAAQgB,WAAWC,QAAQ,YAT3DrD,EAAAsD,0BAAArD,EAAA2C,EAAAA,EAAAR,QAAAgB,YAAA,GACEpD,EAAWmC,QAAAA,aAA+DW,EAA1EF,EAAmCR,QAAUgB,WAAAC,QAAA,YARjDrD,EAAAsD,0BAAArD,EAAA2C,EAAAA,EAAAR,QAAAgB,YAAA,GAWAnD,EAAAsD,wBAAAtD,EAAA2C,EAAAA,EAAAR,QAAAgB,aAIAnD,EAAAC,OAAAa,KAAAkC,oBAAA,SAAAL,GACA,OAAQR,EAAAA,aACNpC,IAAAA,UADFC,EAEOC,OAAQkC,KAAAA,gBACbpC,MADK,IAEA,aACLA,EAAWuD,2BAAXtD,EAA8C2C,GAC/C,MARH,QAoBM5C,EAAWmC,kBAAkBlC,EAAM,IAAIiD,MAAM,0BAA2BN,KANxE3C,EAAAA,OAAKC,KAALsD,cAAiBA,WACjBxD,EAAAyD,iBAAA,yBAWJzD,EAAWwD,cAAcvD,GATrBD,EAAAA,OAAW0D,KAAAA,YACX1D,EAAAyD,iBAAA,2BACFzD,EAAAyD,iBAAA,kCAgBJxD,EAAK8C,GAAG,QAAS,SAACY,GAXbzD,EAAYsD,KAAAA,4BAA4BvD,GAC3CD,EAAAA,OAAWyD,KAAAA,YAAiB,WAC5BzD,EAAWwD,iBAAX,qBAaIxD,EAAW8B,KAAK8B,gBAAgB3D,GAXhCA,MAGFD,MAIJC,EAAK8C,GAAG,WAAS,WACf9C,EAAID,OAAAA,KAAW8B,YAAKa,KAClB1C,EAAAA,OAAKC,KAAOa,kBAGV4C,EAAAA,OAAI5C,KAAA8C,YAAA,SAAAF,GACL3D,EAJD8D,qBAAA,WADF7D,EAMOC,OAAAa,KAAAa,YAAAmC,qBACLJ,EAAIzD,OAAAa,KAAAa,YAAAoC,SAAA/D,EAAAgE,aAAAN","file":"../opcua-iiot-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n\n  function OPCUAIIoTServer (config) {\n    RED.nodes.createNode(this, config)\n    coreServer.internalDebugLog('Open Server Node')\n\n    this.asoDemo = config.asoDemo // ASO (address space objects) Demo\n    let node = coreServer.readConfigOfServerNode(this, config)\n    node = coreServer.initServerNode(node)\n    node = coreServer.loadNodeSets(node, __dirname)\n    node = coreServer.loadCertificates(node)\n    coreServer.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.buildServerOptions = function () {\n      let serverOptions = coreServer.buildServerOptions(node, 'Fix')\n      serverOptions.userManager = {\n        isValidUser: function (userName, password) {\n          return coreServer.checkUser(node, userName, password)\n        }\n      }\n      return coreServer.setDiscoveryOptions(node, serverOptions)\n    }\n\n    node.bianco.iiot.createServer = function (serverOptions) {\n      if (RED.settings.verbose) {\n        coreServer.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n      }\n      node.bianco.iiot.opcuaServer = coreServer.createServerObject(node, serverOptions)\n      coreServer.core.setNodeStatusTo(node, 'waiting')\n      node.bianco.iiot.opcuaServer.initialize(node.bianco.iiot.postInitialize)\n      coreServer.setOPCUAServerListener(node)\n    }\n\n    node.bianco.iiot.initNewServer = function () {\n      node = coreServer.initRegisterServerMethod(node)\n      let serverOptions = node.bianco.iiot.buildServerOptions()\n      serverOptions = coreServer.setDiscoveryOptions(node, serverOptions)\n\n      try {\n        node.bianco.iiot.createServer(serverOptions)\n      } catch (err) {\n        node.emit('server_create_error')\n        coreServer.handleServerError(node, err, { payload: 'Server Failure! Please, check the server settings!' })\n      }\n    }\n\n    node.bianco.iiot.postInitialize = function () {\n      coreServer.constructAddressSpace(node.bianco.iiot.opcuaServer, node.asoDemo)\n        .then(function (err) {\n          if (err) {\n            coreServer.handleServerError(node, err, { payload: 'Server Address Space Problem' })\n          } else {\n            coreServer.start(node.bianco.iiot.opcuaServer, node)\n              .then(function () {\n                coreServer.core.setNodeStatusTo(node, 'active')\n                node.emit('server_running')\n              }).catch(function (err) {\n                if (coreServer.core.isInitializedBiancoIIoTNode(node)) {\n                  node.bianco.iiot.opcuaServer = null\n                }\n                node.emit('server_start_error')\n                coreServer.core.setNodeStatusTo(node, 'errors')\n                coreServer.handleServerError(node, err, { payload: 'Server Start Failure' })\n              })\n          }\n        }).catch(function (err) {\n          coreServer.handleServerError(node, err, { payload: 'Server Address Space Failure' })\n        })\n    }\n\n    node.bianco.iiot.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.bianco.iiot.opcuaServer || !node.bianco.iiot.initialized) {\n        coreServer.handleServerError(node, new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      switch (msg.injectType) {\n        case 'ASO':\n          node.bianco.iiot.changeAddressSpace(msg)\n          break\n        case 'CMD':\n          node.bianco.iiot.executeOpcuaCommand(msg)\n          break\n        default:\n          coreServer.handleServerError(node, new Error('Unknown Inject Type ' + msg.injectType), msg)\n      }\n\n      node.send(msg)\n    })\n\n    node.bianco.iiot.changeAddressSpace = function (msg) {\n      // TODO: refactor to work with the new OPC UA type list and option to set add type\n      if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Variable') > -1) {\n        coreServer.addVariableToAddressSpace(node, msg, msg.payload.objecttype, false)\n      } else if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Property') > -1) {\n        coreServer.addVariableToAddressSpace(node, msg, msg.payload.objecttype, true)\n      } else {\n        coreServer.addObjectToAddressSpace(node, msg, msg.payload.objecttype)\n      }\n    }\n\n    node.bianco.iiot.executeOpcuaCommand = function (msg) {\n      switch (msg.commandType) {\n        case 'restart':\n          node.bianco.iiot.restartServer()\n          break\n        case 'deleteNode':\n          coreServer.deleteNOdeFromAddressSpace(node, msg)\n          break\n        default:\n          coreServer.handleServerError(node, new Error('Unknown OPC UA Command'), msg)\n      }\n    }\n\n    node.bianco.iiot.restartServer = function () {\n      coreServer.internalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(node)\n\n      if (node.bianco.iiot.opcuaServer) {\n        coreServer.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', (done) => {\n      if (coreServer.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.closeServer(() => {\n          coreServer.internalDebugLog('Close Server Node')\n          coreServer.core.resetBiancoNode(node)\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n\n    node.on('shutdown', () => {\n      node.bianco.iiot.opcuaServer = null\n      node.bianco.iiot.initNewServer()\n    })\n\n    node.bianco.iiot.closeServer = function (done) {\n      coreServer.destructAddressSpace(() => {\n        node.bianco.iiot.opcuaServer.removeAllListeners()\n        node.bianco.iiot.opcuaServer.shutdown(node.delayToClose, done)\n      })\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server', OPCUAIIoTServer)\n}\n"]}