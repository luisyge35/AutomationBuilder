{"version":3,"sources":["opcua-iiot-crawler.js"],"names":["module","exports","RED","require","install","coreBrowser","nodes","registerType","config","OPCUAIIoTCrawler","this","name","justValue","singleResult","showStatusActivities","showErrors","activateUnsetFilter","activateFilters","negateFilter","filters","delayPerMessage","node","initBrowserNode","connector","delayMessageTimer","core","assert","bianco","iiot","filterCrawlerResults","filteredEntries","crawlerResultToFilter","crawlerResult","itemIsNotToFilter","item","length","push","references","result","checkItemForUnsetState","forEach","element","checkCrawlerItemIsNotToFilter","crawl","session","msg","checkSessionNotValid","opcuaSession","browseTopic","setNodeStatusTo","sendMessage","catch","browseErrorHandling","err","message","crawlAddressSpaceItems","internalDebugLog","rootNodeId","crawlForResults","addressSpaceItems","entry","nodeId","then","crawlNodeList","crawlForSingleResult","Object","assign","originMessage","nodetype","results","writeDebugLog","util","setMessageProperty","JSON","parse","stringify","resultsConverted","error","payload","crawlerResultsCount","setTimeout","send","messageList","shift","resetAllTimer","FAKTOR_SEC_TO_MSEC","timerId","clearTimeout","startCrawling","addressItemsToBrowse","Error","on","checkConnectorState","registerToConnector","done","deregisterToConnector","resetBiancoNode"],"mappings":"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","file":"../opcua-iiot-crawler.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Crawler Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreBrowser = require('./core/opcua-iiot-core-browser')\n\n  function OPCUAIIoTCrawler (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.justValue = config.justValue\n    this.singleResult = config.singleResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.activateUnsetFilter = config.activateUnsetFilter\n    this.activateFilters = config.activateFilters\n    this.negateFilter = config.negateFilter\n    this.filters = config.filters\n    this.delayPerMessage = config.delayPerMessage || 0.2\n\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreBrowser.initBrowserNode(this)\n    coreBrowser.core.assert(node.bianco.iiot)\n    node.bianco.iiot.delayMessageTimer = []\n\n    node.bianco.iiot.filterCrawlerResults = function (crawlerResultToFilter) {\n      let crawlerResult = crawlerResultToFilter || []\n      let filteredEntries = []\n\n      if (node.activateFilters && node.filters && node.filters.length > 0) {\n        crawlerResult.forEach(function (item) {\n          if (node.bianco.iiot.itemIsNotToFilter(item)) {\n            filteredEntries.push(item)\n          }\n        })\n        crawlerResult = filteredEntries\n      }\n\n      if (node.justValue) {\n        crawlerResult.forEach(function (item) {\n          if (item.references) {\n            delete item['references']\n          }\n        })\n      }\n\n      return crawlerResult\n    }\n\n    node.bianco.iiot.itemIsNotToFilter = function (item) {\n      let result = coreBrowser.core.checkItemForUnsetState(node, item)\n\n      if (result) {\n        node.filters.forEach(function (element) {\n          result = coreBrowser.core.checkCrawlerItemIsNotToFilter(node, item, element, result)\n        })\n      }\n\n      return (node.negateFilter) ? !result : result\n    }\n\n    node.bianco.iiot.crawl = function (session, msg) {\n      if (coreBrowser.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'Crawler')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse Topic To Call Crawler ' + node.browseTopic)\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'crawling')\n      }\n\n      coreBrowser.crawl(session, node.browseTopic, msg)\n        .then(function (result) {\n          coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n          node.bianco.iiot.sendMessage(result.message, node.bianco.iiot.filterCrawlerResults(result.message, result.crawlerResult))\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg)\n        })\n    }\n\n    node.bianco.iiot.crawlForSingleResult = function (session, msg) {\n      coreBrowser.crawlAddressSpaceItems(session, msg)\n        .then(function (result) {\n          coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n          node.bianco.iiot.sendMessage(result.message, node.bianco.iiot.filterCrawlerResults(result.crawlerResult))\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg)\n        })\n    }\n\n    node.bianco.iiot.crawlForResults = function (session, msg) {\n      msg.addressSpaceItems.map((entry) => {\n        coreBrowser.crawl(session, entry.nodeId)\n          .then(function (result) {\n            coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n            node.bianco.iiot.sendMessage(result.message, node.bianco.iiot.filterCrawlerResults(result.crawlerResult))\n          }).catch(function (err) {\n            coreBrowser.browseErrorHandling(node, err, msg)\n          })\n      })\n    }\n\n    node.bianco.iiot.crawlNodeList = function (session, msg) {\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'crawling')\n      }\n\n      if (node.singleResult) {\n        node.bianco.iiot.crawlForSingleResult(session, msg)\n      } else {\n        node.bianco.iiot.crawlForResults(session, msg)\n      }\n    }\n\n    node.bianco.iiot.sendMessage = function (originMessage, crawlerResult) {\n      let msg = Object.assign({}, originMessage)\n      msg.nodetype = 'crawl'\n\n      const results = {\n        crawlerResults: crawlerResult\n      }\n\n      try {\n        RED.util.setMessageProperty(msg, 'payload', JSON.parse(JSON.stringify(results, null, 2)))\n      } catch (err) {\n        coreBrowser.writeDebugLog(err)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n        msg.resultsConverted = JSON.stringify(results, null, 2)\n        msg.error = err.message\n      }\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        msg.payload.browseTopic = node.browseTopic\n      }\n\n      if (!node.justValue) {\n        msg.payload.crawlerResultsCount = crawlerResult.length\n        if (node.connector) {\n          msg.payload.endpoint = node.connector.endpoint\n        }\n        msg.payload.session = node.bianco.iiot.opcuaSession.name || 'none'\n      }\n\n      node.bianco.iiot.messageList.push(msg)\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'active')\n      }\n\n      // TODO: maybe here RED.util.set ...\n\n      node.bianco.iiot.delayMessageTimer.push(setTimeout(() => {\n        node.send(node.bianco.iiot.messageList.shift())\n      }, node.delayPerMessage * coreBrowser.core.FAKTOR_SEC_TO_MSEC))\n    }\n\n    node.bianco.iiot.resetAllTimer = function () {\n      node.bianco.iiot.delayMessageTimer.forEach((timerId) => {\n        clearTimeout(timerId)\n        timerId = null\n      })\n    }\n\n    node.bianco.iiot.startCrawling = function (msg) {\n      if (node.browseTopic && node.browseTopic !== '') {\n        node.bianco.iiot.crawl(node.bianco.iiot.opcuaSession, msg)\n      } else {\n        if (msg.addressItemsToBrowse) {\n          msg.addressSpaceItems = msg.addressItemsToBrowse\n        }\n\n        if (msg.addressSpaceItems && msg.addressSpaceItems.length) {\n          coreBrowser.internalDebugLog('Start Crawling On AddressSpace Items')\n          node.bianco.iiot.crawlNodeList(node.bianco.iiot.opcuaSession, msg)\n        } else {\n          node.error(new Error('No AddressSpace Items Or Root To Crawl'), msg)\n        }\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreBrowser.core.checkConnectorState(node, msg, 'Crawler')) {\n        return\n      }\n\n      node.browseTopic = coreBrowser.extractNodeIdFromTopic(msg, node)\n      node.bianco.iiot.startCrawling(msg)\n    })\n\n    coreBrowser.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreBrowser.core.deregisterToConnector(node, () => {\n        coreBrowser.core.resetBiancoNode(node)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Crawler', OPCUAIIoTCrawler)\n}\n"]}