{"version":3,"sources":["opcua-iiot-result-filter.js"],"names":["module","exports","RED","require","install","coreFilter","msg","addressItems","config","nodes","createNode","this","nodeId","OPCUAIIoTResultFilter","datatype","fixPoint","fixedValue","parseInt","withPrecision","entry","precision","withValueCheck","justValue","minvalue","maxvalue","defaultvalue","name","topic","showErrors","node","core","createBiancoIIoT","status","fill","shape","text","iiot","nodeIdToFilter","doFilter","nodeList","buildNodeListFromClient","length","array","element","toString","bianco","isNodeIdNotToFindInAddressSpaceItems","_","filter","addressSpaceItems","filteredNodeIds","messageIsToFilter","on","hasOwnProperty","payload","internalDebugLog","message","Object","assign","filterResult","assert","filterByType","send","result","filterByReadType","filterByWriteType","filterByBrowserType","filterByCrawlerType","nodetype","error","Error","convertResult","convertedResult","parseFloat","toFixed","Number","toPrecision","err","convertResultValue","value","convertDataType","extractValueFromOPCUAArrayStructure","entryIndex","extractValueFromOPCUAStructure","filterByListenType","filterListByNodeId","browserResults","nodesToRead","filterListEntryByNodeId","addressItemsToRead","addressItemsToReadCount","addressItemsToBrowse","crawlerResults","nodesToReadCount"],"mappings":"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","file":"../opcua-iiot-result-filter.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreFilter = require('./core/opcua-iiot-core-filter')\n  const _ = require('underscore')\n\n  function OPCUAIIoTResultFilter (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.datatype = config.datatype\n    this.fixedValue = config.fixedValue\n    this.fixPoint = parseInt(config.fixPoint) | 2\n    this.withPrecision = config.withPrecision\n    this.precision = parseInt(config.precision) | 2\n    this.entry = config.entry || 1\n    this.justValue = config.justValue\n    this.withValueCheck = config.withValueCheck\n    this.minvalue = config.minvalue\n    this.maxvalue = config.maxvalue\n    this.defaultvalue = config.defaultvalue\n    this.topic = config.topic\n    this.name = config.name\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.bianco = coreFilter.core.createBiancoIIoT()\n    coreFilter.core.assert(node.bianco.iiot)\n\n    node.status({ fill: 'blue', shape: 'ring', text: 'new' })\n\n    node.bianco.iiot.nodeIdToFilter = function (msg) {\n      let doFilter = true\n      let nodeList = coreFilter.core.buildNodeListFromClient(msg)\n      let elementNodeId = null\n\n      if (nodeList && nodeList.length) {\n        doFilter = !nodeList.some(function (element, index, array) {\n          elementNodeId = element.nodeId || element\n          return elementNodeId.toString() === node.nodeId.toString()\n        })\n      }\n\n      return doFilter\n    }\n\n    node.bianco.iiot.isNodeIdNotToFindInAddressSpaceItems = function (msg) {\n      if (msg.addressSpaceItems) {\n        let filteredNodeIds = _.filter(msg.addressSpaceItems, function (entry) {\n          return entry.nodeId === node.nodeId\n        })\n\n        if (filteredNodeIds.length < 1) {\n          return true\n        }\n      } else {\n        if (msg.topic !== node.nodeId) { // TODO: that is very old and should be deleted\n          return true\n        }\n      }\n    }\n\n    node.bianco.iiot.messageIsToFilter = function (msg) {\n      return node.bianco.iiot.nodeIdToFilter(msg) && node.bianco.iiot.isNodeIdNotToFindInAddressSpaceItems(msg)\n    }\n\n    node.on('input', function (msg) {\n      if (!msg.hasOwnProperty('payload') || msg.payload === null || msg.payload === void 0) { // values with false has to be true\n        coreFilter.internalDebugLog('filtering message without payload')\n        return\n      }\n\n      if (node.bianco.iiot.messageIsToFilter(msg)) {\n        coreFilter.internalDebugLog('filtering message on filter')\n        return\n      }\n\n      const message = Object.assign({}, msg)\n\n      message.topic = node.topic || message.topic\n      message.nodeId = node.nodeId\n      message.justValue = node.justValue\n      message.filter = true\n      message.filtertype = 'filter'\n      message.payload = node.bianco.iiot.filterByType(message) || message.payload\n\n      if (node.justValue) {\n        message.payload = node.bianco.iiot.filterResult(message)\n      }\n\n      coreFilter.core.assert(message.payload)\n      node.send(message)\n    })\n\n    node.bianco.iiot.filterByType = function (msg) {\n      let result = null\n      switch (msg.nodetype) {\n        case 'read':\n          result = node.bianco.iiot.filterByReadType(msg)\n          break\n        case 'write':\n          result = node.bianco.iiot.filterByWriteType(msg)\n          break\n        case 'listen':\n          result = node.bianco.iiot.filterByListenType(msg)\n          break\n        case 'browse':\n          result = node.bianco.iiot.filterByBrowserType(msg)\n          break\n        case 'crawl':\n          result = node.bianco.iiot.filterByCrawlerType(msg)\n          break\n        default:\n          coreFilter.internalDebugLog('unknown node type injected to filter for ' + msg.nodetype)\n          if (node.showErrors) {\n            node.error(new Error('unknown node type injected to filter for ' + msg.nodetype), msg)\n          }\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.convertResult = function (msg, result) {\n      try {\n        let convertedResult = null\n\n        if (node.fixPoint >= 0 && node.fixedValue) {\n          convertedResult = Number.parseFloat(result).toFixed(node.fixPoint)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (node.precision >= 0 && node.withPrecision) {\n          convertedResult = Number.parseFloat(result).toPrecision(node.precision)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (convertedResult === null) {\n          convertedResult = result\n        }\n\n        if (node.withValueCheck) {\n          if (convertedResult < node.minvalue || convertedResult > node.maxvalue) {\n            convertedResult = node.defaultvalue\n          }\n        }\n\n        return convertedResult\n      } catch (err) {\n        coreFilter.internalDebugLog('result converting error ' + err.message)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n        return result\n      }\n    }\n\n    node.bianco.iiot.convertResultValue = function (msg) {\n      let result = msg.payload\n\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('result null or undefined')\n        if (node.showErrors) {\n          node.error(new Error('converted result null or undefined'), msg)\n        }\n        return result\n      }\n\n      if (result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      if (!node.datatype) {\n        coreFilter.internalDebugLog('data type unknown - set the data type inside the result filter node')\n        return result\n      }\n\n      result = node.bianco.iiot.convertDataType(result)\n\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('data type result null or undefined')\n        if (node.showErrors) {\n          node.error(new Error('converted by data type result null or undefined'), msg)\n        }\n      } else {\n        result = node.bianco.iiot.convertResult(msg, result)\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.filterResult = function (msg) {\n      if (msg.nodetype === 'read' || msg.nodetype === 'listen') {\n        return node.bianco.iiot.convertResultValue(msg) || msg.payload\n      }\n      return msg.payload\n    }\n\n    node.bianco.iiot.extractValueFromOPCUAArrayStructure = function (msg, entryIndex) {\n      let result = null\n      let payload = msg.payload[entryIndex]\n\n      if (!payload) {\n        return result\n      }\n\n      if (payload.hasOwnProperty('value')) {\n        if (payload.value.hasOwnProperty('value')) {\n          result = payload.value.value\n        } else {\n          result = payload.value\n        }\n      } else {\n        result = payload\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.extractValueFromOPCUAStructure = function (msg) {\n      let result = null\n\n      if (msg.payload.hasOwnProperty('value')) {\n        if (msg.payload.value.hasOwnProperty('value')) {\n          result = msg.payload.value.value\n        } else {\n          result = msg.payload.value\n        }\n      } else {\n        result = msg.payload\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.filterByReadType = function (msg) {\n      let result = null\n\n      if (msg.payload.length >= node.entry) {\n        result = node.bianco.iiot.extractValueFromOPCUAArrayStructure(msg, node.entry - 1)\n      } else {\n        result = node.bianco.iiot.extractValueFromOPCUAStructure(msg)\n      }\n\n      if (result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.filterByWriteType = function (msg) {\n      return null // has no value\n    }\n\n    node.bianco.iiot.filterByListenType = function (msg) {\n      let result = null\n\n      if (msg.payload && msg.payload.hasOwnProperty('value')) {\n        result = msg.payload.value\n      } else {\n        result = msg.payload\n      }\n\n      if (result && result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.filterByBrowserType = function (msg) {\n      let result = coreFilter.core.filterListByNodeId(node.nodeId, msg.payload.browserResults)\n\n      if (msg.addressSpaceItems && msg.addressSpaceItems.length) {\n        msg.addressSpaceItems = coreFilter.core.filterListByNodeId(node.nodeId, msg.addressSpaceItems)\n      }\n\n      if (msg.nodesToRead && msg.nodesToRead.length) {\n        msg.nodesToRead = coreFilter.core.filterListEntryByNodeId(node.nodeId, msg.nodesToRead)\n        msg.nodesToReadCount = msg.nodesToRead.length\n      }\n\n      if (msg.addressItemsToRead && msg.addressItemsToRead.length) {\n        msg.addressItemsToRead = coreFilter.core.filterListByNodeId(node.nodeId, msg.addressItemsToRead)\n        msg.addressItemsToReadCount = msg.addressItemsToRead.length\n      }\n\n      if (msg.addressItemsToBrowse && msg.addressItemsToBrowse.length) {\n        msg.addressItemsToBrowse = coreFilter.core.filterListByNodeId(node.nodeId, msg.addressItemsToBrowse)\n        msg.addressItemsToBrowseCount = msg.addressItemsToBrowse.length\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.filterByCrawlerType = function (msg) {\n      let result = coreFilter.core.filterListByNodeId(node.nodeId, msg.payload.crawlerResults)\n\n      if (msg.addressSpaceItems && msg.addressSpaceItems.length) {\n        msg.addressItems = coreFilter.core.filterListByNodeId(node.nodeId, msg.addressSpaceItems)\n      }\n\n      return result\n    }\n\n    node.bianco.iiot.convertDataType = function (result) {\n      coreFilter.internalDebugLog('data type convert for ' + node.nodeId)\n      return coreFilter.core.convertDataValueByDataType({ value: result }, node.datatype)\n    }\n\n    if (node.withValueCheck) {\n      node.minvalue = node.bianco.iiot.convertDataType(node.minvalue)\n      node.maxvalue = node.bianco.iiot.convertDataType(node.maxvalue)\n    }\n\n    node.status({ fill: 'green', shape: 'dot', text: 'active' })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Result-Filter', OPCUAIIoTResultFilter)\n}\n"]}