{"version":3,"sources":["opcua-iiot-flex-connector.js"],"names":["module","exports","RED","require","install","coreConnector","nodes","registerType","config","OPCUAIIoTFlexConnector","createNode","this","name","showStatusActivities","showErrors","connector","node","bianco","core","createBiancoIIoT","assert","iiot","fill","shape","text","msg","internalDebugLog","payload","endpoint","includes","error","Error","registerToConnector","on","done","isInitializedBiancoIIoTNode","deregisterToConnector","resetBiancoNode"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAgBF,QAAQ,oCAkD5BD,EAAII,MAAMC,aAAa,4BAhDvB,SAAiCC,GAAjCN,EAAAI,MAASG,WAAAA,KAAAA,GACPP,KAAII,KAAMI,EAAAA,KACVC,KAAKC,qBAALJ,EAAAK,qBACAF,KAAKE,WAAAA,EAALC,WACAH,KAAKG,UAALZ,EAAkBM,MAAOM,QAAzBN,EAAAO,WAGA,IAAIC,EAAOL,KACXK,EAAKC,OAASZ,EAAca,KAAKC,mBACjCd,EAAca,KAAKE,OAAOJ,EAAKC,OAAOI,MAExBC,EAAAA,OAAM,CAARA,KAAA,OAAAC,MAAA,OAAAC,KAAA,QAA+BA,EAAAA,GAAM,QAAA,SAAAC,GAAjDpB,EAAAqB,iBAAA,kCAGErB,EAAAA,UAGMoB,EAAIE,QAAQC,UAAYH,EAAIE,QAAQC,SAASC,SAAS,aADxDb,EAAJU,iBAAoB,6BAClBrB,EAAgBuB,iBAAgBD,EAAAA,SAC9BtB,EAAAA,UAAcqB,OAAAA,KAAAA,uBAAiBD,EAAAE,QAA/B,WACAtB,EAAcqB,iBAAiBD,6BAC/BT,EAAKD,KAAAA,OAGJV,EAHDqB,iBAAA,kDAHFV,EAOOc,MAAA,IAAAC,MAAA,kDAAAN,KAGNpB,EAAAqB,iBAAA,gDAXHV,EAYOc,MAAA,IAAAC,MAAA,gDAAAN,MAIRpB,EAnBDa,KAAAc,oBAAAhB,GAuBAA,EAAKiB,GAAG,QAAS,SAAAC,GACX7B,EAAca,KAAKiB,4BAA4BnB,GACjDX,EAAca,KAAKkB,sBAAsBpB,EAAM,WAC7CX,EAAca,KAAKmB,gBAAgBrB,GACnCkB,MAGFA","file":"../opcua-iiot-flex-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreConnector = require('./core/opcua-iiot-core-connector')\n\n  function OPCUAIIoTFlexConnector (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = this\n    node.bianco = coreConnector.core.createBiancoIIoT()\n    coreConnector.core.assert(node.bianco.iiot)\n\n    node.status({ fill: 'blue', shape: 'ring', text: 'new' })\n\n    node.on('input', function (msg) {\n      coreConnector.internalDebugLog('connector change request input')\n\n      if (node.connector) {\n        if (msg.payload.endpoint && msg.payload.endpoint.includes('opc.tcp:')) {\n          coreConnector.internalDebugLog('connector change possible')\n          coreConnector.internalDebugLog(msg.payload)\n          node.connector.bianco.iiot.restartWithNewSettings(msg.payload, () => {\n            coreConnector.internalDebugLog('connector change injected')\n            node.send(msg)\n          })\n        } else {\n          coreConnector.internalDebugLog('Connector Change Not Possible - Wrong Endpoint')\n          node.error(new Error('Connector Change Not Possible - Wrong Endpoint'), msg)\n        }\n      } else {\n        coreConnector.internalDebugLog('Connector Change Not Possible - No Connector')\n        node.error(new Error('Connector Change Not Possible - No Connector'), msg)\n      }\n    })\n\n    coreConnector.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        coreConnector.core.deregisterToConnector(node, () => {\n          coreConnector.core.resetBiancoNode(node)\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Connector', OPCUAIIoTFlexConnector)\n}\n"]}