{"version":3,"sources":["opcua-iiot-read.js"],"names":["module","exports","RED","require","install","coreClient","nodes","registerType","config","OPCUAIIoTRead","createNode","attributeId","this","parseInt","maxAge","depth","name","justValue","showStatusActivities","showErrors","parseStrings","historyDays","serverMaxItemsToRead","getNode","node","core","initClientNode","assert","bianco","iiot","handleReadError","err","msg","readDebugLog","isSessionBad","readAllFromNodeId","session","itemsToRead","itemsRead","itemsReadDone","length","slice","itemSliceValue","push","readAllAttributes","then","readResult","buildResultMessage","catch","isInitializedBiancoIIoTNode","internalDebugLog","message","readValueFromNodeId","readVariableValue","startDate","getDate","historyEnd","historyStart","Date","setDate","readHistoryValue","endDate","payload","readFromNodeId","item","transformedItem","transformedItemsToRead","nodeId","Number","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","return","read","send","readFromSession","originMsg","checkSessionNotValid","Promise","resolve","READ_TYPE","ALL","VALUE","readHistoryDataFromNodeId","readType","Object","assign","nodetype","setNodeStatusTo","dataValuesString","extractDataValueString","setMessageProperties","enhanceMessage","JSON","stringify","stringValue","parse","error","resultsConverted","results","warn","on","setMessageProperty","opcuaSession","buildNodesToRead","registerToConnector","deregisterToConnector","resetBiancoNode"],"mappings":"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","file":"../opcua-iiot-read.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Read Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreClient = require('./core/opcua-iiot-core-client')\n\n  function OPCUAIIoTRead (config) {\n    RED.nodes.createNode(this, config)\n    this.attributeId = parseInt(config.attributeId) || 0\n    this.maxAge = parseInt(config.maxAge) || 1\n    this.depth = parseInt(config.depth) || 1\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.parseStrings = config.parseStrings\n    this.historyDays = parseInt(config.historyDays) || 1\n    this.serverMaxItemsToRead = parseInt(config.serverMaxItemsToRead) || 1000\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreClient.core.initClientNode(this)\n    coreClient.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.handleReadError = function (err, msg) {\n      coreClient.readDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      if (coreClient.core.isSessionBad(err)) {\n        node.emit('opcua_client_not_ready')\n      }\n    }\n\n    node.bianco.iiot.readAllFromNodeId = function (session, itemsToRead, msg) {\n      let itemsRead = []\n      let itemsReadDone = []\n      const itemSliceValue = parseInt(node.serverMaxItemsToRead * 0.01) || 10\n\n      while (itemsToRead.length > 0) {\n        itemsRead = itemsToRead.slice(0, itemSliceValue)\n        itemsReadDone.push(itemsToRead.slice(0, itemSliceValue))\n        itemsToRead = itemsToRead.slice(itemSliceValue + 1)\n\n        coreClient.readAllAttributes(session, itemsRead, msg)\n          .then(function (readResult) {\n            try {\n              node.send(node.bianco.iiot.buildResultMessage('AllAttributes', readResult))\n            } catch (err) {\n              /* istanbul ignore next */\n              node.bianco.iiot.handleReadError(err, readResult.msg)\n            }\n          }).catch(function (err) {\n            /* istanbul ignore next */\n            (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n          })\n      }\n    }\n\n    node.bianco.iiot.readValueFromNodeId = function (session, itemsToRead, msg) {\n      let itemsRead = []\n      let itemsReadDone = []\n\n      while (itemsToRead.length > 0) {\n        itemsRead = itemsToRead.slice(0, node.serverMaxItemsToRead - 1)\n        itemsReadDone.push(itemsToRead.slice(0, node.serverMaxItemsToRead - 1))\n        itemsToRead = itemsToRead.slice(node.serverMaxItemsToRead)\n\n        coreClient.readVariableValue(session, itemsRead, msg)\n          .then(function (readResult) {\n            let message = node.bianco.iiot.buildResultMessage('VariableValue', readResult)\n            node.send(message)\n          }).catch(function (err) {\n            /* istanbul ignore next */\n            (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n          })\n      }\n    }\n\n    node.bianco.iiot.readHistoryDataFromNodeId = function (session, itemsToRead, msg) {\n      const startDate = new Date()\n      node.bianco.iiot.historyStart = new Date()\n      node.bianco.iiot.historyStart.setDate(startDate.getDate() - node.historyDays)\n      node.bianco.iiot.historyEnd = new Date()\n\n      let itemsRead = []\n      let itemsReadDone = []\n\n      while (itemsToRead.length > 0) {\n        itemsRead = itemsToRead.slice(0, node.serverMaxItemsToRead - 1)\n        itemsReadDone.push(itemsToRead.slice(0, node.serverMaxItemsToRead - 1))\n        itemsToRead = itemsToRead.slice(node.serverMaxItemsToRead)\n\n        coreClient.readHistoryValue(\n          session,\n          itemsRead,\n          msg.payload.historyStart || node.bianco.iiot.historyStart,\n          msg.payload.historyEnd || node.bianco.iiot.historyEnd,\n          msg)\n          .then(function (readResult) {\n            let message = node.bianco.iiot.buildResultMessage('HistoryValue', readResult)\n            message.historyStart = readResult.startDate || node.bianco.iiot.historyStart\n            message.historyEnd = readResult.endDate || node.bianco.iiot.historyEnd\n            node.send(message)\n          }).catch(function (err) {\n            /* istanbul ignore next */\n            (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n          })\n      }\n    }\n\n    node.bianco.iiot.readFromNodeId = function (session, itemsToRead, msg) {\n      let item = null\n      let transformedItem = null\n      let transformedItemsToRead = []\n\n      for (item of itemsToRead) {\n        transformedItem = {\n          nodeId: item,\n          attributeId: Number(node.attributeId) || null\n        }\n        transformedItemsToRead.push(transformedItem)\n      }\n      itemsToRead = transformedItemsToRead\n\n      let itemsRead = []\n      let itemsReadDone = []\n\n      while (itemsToRead.length > 0) {\n        itemsRead = itemsToRead.slice(0, node.serverMaxItemsToRead - 1)\n        itemsReadDone.push(itemsToRead.slice(0, node.serverMaxItemsToRead - 1))\n        itemsToRead = itemsToRead.slice(node.serverMaxItemsToRead)\n\n        coreClient.read(session, itemsRead, msg.payload.maxAge || node.maxAge, msg)\n          .then(function (readResult) {\n            let message = node.bianco.iiot.buildResultMessage('Default', readResult)\n            message.maxAge = node.maxAge\n            node.send(message)\n          }).catch(function (err) {\n            /* istanbul ignore next */\n            (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n          })\n      }\n    }\n\n    node.bianco.iiot.readFromSession = function (session, itemsToRead, originMsg) {\n      let msg = Object.assign({}, originMsg)\n      if (coreClient.core.checkSessionNotValid(session, 'Reader')) {\n        return\n      }\n\n      coreClient.readDebugLog('Read With AttributeId ' + node.attributeId)\n\n      new Promise(function (resolve) {\n        switch (parseInt(node.attributeId)) {\n          case coreClient.READ_TYPE.ALL:\n            node.bianco.iiot.readAllFromNodeId(session, itemsToRead, msg)\n            break\n          case coreClient.READ_TYPE.VALUE:\n            node.bianco.iiot.readValueFromNodeId(session, itemsToRead, msg)\n            break\n          case coreClient.READ_TYPE.HISTORY:\n            node.bianco.iiot.readHistoryDataFromNodeId(session, itemsToRead, msg)\n            break\n          default:\n            node.bianco.iiot.readFromNodeId(session, itemsToRead, msg)\n        }\n        resolve()\n      }).then(function () {\n        if (node.showStatusActivities) {\n          coreClient.core.setNodeStatusTo(node, 'active')\n        }\n      })\n    }\n\n    node.bianco.iiot.buildResultMessage = function (readType, readResult) {\n      let message = Object.assign({}, readResult.msg)\n      message.payload = {}\n      message.nodetype = 'read'\n      message.readtype = readType\n      message.attributeId = node.attributeId\n      message.justValue = node.justValue\n\n      let dataValuesString = node.bianco.iiot.extractDataValueString(readResult)\n      message = node.bianco.iiot.setMessageProperties(message, readResult, dataValuesString)\n\n      if (!node.justValue) {\n        message = node.bianco.iiot.enhanceMessage(message, readResult)\n      }\n\n      return message\n    }\n\n    node.bianco.iiot.extractDataValueString = function (readResult) {\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify(readResult.results, null, 2)\n      } else {\n        dataValuesString = JSON.stringify(readResult, null, 2)\n      }\n      return dataValuesString\n    }\n\n    node.bianco.iiot.setMessageProperties = function (message, readResult, stringValue) {\n      try {\n        RED.util.setMessageProperty(message, 'payload', JSON.parse(stringValue))\n      } /* istanbul ignore next */ catch (err) {\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for dataValues type ' + JSON.stringify(readResult, null, 2))\n          node.error(err, readResult.msg)\n        }\n\n        message.payload = stringValue\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.bianco.iiot.enhanceMessage = function (message, readResult) {\n      try {\n        message.resultsConverted = {}\n        let dataValuesString = JSON.stringify(readResult.results, null, 2)\n        RED.util.setMessageProperty(message, 'resultsConverted', JSON.parse(dataValuesString))\n      } /* istanbul ignore next */ catch (err) {\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for dataValues type ' + readResult.results)\n          node.error(err, readResult.msg)\n        }\n\n        message.resultsConverted = null\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.on('input', function (msg) {\n      if (!coreClient.core.checkConnectorState(node, msg, 'Read')) {\n        return\n      }\n\n      if (node.showStatusActivities) {\n        coreClient.core.setNodeStatusTo(node, 'reading')\n      }\n\n      try {\n        node.bianco.iiot.readFromSession(node.bianco.iiot.opcuaSession, coreClient.core.buildNodesToRead(msg), msg)\n      } /* istanbul ignore next */ catch (err) {\n        node.bianco.iiot.handleReadError(err, msg)\n      }\n    })\n\n    coreClient.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreClient.core.deregisterToConnector(node, () => {\n        coreClient.core.resetBiancoNode(node)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Read', OPCUAIIoTRead)\n}\n"]}