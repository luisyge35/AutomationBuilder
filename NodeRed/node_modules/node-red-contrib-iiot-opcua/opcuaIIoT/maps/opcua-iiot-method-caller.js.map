{"version":3,"sources":["opcua-iiot-method-caller.js"],"names":["module","exports","RED","require","install","coreMethod","nodes","node","showErrors","config","this","objectId","methodId","OPCUAIIoTMethodCaller","createNode","methodType","value","showStatusActivities","justValue","name","inputArguments","getNode","connector","assert","core","iiot","err","msg","internalDebugLog","bianco","emit","handleMethodWarn","message","warn","session","checkSessionNotValid","getArgumentDefinition","opcuaSession","then","results","detailDebugLog","JSON","stringify","isInitializedBiancoIIoTNode","callMethod","definitionResults","callMethods","data","result","Object","assign","outputArguments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","push","statusCode","_iterator","return","dataValuesString","definition","util","setMessageProperty","parse","readResult","_typeof","error","payload","catch","buildCallMessage","invalidMessage","registerToConnector","resetBiancoNode","done"],"mappings":"AAOA,8PAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UADhCJ,IAAMK,EAAWF,QAAUD,iCAiGnBA,EAAAI,MAAIC,aAAKC,2BA7Ff,SAAgCC,GAFhCP,EAAIG,MAAAA,WAAaF,KAAQM,GAIvBC,KAAKC,SAAWF,EAAOE,SAFzBD,KAAAE,SAASC,EAAAA,SACPX,KAAII,WAAMQ,EAAVC,WACAL,KAAKC,MAALF,EAAgBA,MAChBC,KAAKE,UAAWH,EAAOG,UACvBF,KAAKK,KAAAA,EAAaN,KAClBC,KAAKM,qBAALP,EAAAQ,qBACAP,KAAKQ,WAAYT,EAAOS,WACxBR,KAAKS,eAAcA,EAAnBC,eACAV,KAAKO,UAAAA,EAAAA,MAALI,QAAmCJ,EAAAA,WAEnC,IAAAV,EAAKa,EAAiBX,KAAAA,eAAOW,MAC7Bf,EAAKiB,KAALC,OAAqBjB,EAAMe,OAAQZ,MAGnCJ,EAAAA,OAAWmB,KAAKD,kBAAmBE,SAAnCC,EAAAC,GAGEtB,EAAWuB,iBAAiBF,GADzBG,EAALrB,YACEH,EAAAA,MAAWuB,EAAAA,GAETrB,EAAWmB,KAAKC,aAAhBD,IACDnB,EAAAuB,KAAA,2BAIAvB,EAAAsB,OAAAJ,KAAAM,iBAAA,SAAAC,GARHzB,EAAAC,YAaID,EAAK0B,KAAKD,GAAVzB,EAAAqB,iBAAAI,IAGF3B,EAAAA,OAAUoB,KAACG,oBAAX,SAAAM,EAAAP,GALFtB,EAAAmB,KAAAW,qBAAAD,EAAA,kBAUIP,EAAAf,UAAAe,EAAAP,eACDf,EAAA+B,sBAAA7B,EAAAsB,OAAAJ,KAAAY,aAAAV,GAAAW,KAAA,SAAAC,GAIGlC,EAAWmC,eAAe,qCAAuCC,KAAKC,UAAUH,IAFhFZ,EAAIf,OAAJa,KAAgBE,WAAIP,EAAAA,KACtBf,MAAAA,SAAUqB,GACRrB,EAAWmC,KAAAA,4BAAejC,GAAAA,EAAAsB,OAAuCY,KAAKC,kBAAtEhB,EAAAC,GAAAtB,EAAAuB,iBAAAF,EAAAM,WAGC3B,EAAAA,iBAAgBsC,IAAAA,MAAAA,qCAIpBpC,EAAAsB,OAAAJ,KAAAmB,WAAA,SAAAjB,EAAAkB,GAdHxC,EAAAyC,YAAAvC,EAAAsB,OAAAJ,KAAAY,aAAAV,GAAAW,KAAA,SAAAS,GAmBI1C,EAAWmC,eAAe,yBAA2BC,KAAKC,UAAUK,IADtE1C,IAAAA,EAAWyC,KACTzC,EAAWmC,GAEPQ,EAASC,OAAbC,OAAA,GAAAH,EAAApB,KACAK,EAAImB,SAAe,SACnBnB,EAAIA,WAAiBkB,EAAAA,IAAPnC,WAvBlB,IAAAqC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAyBIvB,IAAAA,IAAAA,EAAAA,EAAQjB,EAARwB,QAAAP,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAAA,EAAqBwB,EAAAxC,MAPyDmC,EAAAM,KAAA,CAAAC,WAAAV,EAAAU,WAAAP,gBAAAH,EAAAG,kBAlBlF,MAAAzB,GAAA2B,GAAA,EAAAC,EAAA5B,EAAA,QAAA,IAAA0B,GAAA,MAAAO,EAAAC,QAAAD,EAAAC,SAAA,QAAA,GAAAP,EAAA,MAAAC,GA+BI,IAAIO,EAAmB,GAHEH,EAVqDnD,EAAAW,WAS9Ec,EAAAZ,uBAA6BY,EAAA,eACQgB,KAAOU,UAArBP,EAAA,KAAA,IAArBV,KAAAC,UAAA,CACDH,QAAAQ,EAAAR,QAX6EuB,WAAAjB,GAAA,KAAA,GAAA,IAAA3C,EAAA6D,KAAAC,mBAAAhC,EAAA,UAAAS,KAAAwB,MAAAJ,IAAA,MAAAnC,GAAAnB,EAAAC,aAAAD,EAAA0B,KAAA,sDAAA,oBAAAiC,WAAA,YAAAC,QAAAD,cAAA3D,EAAA6D,MAAA1C,EAAAC,IAAAK,EAAAqC,QAAAR,EAAA7B,EAAAoC,MAAA1C,EAAAM,QAa9EzB,EAAIsD,KAAAA,KAyBHS,MAAM,SAAU5C,GAxBjBrB,EAASa,iBAAWQ,GAClBnB,EAAIyB,YACFzB,EAAA6D,MAAOpC,EAAOL,MAIhBkC,EAAAA,GAAAA,QAAAA,SAAmBpB,GACjBF,GAAAA,EAASQ,KAAKR,oBADkBhC,EAAAoB,EAAA,gBAChCY,CA8BN,IAAMP,EAAU3B,EAAWkE,iBAAiBhE,EAAMoB,GAzBhDtB,EAAImE,eAAAjE,EAAAyB,IAGFzB,EAAAsB,OAAQJ,KAACjB,oBAAYD,EAAAsB,OAAAJ,KAAAY,aAAAL,MAGpB3B,EAAAmB,KAAAiD,oBAAAlE,GACDyB,EAAAA,GAAAA,QAAQqC,SAAAA,GACRrC,EAAOR,KAAC4C,sBAAR7D,EAAA,WACDF,EAAAmB,KAAAkD,gBAAAnE,GA4BDoE","file":"../opcua-iiot-method-caller.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT method call.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreMethod = require('./core/opcua-iiot-core-method')\n\n  function OPCUAIIoTMethodCaller (config) {\n    RED.nodes.createNode(this, config)\n    this.objectId = config.objectId\n    this.methodId = config.methodId\n    this.methodType = config.methodType\n    this.value = config.value\n    this.justValue = config.justValue\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.inputArguments = config.inputArguments\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreMethod.core.initClientNode(this)\n    coreMethod.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.handleMethodError = function (err, msg) {\n      coreMethod.internalDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      if (coreMethod.core.isSessionBad(err)) {\n        node.emit('opcua_client_not_ready')\n      }\n    }\n\n    node.bianco.iiot.handleMethodWarn = function (message) {\n      if (node.showErrors) {\n        node.warn(message)\n      }\n\n      coreMethod.internalDebugLog(message)\n    }\n\n    node.bianco.iiot.callMethodOnSession = function (session, msg) {\n      if (coreMethod.core.checkSessionNotValid(session, 'MethodCaller')) {\n        return\n      }\n\n      if (msg.methodId && msg.inputArguments) {\n        coreMethod.getArgumentDefinition(node.bianco.iiot.opcuaSession, msg).then(function (results) {\n          coreMethod.detailDebugLog('Call Argument Definition Results: ' + JSON.stringify(results))\n          node.bianco.iiot.callMethod(msg, results)\n        }).catch((err) => {\n          (coreMethod.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleMethodError(err, msg) : coreMethod.internalDebugLog(err.message)\n        })\n      } else {\n        coreMethod.internalDebugLog(new Error('No Method Id And/Or Parameters'))\n      }\n    }\n\n    node.bianco.iiot.callMethod = function (msg, definitionResults) {\n      coreMethod.callMethods(node.bianco.iiot.opcuaSession, msg).then(function (data) {\n        coreMethod.detailDebugLog('Methods Call Results: ' + JSON.stringify(data))\n\n        let result = null\n        let outputArguments = []\n        let message = Object.assign({}, data.msg)\n        message.nodetype = 'method'\n        message.methodType = data.msg.methodType\n\n        for (result of data.results) {\n          outputArguments.push({ statusCode: result.statusCode, outputArguments: result.outputArguments })\n        }\n\n        let dataValuesString = {}\n        if (node.justValue) {\n          if (message.inputArguments) {\n            delete message['inputArguments']\n          }\n          dataValuesString = JSON.stringify(outputArguments, null, 2)\n        } else {\n          dataValuesString = JSON.stringify({\n            results: data.results,\n            definition: definitionResults\n          }, null, 2)\n        }\n\n        try {\n          RED.util.setMessageProperty(message, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for dataValues type ' + typeof readResult)\n            node.error(err, msg)\n          }\n          message.payload = dataValuesString\n          message.error = err.message\n        }\n\n        node.send(message)\n      }).catch(function (err) {\n        coreMethod.internalDebugLog(err)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      })\n    }\n\n    node.on('input', function (msg) {\n      if (!coreMethod.core.checkConnectorState(node, msg, 'MethodCaller')) {\n        return\n      }\n\n      const message = coreMethod.buildCallMessage(node, msg)\n      if (coreMethod.invalidMessage(node, message)) {\n        return\n      }\n      node.bianco.iiot.callMethodOnSession(node.bianco.iiot.opcuaSession, message)\n    })\n\n    coreMethod.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreMethod.core.deregisterToConnector(node, () => {\n        coreMethod.core.resetBiancoNode(node)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Method-Caller', OPCUAIIoTMethodCaller)\n}\n"]}