{"version":3,"sources":["opcua-iiot-server-aso.js"],"names":["module","exports","RED","require","install","core","nodes","registerType","config","OPCUAIIoTASO","createNode","nodeId","this","browsename","displayname","objecttype","referencetype","referenceNodeId","datatype","value","name","node","bianco","createBiancoIIoT","assert","iiot","internalDebugLog","on","msg","nodetype","topic","payload","injectType","includes","nodeOPCUA","OBJECTS_ROOT","Organizes","JSON","stringify","send","error","Error","resetBiancoNode","done"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAOF,QAAQ,0BAFrBD,EAAAI,MAAAC,aAAA,wBAIE,SAAuBC,GAAvBN,EAAAI,MAASG,WAAcD,KAAvBA,GACEN,KAAII,OAAMI,EAAWC,OACrBC,KAAKD,WAASH,EAAOG,WACrBC,KAAKC,YAAaL,EAAOK,YACzBD,KAAKE,WAALN,EAAyBO,WACzBH,KAAKG,cAAaP,EAAOO,cACzBH,KAAKI,gBAAgBR,EAAOQ,gBAC5BJ,KAAKK,SAAAA,EAAkBT,SACvBI,KAAKM,MAALV,EAAgBA,MAChBI,KAAKO,KAALX,EAAmBY,KAGnB,IAAIC,EAAOT,KACXS,EAAKC,OAASjB,EAAKkB,mBACnBlB,EAAKmB,OAAOH,EAAKC,OAAOG,MACxBpB,EAAKqB,iBAAiB,iBAGpBL,EAAAM,GAAIC,QAAIC,SAAaD,GACDE,WAAlBT,EAAKV,WACLU,EAAKH,OAALU,EAAgBA,OAAIV,EAAYG,OAChCA,EAAKF,SAAWS,EAACG,UAAeV,EAACF,SAClCE,EAAAF,MAAAS,EAAAG,SAAAV,EAAAF,OAEOY,EAAAA,CAAAA,QAAS,GAAXH,MAAgB,2BAEtBA,SAAe,SADfA,WAAY,OAERI,EAAAA,OAAJC,SAAA,OAAAZ,EAAAV,OAAAsB,SAAA,OAAAZ,EAAAV,OAAAsB,SAAA,OAGEL,EAAIG,QAAQpB,OAASU,EAAKV,OAD5BiB,EAAIP,QAAKV,WAAgBU,EAArBR,WACFe,EAAIG,QAAQpB,YAAcA,EAAAA,YAC1BiB,EAAIG,QAAQlB,WAAaQ,EAAKR,WAC9Be,EAAIG,QAAQjB,SAAZO,EAA0BA,SAC1BO,EAAIG,QAAQhB,MAAAA,EAAaM,MAEzBO,EAAIG,QAAQZ,gBAAZE,EAAAJ,iBAAAZ,EAAA6B,UAAAC,aAEAP,EAAIG,QAAQd,cAAZI,EAA8BA,eAAAhB,EAAwBA,UAAK6B,iBAA3DE,UAGA/B,EAAKqB,iBAAiB,yBAA2BW,KAAKC,UAAUV,IAChEP,EAAKkB,KAAKX,IAGVP,EAAKmB,MAAM,IAAIC,MAAM,2BAA4Bb,KAKnDvB,EAAAA,GAAKqB,QAAAA,SAAAA,GACLrB,EAAKqC,iBAAgBrB,kBACrBsB,EAAID,gBAAArB,GAHNsB","file":"../opcua-iiot-server-aso.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTASO (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.browsename = config.browsename\n    this.displayname = config.displayname\n    this.objecttype = config.objecttype\n    this.referencetype = config.referencetype\n    this.referenceNodeId = config.referenceNodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.name = config.name\n\n    let node = this\n    node.bianco = core.createBiancoIIoT()\n    core.assert(node.bianco.iiot)\n    core.internalDebugLog('Open ASO Node')\n\n    node.on('input', function (msg) {\n      if (msg.nodetype === 'inject') {\n        node.nodeId = msg.topic || node.nodeId\n        node.datatype = msg.datatype || node.datatype\n        node.value = msg.payload || node.value\n      }\n\n      msg = { payload: {} } // clean message\n      msg.topic = 'ServerAddressSpaceObject'\n      msg.nodetype = 'inject'\n      msg.injectType = 'ASO'\n\n      if (node.nodeId.includes('i=') || node.nodeId.includes('s=') || node.nodeId.includes('b=')) {\n        msg.payload.nodeId = node.nodeId\n        msg.payload.browsename = node.browsename\n        msg.payload.displayname = node.displayname\n        msg.payload.objecttype = node.objecttype\n        msg.payload.datatype = node.datatype\n        msg.payload.value = node.value\n\n        msg.payload.referenceNodeId = node.referenceNodeId || core.nodeOPCUA.OBJECTS_ROOT\n        msg.payload.referencetype = node.referencetype || core.nodeOPCUA.ReferenceTypeIds.Organizes\n\n        core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n        node.send(msg)\n      } else {\n        /* istanbul ignore next */\n        node.error(new Error('ASO NodeId Is Not Valid'), msg)\n      }\n    })\n\n    node.on('close', (done) => {\n      core.internalDebugLog('Close ASO Node')\n      core.resetBiancoNode(node)\n      done()\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-ASO', OPCUAIIoTASO)\n}\n"]}