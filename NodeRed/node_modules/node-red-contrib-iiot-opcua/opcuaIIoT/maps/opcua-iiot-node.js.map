{"version":3,"sources":["opcua-iiot-node.js"],"names":["module","exports","RED","require","install","core","nodes","registerType","config","OPCUAIIoTNode","createNode","nodeId","this","datatype","value","topic","name","injectType","node","bianco","createBiancoIIoT","assert","iiot","subscribed","fill","shape","text","msg","nodetype","on","status","addressSpaceItems","valuesToWrite","push","datatypeName","convertDataValueByDataType","payload","err","internalDebugLog","showErrors","error","JSON","stringify","send"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAOF,QAAQ,0BAuCcD,EAAAI,MAA3BC,aAAA,kBArCN,SAAwBC,GAAxBN,EAAAI,MAASG,WAAeD,KAAxBA,GACEN,KAAII,OAAMI,EAAWC,OACrBC,KAAKD,SAASH,EAAOG,SACrBC,KAAKC,MAALL,EAAgBA,MAChBI,KAAKE,MAAQN,EAAOM,MACpBF,KAAKG,KAALP,EAAmBQ,KACnBJ,KAAKI,WAAaR,EAAlBS,WACAL,KAAKK,WAAaT,EAAOS,WAGzB,IAAIC,EAAON,KACXM,EAAKC,OAASd,EAAKe,mBACnBf,EAAKgB,OAAOH,EAAKC,OAAOG,MACxBJ,EAAKC,OAAOG,KAAKC,YAAa,EAEhBC,EAAAA,OAAM,CAARA,KAAA,OAAAC,MAAA,OAAAC,KAAA,QAA+BA,EAAAA,GAAM,QAAA,SAAAC,GAWAD,GAXjDC,EAAAC,SAAA,OAEAV,EAAKW,WAAYF,EAAAV,YAAeC,EAAAD,WAC9BU,EAAIC,OAAJN,KAAeC,YAAfL,EAAAC,OAAAG,KAAAC,WAEiBA,WAAbL,EAACC,WAGCD,EAAKC,OAAOG,KAAKC,WADnBL,EAAKD,OAAAA,CAAAA,KAAe,OAAxBQ,MAAkC,MAAAC,KAAA,eAE9BR,EAAKY,OAAO,CAAAN,KAAA,OAAAC,MAAA,OAAAC,KAAA,mBAA8BA,EAAAA,OAAM,CAAAF,KAAA,OAAAC,MAAA,MAAAC,KAAA,aAEhDR,EAAAA,MAAKY,EAAOf,OAAAG,EAAAH,MAAES,EAAAA,kBAAFG,EAAAI,mBAAA,GAAqC,UAANL,EAAAA,WAAM,CAArCC,EAAZK,cAAAL,EAAAK,eAAA,GACDL,EAAAI,kBAAAE,KAAA,CAAAjB,KAAAE,EAAAF,KAAAL,OAAAO,EAAAP,OAAAuB,aAAAhB,EAAAL,WAEDK,IAAcM,EAAIQ,cAANC,KAAA5B,EAAA8B,2BAAA,CAAArB,MAAA,KAAAI,EAAAJ,MAAAa,EAAAS,QAAAlB,EAAAJ,OAAAI,EAAAL,WAAgBY,MAAOY,GAAOX,EAAIY,iBAAED,GAAhDnB,EAAAqB,YACDrB,EAAAsB,MAAAH,EAAAV,SAkBCA,EAAII,kBAAkBE,KAAK,CAAEjB,KAAME,EAAKF,KAAML,OAAQO,EAAKP,OAAQuB,aAAchB,EAAKL,WAGxFR,EAAKiC,iBAAiB,yBAA2BG,KAAKC,UAAUf,IAd9DA,EAAGgB,KAACZ","file":"../opcua-iiot-node.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTNode (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.topic = config.topic\n    this.name = config.name\n    this.injectType = config.injectType\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.bianco = core.createBiancoIIoT()\n    core.assert(node.bianco.iiot)\n    node.bianco.iiot.subscribed = false\n\n    node.status({ fill: 'blue', shape: 'ring', text: 'new' })\n\n    node.on('input', function (msg) {\n      msg.nodetype = 'node'\n      msg.injectType = msg.injectType || node.injectType\n      node.bianco.iiot.subscribed = !node.bianco.iiot.subscribed\n\n      if (node.injectType === 'listen') {\n        if (node.bianco.iiot.subscribed) {\n          node.status({ fill: 'blue', shape: 'dot', text: 'subscribed' })\n        } else {\n          node.status({ fill: 'blue', shape: 'ring', text: 'not subscribed' })\n        }\n      } else {\n        node.status({ fill: 'blue', shape: 'dot', text: 'injected' })\n      }\n\n      msg.topic = msg.topic || node.topic\n      msg.addressSpaceItems = msg.addressSpaceItems || [] // eslint-disable-line\n\n      if (node.injectType === 'write') {\n        msg.valuesToWrite = msg.valuesToWrite || [] // eslint-disable-line\n        msg.addressSpaceItems.push({ name: node.name, nodeId: node.nodeId, datatypeName: node.datatype })\n\n        try {\n          msg.valuesToWrite.push(core.convertDataValueByDataType({ value: node.value === '' ? msg.payload : node.value }, node.datatype))\n        } catch (err) {\n          core.internalDebugLog(err)\n          if (node.showErrors) {\n            node.error(err, msg)\n          }\n        }\n      } else {\n        msg.addressSpaceItems.push({ name: node.name, nodeId: node.nodeId, datatypeName: node.datatype })\n      }\n\n      core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Node', OPCUAIIoTNode)\n}\n"]}