{"version":3,"sources":["opcua-iiot-event.js"],"names":["module","exports","RED","require","install","coreListener","msg","nodetype","config","nodes","OPCUAIIoTEvent","this","createNode","eventType","eventTypeLabel","resultType","queueSize","usingListener","name","showStatusActivities","showErrors","node","bianco","core","createBiancoIIoT","assert","iiot","subscribed","fill","shape","text","status","getBasicEventFields","uaEventFields","push","getConditionFields","getStateFields","getAllEventFields","uaEventFilter","nodeOPCUA","constructEventFilter","interval","payload","eventSubscriptionPayload","eventFilter","eventFields","send"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAeF,QAAQ,mCAwDvBG,EAAAA,MAAIC,aAAW,mBAtDnB,SAAyBC,GAAzBN,EAAAO,MAASC,WAATC,KAAyBH,GACvBN,KAAIO,UAAMG,EAAWC,UACrBF,KAAKE,eAAYL,EAAOK,eACxBF,KAAKG,WAAAA,EAAiBN,YAAOM,QAC7BH,KAAKI,UAALP,EAAwBQ,UACxBL,KAAKK,cAAYR,EAAOQ,cACxBL,KAAKM,KAAAA,EAALC,KACAP,KAAKO,qBAALV,EAAAW,qBACAR,KAAKQ,WAAAA,EAALC,WAGA,IAAIC,EAAOV,KACXU,EAAKC,OAASjB,EAAakB,KAAKC,mBAChCnB,EAAakB,KAAKE,OAAOJ,EAAKC,OAAOI,MACrCL,EAAKC,OAAOI,KAAKC,YAAa,EAEhBC,EAAAA,OAAM,CAARA,KAAA,OAAAC,MAAA,OAAAC,KAAA,QAA+BA,EAAAA,GAAM,QAAA,SAAAxB,GAAjDe,EAAAC,OAAAI,KAAAC,YAAAN,EAAAC,OAAAI,KAAAC,WAGMN,EAACC,cAGCD,EAAKC,OAAOI,KAAKC,WADnBN,EAAKJ,OAAAA,CAAAA,KAAe,OAAAY,MAAA,MAAAC,KAAA,eAEpBT,EAAKU,OAAO,CAAAH,KAAA,OAAAC,MAAA,OAAAC,KAAA,mBAA8BA,EAAAA,OAAM,CAAAF,KAAA,OAAAC,MAAA,MAAAC,KAAA,aAEhDT,IAAAA,EAAYhB,EAAA2B,sBAAgBH,OAAAA,EAAOd,YAAQe,IAAAA,YAA/BG,EAAZC,KAAA7B,EAAA8B,sBACD,MALH,IAMO,QACLd,EAAYa,KAAA7B,EAAA+B,kBAAER,MAAcC,IAAAA,MAAcC,EAAMI,KAAA7B,EAAAgC,qBAKlD,IAAAC,EAAavB,EAAbQ,KAAAgB,UAAAC,qBAAAP,GACEQ,EAAK,IAEH,iBAAAnC,EAAAoC,UAeFD,EAAWnC,EAAIoC,SAZbpC,EAAAC,SAAA,SACF,IAAAoC,EAAA,CACEV,UAAAA,EAAaS,QAAMrC,WAAagC,EAAAA,UAChCO,YAAAtC,EAAAoC,QAAAJ,eAAAA,EAiBFO,YAAavC,EAAIoC,QAAQT,eAAiBA,EAhB1CjB,UAAAV,EAAAoC,QAAA1B,WAAAK,EAAAL,UACEyB,SAAAnC,EAAAoC,QAAAD,UAAAA,GAIJnC,EAAImC,QAAQE,EAEZtB,EAAIyB,KAAAxC","file":"../opcua-iiot-event.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n\n  function OPCUAIIoTEvent (config) {\n    RED.nodes.createNode(this, config)\n    this.eventType = config.eventType\n    this.eventTypeLabel = config.eventTypeLabel\n    this.resultType = config.resultType || 'basic'\n    this.queueSize = config.queueSize\n    this.usingListener = config.usingListener\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.bianco = coreListener.core.createBiancoIIoT()\n    coreListener.core.assert(node.bianco.iiot)\n    node.bianco.iiot.subscribed = false\n\n    node.status({ fill: 'blue', shape: 'ring', text: 'new' })\n\n    node.on('input', function (msg) {\n      node.bianco.iiot.subscribed = !node.bianco.iiot.subscribed\n\n      if (node.usingListener) {\n        if (node.bianco.iiot.subscribed) {\n          node.status({ fill: 'blue', shape: 'dot', text: 'subscribed' })\n        } else {\n          node.status({ fill: 'blue', shape: 'ring', text: 'not subscribed' })\n        }\n      } else {\n        node.status({ fill: 'blue', shape: 'dot', text: 'injected' })\n      }\n\n      let uaEventFields = coreListener.getBasicEventFields()\n\n      switch (node.resultType) {\n        case 'condition':\n          uaEventFields.push(coreListener.getConditionFields())\n          break\n        case 'state':\n          uaEventFields.push(coreListener.getStateFields())\n          break\n        case 'all':\n          uaEventFields.push(coreListener.getAllEventFields())\n          break\n        default:\n          break\n      }\n\n      let uaEventFilter = coreListener.core.nodeOPCUA.constructEventFilter(uaEventFields)\n      let interval = 1000\n\n      if (typeof msg.payload === 'number') {\n        interval = msg.payload // msec.\n      }\n\n      msg.nodetype = 'events'\n\n      let eventSubscriptionPayload = {\n        eventType: msg.payload.eventType || node.eventType,\n        eventFilter: msg.payload.uaEventFilter || uaEventFilter,\n        eventFields: msg.payload.uaEventFields || uaEventFields,\n        queueSize: msg.payload.queueSize || node.queueSize,\n        interval: msg.payload.interval || interval\n      }\n\n      // TODO: send works but it has a problem with debug node and ByteString\n      msg.payload = eventSubscriptionPayload\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Event', OPCUAIIoTEvent)\n}\n"]}