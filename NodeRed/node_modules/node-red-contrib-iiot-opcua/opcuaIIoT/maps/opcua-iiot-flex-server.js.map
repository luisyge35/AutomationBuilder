{"version":3,"sources":["opcua-iiot-flex-server.js"],"names":["module","exports","RED","require","install","coreServer","scriptObjects","nodes","registerType","config","createNode","this","internalDebugLog","node","OPCUAIIoTFlexServer","__dirname","readConfigOfServerNode","initServerNode","bianco","vm","loadCertificates","core","builtin","iiot","sandbox","sandboxNodeContext","set","apply","arguments","context","get","keys","global","flow","sandboxFlowContext","sandboxGlobalContext","sandboxEnv","envVar","getSetting","constructAddressSpaceScript","server","eventObjects","run","addressSpaceScript","serverOptions","buildServerOptions","userManager","isValidUser","userName","password","checkUser","createServer","verbose","flex","detailDebugLog","JSON","stringify","setNodeStatusTo","settings","initialize","postInitialize","opcuaServer","setOPCUAServerListener","initNewServer","err","message","handleServerError","payload","emit","start","then","catch","constructAddressSpaceFromScript","on","msg","initialized","injectType","executeOpcuaCommand","Error","commandType","restartServer","send","resetBiancoNode","done","closeServer","simulatorInterval","removeAllListeners","shutdown","delayToClose"],"mappings":"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","file":"../opcua-iiot-flex-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n  const { VM } = require('vm2')\n  let scriptObjects = {}\n\n  function OPCUAIIoTFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    coreServer.flex.internalDebugLog('Open Server Node')\n\n    let node = coreServer.readConfigOfServerNode(this, config)\n    node = coreServer.initServerNode(node)\n    node = coreServer.loadNodeSets(node, __dirname)\n    node = coreServer.loadCertificates(node)\n    coreServer.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.vm = new VM({\n      require: {\n        builtin: ['fs', 'Math', 'Date', 'console']\n      },\n      sandbox: {\n        node,\n        coreServer,\n        scriptObjects,\n        RED,\n        sandboxNodeContext: {\n          set: function () {\n            node.context().set.apply(node, arguments)\n          },\n          get: function () {\n            return node.context().get.apply(node, arguments)\n          },\n          keys: function () {\n            return node.context().keys.apply(node, arguments)\n          },\n          get global () {\n            return node.context().global\n          },\n          get flow () {\n            return node.context().flow\n          }\n        },\n        sandboxFlowContext: {\n          set: function () {\n            node.context().flow.set.apply(node, arguments)\n          },\n          get: function () {\n            return node.context().flow.get.apply(node, arguments)\n          },\n          keys: function () {\n            return node.context().flow.keys.apply(node, arguments)\n          }\n        },\n        sandboxGlobalContext: {\n          set: function () {\n            node.context().global.set.apply(node, arguments)\n          },\n          get: function () {\n            return node.context().global.get.apply(node, arguments)\n          },\n          keys: function () {\n            return node.context().global.keys.apply(node, arguments)\n          }\n        },\n        sandboxEnv: {\n          get: function (envVar) {\n            let flow = node._flow\n            return flow.getSetting(envVar)\n          }\n        }\n      }\n    })\n\n    /* istanbul ignore next */\n    node.bianco.iiot.constructAddressSpaceScript = function (server, constructAddressSpaceScript, eventObjects) {\n      server.internalDebugLog('Init Function Block Flex Server')\n    }\n\n    node.bianco.iiot.vm.run('node.bianco.iiot.constructAddressSpaceScript = ' + config.addressSpaceScript)\n\n    node.bianco.iiot.buildServerOptions = function () {\n      let serverOptions = coreServer.buildServerOptions(node, 'Flex')\n      serverOptions.userManager = {\n        isValidUser: function (userName, password) {\n          return coreServer.checkUser(node, userName, password)\n        }\n      }\n      return coreServer.setDiscoveryOptions(node, serverOptions)\n    }\n\n    node.bianco.iiot.createServer = function (serverOptions) {\n      /* istanbul ignore next */\n      if (RED.settings.verbose) {\n        coreServer.flex.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n      }\n      node.bianco.iiot.opcuaServer = coreServer.createServerObject(node, serverOptions)\n      coreServer.core.setNodeStatusTo(node, 'waiting')\n      node.bianco.iiot.opcuaServer.initialize(node.bianco.iiot.postInitialize)\n      coreServer.setOPCUAServerListener(node)\n    }\n\n    node.bianco.iiot.initNewServer = function () {\n      node = coreServer.initRegisterServerMethod(node)\n      let serverOptions = node.bianco.iiot.buildServerOptions()\n      serverOptions = coreServer.setDiscoveryOptions(node, serverOptions)\n\n      try {\n        node.bianco.iiot.createServer(serverOptions)\n      } catch (err) {\n        /* istanbul ignore next */\n        node.emit('server_create_error')\n        coreServer.flex.internalDebugLog(err.message)\n        coreServer.handleServerError(node, err, { payload: 'Flex Server Failure! Please, check the server settings!' })\n      }\n    }\n\n    node.bianco.iiot.postInitialize = function () {\n      node.bianco.iiot.eventObjects = {} // event objects should stay in memory\n      coreServer.constructAddressSpaceFromScript(node.bianco.iiot.opcuaServer, node.bianco.iiot.constructAddressSpaceScript, node.bianco.iiot.eventObjects)\n        .then(function () {\n          coreServer.start(node.bianco.iiot.opcuaServer, node).then(function () {\n            coreServer.core.setNodeStatusTo(node, 'active')\n            node.emit('server_running')\n          }).catch(function (err) {\n            /* istanbul ignore next */\n            node.emit('server_start_error')\n            coreServer.core.setNodeStatusTo(node, 'errors')\n            coreServer.handleServerError(node, err, { payload: 'Server Start Failure' })\n          })\n        }).catch(function (err) {\n          /* istanbul ignore next */\n          coreServer.handleServerError(node, err, { payload: 'Server Address Space Failure' })\n        })\n    }\n\n    node.bianco.iiot.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.bianco.iiot.opcuaServer || !node.bianco.iiot.initialized) {\n        coreServer.handleServerError(node, new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      if (msg.injectType === 'CMD') {\n        node.bianco.iiot.executeOpcuaCommand(msg)\n      } else {\n        coreServer.handleServerError(node, new Error('Unknown Flex Inject Type ' + msg.injectType), msg)\n      }\n    })\n\n    node.bianco.iiot.executeOpcuaCommand = function (msg) {\n      if (msg.commandType === 'restart') {\n        node.bianco.iiot.restartServer()\n        node.send(msg)\n      } else {\n        coreServer.handleServerError(node, new Error('Unknown Flex OPC UA Command'), msg)\n      }\n    }\n\n    node.bianco.iiot.restartServer = function () {\n      coreServer.flex.internalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(node)\n\n      if (node.bianco.iiot.opcuaServer) {\n        coreServer.flex.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.flex.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', function (done) {\n      if (coreServer.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.closeServer(() => {\n          coreServer.flex.internalDebugLog('Close Server Node')\n          coreServer.core.resetBiancoNode(node)\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n\n    node.on('shutdown', () => {\n      node.bianco.iiot.opcuaServer = null\n      node.bianco.iiot.initNewServer()\n    })\n\n    node.bianco.iiot.closeServer = function (done) {\n      if (coreServer.simulatorInterval) {\n        clearInterval(coreServer.simulatorInterval)\n        coreServer.simulatorInterval = null\n      }\n\n      if (node.bianco.iiot.opcuaServer) {\n        node.bianco.iiot.opcuaServer.removeAllListeners()\n        node.bianco.iiot.opcuaServer.shutdown(node.delayToClose, done)\n      } else {\n        done()\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Server', OPCUAIIoTFlexServer)\n}\n"]}