{"version":3,"sources":["opcua-iiot-write.js"],"names":["module","exports","RED","require","install","coreClient","registerToConnector","config","this","name","justValue","OPCUAIIoTWrite","nodes","showStatusActivities","showErrors","connector","node","assert","getNode","core","iiot","err","msg","writeDebugLog","bianco","isSessionBad","emit","writeToSession","session","originMsg","checkSessionNotValid","Object","assign","nodesToWrite","buildNodesToWrite","write","then","writeResult","message","buildResultMessage","handleWriteError","internalDebugLog","catch","isInitializedBiancoIIoTNode","result","nodetype","setMessageProperties","dataValuesString","extractDataValueString","statusCodes","valuesToWrite","stringValue","util","JSON","parse","warn","_typeof","setMessageProperty","resultsConverted","error","checkConnectorState","injectType","opcuaSession","deregisterToConnector","resetBiancoNode","done"],"mappings":"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","file":"../opcua-iiot-write.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Write Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreClient = require('./core/opcua-iiot-core-client')\n\n  function OPCUAIIoTWrite (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreClient.core.initClientNode(this)\n    coreClient.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.handleWriteError = function (err, msg) {\n      coreClient.writeDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      /* istanbul ignore next */\n      if (coreClient.core.isSessionBad(err)) {\n        node.emit('opcua_client_not_ready')\n      }\n    }\n\n    node.bianco.iiot.writeToSession = function (session, originMsg) {\n      if (coreClient.core.checkSessionNotValid(session, 'Writer')) {\n        /* istanbul ignore next */\n        return\n      }\n\n      let msg = Object.assign({}, originMsg)\n      let nodesToWrite = coreClient.core.buildNodesToWrite(msg)\n      coreClient.write(session, nodesToWrite, msg).then(function (writeResult) {\n        try {\n          let message = node.bianco.iiot.buildResultMessage(writeResult)\n          node.send(message)\n        } catch (err) {\n          /* istanbul ignore next */\n          (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleWriteError(err, msg) : coreClient.internalDebugLog(err.message)\n        }\n      }).catch(function (err) {\n        /* istanbul ignore next */\n        (coreClient.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.handleWriteError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    node.bianco.iiot.buildResultMessage = function (result) {\n      let message = Object.assign({}, result.msg)\n      message.nodetype = 'write'\n      message.justValue = node.justValue\n\n      let dataValuesString = node.bianco.iiot.extractDataValueString(message, result)\n      message = node.bianco.iiot.setMessageProperties(message, result, dataValuesString)\n      return message\n    }\n\n    node.bianco.iiot.extractDataValueString = function (message, result) {\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify({\n          statusCodes: result.statusCodes\n        }, null, 2)\n\n        if (message.valuesToWrite) {\n          delete message['valuesToWrite']\n        }\n      } else {\n        dataValuesString = JSON.stringify(result, null, 2)\n      }\n      return dataValuesString\n    }\n\n    node.bianco.iiot.setMessageProperties = function (message, result, stringValue) {\n      try {\n        RED.util.setMessageProperty(message, 'payload', JSON.parse(stringValue))\n      } /* istanbul ignore next */ catch (err) {\n        coreClient.writeDebugLog(err)\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for write statusCodes type ' + typeof result.statusCodes)\n          node.error(err, result.msg)\n        }\n        message.resultsConverted = stringValue\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.on('input', function (msg) {\n      if (!coreClient.core.checkConnectorState(node, msg, 'Write')) {\n        return\n      }\n\n      if (msg.injectType === 'write') {\n        node.bianco.iiot.writeToSession(node.bianco.iiot.opcuaSession, msg)\n      } else {\n        coreClient.writeDebugLog('Wrong Inject Type ' + msg.injectType + '! The Type has to be write.')\n        /* istanbul ignore next */\n        if (node.showErrors) {\n          node.warn('Wrong Inject Type ' + msg.injectType + '! The msg.injectType has to be write.')\n        }\n      }\n    })\n\n    coreClient.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreClient.core.deregisterToConnector(node, () => {\n        coreClient.core.resetBiancoNode(node)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Write', OPCUAIIoTWrite)\n}\n"]}