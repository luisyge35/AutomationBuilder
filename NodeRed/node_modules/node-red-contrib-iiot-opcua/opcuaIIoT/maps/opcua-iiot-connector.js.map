{"version":3,"sources":["opcua-iiot-connector.js"],"names":["module","exports","RED","require","install","coreConnector","_","path","node","nodes","opcuaNode","config","createNode","this","RECONNECT_DELAY","discoveryUrl","endpoint","UNLIMITED_LISTENERS","endpointMustExist","loginEnabled","name","keepSessionAlive","privateKeyFile","showErrors","defaultSecureTokenLifetime","securityPolicy","messageSecurityMode","publicCertificateFile","strategyInitialDelay","autoSelectRightEndpoint","strategyMaxRetry","strategyMaxDelay","strategyRandomisationFactor","connectionStartDelay","initConnectorNode","reconnectDelay","assert","maxBadSessionRequests","OPCUAIIoTConnectorConfiguration","core","bianco","internalDebugLog","createStatelyMachine","iiot","getMachineState","stateMachine","sessionStartTimeout","clientStartTimeout","disconnectTimeout","nodeOPCUAClientPath","getNodeOPCUAClientPath","detailDebugLog","initCertificatesAndKeys","securedCommunication","toString","join","userName","password","credentials","user","error","Error","payload","updateServerOptions","opcuaClientOptions","securityMode","certificateFile","endpoint_must_exist","requestedSessionTimeout","connectionStrategy","maxRetry","initialDelay","maxDelay","randomisationFactor","connectOPCUAEndpoint","checkEndpoint","nodeOPCUA","OPCUAClient","autoSelectEndpointFromConnection","connectToClient","unlock","opcuaClient","connect","err","isInitializedBiancoIIoTNode","lock","stopopcua","handleError","open","renewConnection","done","opcuaDirectDisconnect","renewFiniteStateMachine","idle","initopcua","endpointMatchForConnecting","endpointUrl","securityPolicyUri","key","includes","split","selectEndpointFromSettings","discoverClient","endpoints","forEach","disconnect","then","message","startSession","callerInfo","sessionrequest","userIdentity","session","requestedMaxReferencesPerNode","opcuaSession","sessionactive","logSessionInformation","on","statusCode","handleSessionClose","sessionNodeRequests","emit","bgWhite","red","resetBadSession","resetOPCUAConnection","state","renew","isInactiveOnOPCUA","removeAllListeners","closeSession","hasOpcUaSubscriptions","sessionclose","disconnectNodeOPCUA","resetAllTimer","closeConnector","resetBiancoNode","length","registeredNodeList","clearTimeout","setTimeout","close","fsmState","opcuaDisconnect","restartWithNewSettings","parameters","console","log","setNewParameters","onIDLE","onINITOPCUA","resetOPCUAObjects","subscribeFSMEvents","fsm","onOPEN","event","oldState","newState","JSON","stringify","onSESSIONCLOSED","onSESSIONRESTART","onSESSIONREQUESTED","onSESSIONACTIVE","onSTOPPED","onEND","onRECONFIGURED","onRENEW","onUNLOCKED","registerForOPCUA","id","Object","keys","type","e","httpAdmin","get","auth","needsPermission","req","res","params","discoverUrlRequest","decodeURIComponent","json","performFindServersRequest","perform_findServersRequest","servers","push","getNode","endpointUrlRequest","discoveryClient","getEndpoints","catch","server","toArray","DataTypeIds","invert","AttributeIds","StatusCodes","ObjectTypeIds","ReferenceTypeIds","xmlset","di_nodeset_filename","typeList","resultTypeList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","invertedTypeList","Symbol","iterator","next","typelistEntry","value","nodeId","label","return","objectTypeIds","eventTypes","filter","invertedObjectTypeIds","objectTypeId","indexOf","eventTypesResults","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","VariableTypeIds","invertedVariableTypeList","variabletypeList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","adi_nodeset_filename","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6"],"mappings":"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","file":"../opcua-iiot-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA connector Node-RED config node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreConnector = require('./core/opcua-iiot-core-connector')\n  let path = require('path')\n  const _ = require('underscore')\n  const assert = require('better-assert')\n\n  function OPCUAIIoTConnectorConfiguration (config) {\n    const CONNECTION_START_DELAY = 2000 // msec.\n    const CONNECTION_STOP_DELAY = 2000 // msec.\n    const RECONNECT_DELAY = 1000 // msec.\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    // HTML settings\n    this.discoveryUrl = config.discoveryUrl || null\n    this.endpoint = config.endpoint\n    this.endpointMustExist = config.endpointMustExist || false\n    this.keepSessionAlive = config.keepSessionAlive\n    this.loginEnabled = config.loginEnabled\n    this.name = config.name\n    this.showErrors = config.showErrors\n    this.securityPolicy = config.securityPolicy\n    this.messageSecurityMode = config.securityMode\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateKeyFile = config.privateKeyFile\n    this.defaultSecureTokenLifetime = config.defaultSecureTokenLifetime || 120000\n    this.autoSelectRightEndpoint = config.autoSelectRightEndpoint\n    this.strategyMaxRetry = config.strategyMaxRetry || 10000\n    this.strategyInitialDelay = config.strategyInitialDelay || 500\n    this.strategyMaxDelay = config.strategyMaxDelay || 30000\n    this.strategyRandomisationFactor = config.strategyRandomisationFactor || 0.2\n    this.requestedSessionTimeout = config.requestedSessionTimeout || 60000\n    this.connectionStartDelay = config.connectionStartDelay || CONNECTION_START_DELAY\n    this.reconnectDelay = config.reconnectDelay || RECONNECT_DELAY\n    this.connectionStopDelay = config.connectionStopDelay || CONNECTION_STOP_DELAY\n    this.maxBadSessionRequests = config.maxBadSessionRequests || 10\n\n    let node = coreConnector.initConnectorNode(this)\n    coreConnector.core.assert(node.bianco.iiot)\n\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n\n    coreConnector.internalDebugLog('Open Connector Node')\n\n    node.bianco.iiot.stateMachine = coreConnector.createStatelyMachine()\n    coreConnector.internalDebugLog('Start FSM: ' + node.bianco.iiot.stateMachine.getMachineState())\n    coreConnector.detailDebugLog('FSM events:' + node.bianco.iiot.stateMachine.getMachineEvents())\n\n    let sessionStartTimeout = null\n    let clientStartTimeout = null\n    let disconnectTimeout = null\n    let nodeOPCUAClientPath = coreConnector.core.getNodeOPCUAClientPath()\n\n    node.securedCommunication = (node.securityPolicy && node.securityPolicy !== 'None' && node.messageSecurityMode && node.messageSecurityMode !== 'NONE')\n\n    coreConnector.detailDebugLog('config: ' + node.publicCertificateFile)\n    coreConnector.detailDebugLog('config: ' + node.privateKeyFile)\n    coreConnector.detailDebugLog('securedCommunication: ' + node.securedCommunication.toString())\n\n    node.bianco.iiot.initCertificatesAndKeys = function () {\n      if (node.securedCommunication) {\n        if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n          node.publicCertificateFile = path.join(nodeOPCUAClientPath, '/certificates/client_selfsigned_cert_2048.pem')\n          coreConnector.detailDebugLog('default key: ' + node.publicCertificateFile)\n        }\n\n        if (node.privateKeyFile === null || node.privateKeyFile === '') {\n          node.privateKeyFile = path.join(nodeOPCUAClientPath, '/certificates/PKI/own/private/private_key.pem')\n          coreConnector.detailDebugLog('default key: ' + node.privateKeyFile)\n        }\n      } else {\n        node.publicCertificateFile = null\n        node.privateKeyFile = null\n      }\n    }\n\n    if (node.loginEnabled) {\n      if (node.credentials) {\n        node.bianco.iiot.userIdentity = {\n          userName: node.credentials.user,\n          password: node.credentials.password\n        }\n        coreConnector.internalDebugLog('Connecting With Login Data On ' + node.endpoint)\n      } else {\n        node.error(new Error('Login Enabled But No Credentials'), { payload: '' })\n      }\n    }\n\n    /*  #########   CONNECTION  #########     */\n\n    node.bianco.iiot.updateServerOptions = function () {\n      node.bianco.iiot.initCertificatesAndKeys()\n      node.bianco.iiot.opcuaClientOptions = {\n        securityPolicy: node.securityPolicy || 'None',\n        securityMode: node.messageSecurityMode || 'NONE',\n        defaultSecureTokenLifetime: node.defaultSecureTokenLifetime || 120000,\n        keepSessionAlive: node.keepSessionAlive,\n        certificateFile: node.publicCertificateFile,\n        privateKeyFile: node.privateKeyFile,\n        endpoint_must_exist: node.endpointMustExist,\n        requestedSessionTimeout: node.requestedSessionTimeout || 60000,\n        connectionStrategy: {\n          maxRetry: node.strategyMaxRetry || 2000,\n          initialDelay: node.strategyInitialDelay || 1000,\n          maxDelay: node.strategyMaxDelay || 30000,\n          randomisationFactor: node.strategyRandomisationFactor || 0.2\n        }\n      }\n    }\n\n    node.bianco.iiot.connectOPCUAEndpoint = function () {\n      if (!coreConnector.checkEndpoint(node)) {\n        return\n      }\n\n      coreConnector.internalDebugLog('Connecting To Endpoint ' + node.endpoint)\n\n      node.bianco.iiot.updateServerOptions()\n      coreConnector.detailDebugLog('Options ' + JSON.stringify(node.bianco.iiot.opcuaClientOptions))\n      node.bianco.iiot.opcuaClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.bianco.iiot.opcuaClientOptions)\n      coreConnector.detailDebugLog('New OPC UA client was created for endpoint ' + node.endpoint)\n      if (node.autoSelectRightEndpoint) {\n        node.bianco.iiot.autoSelectEndpointFromConnection()\n      }\n\n      // coreConnector.setListenerToClient(node) all done by node-opcua since 0.7.x\n      node.bianco.iiot.connectToClient()\n    }\n\n    node.bianco.iiot.connectToClient = function () {\n      if (!coreConnector.checkEndpoint(node)) {\n        return\n      }\n\n      node.bianco.iiot.stateMachine.unlock()\n      node.bianco.iiot.opcuaClient.connect(node.endpoint, function (err) {\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          if (err) {\n            node.bianco.iiot.stateMachine.lock().stopopcua()\n            node.bianco.iiot.handleError(err)\n          } else {\n            coreConnector.internalDebugLog('Client Is Connected To ' + node.endpoint)\n            node.bianco.iiot.stateMachine.open()\n          }\n        } else {\n          coreConnector.internalDebugLog('bianco.iiot not valid on connect resolve')\n        }\n      })\n    }\n\n    node.bianco.iiot.renewConnection = function (done) {\n      if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.opcuaDirectDisconnect(() => {\n          node.bianco.iiot.renewFiniteStateMachine()\n          node.bianco.iiot.stateMachine.idle().initopcua()\n          done()\n        })\n      } else {\n        coreConnector.internalDebugLog('bianco.iiot not valid on renew connection')\n      }\n    }\n\n    node.bianco.iiot.endpointMatchForConnecting = function (endpoint) {\n      coreConnector.internalDebugLog('Auto Endpoint ' + endpoint.endpointUrl.toString() + ' ' + endpoint.securityPolicyUri.toString())\n      let securityMode = endpoint.securityMode.key || endpoint.securityMode\n      let securityPolicy = (endpoint.securityPolicyUri.includes('SecurityPolicy#')) ? endpoint.securityPolicyUri.split('#')[1] : endpoint.securityPolicyUri\n\n      coreConnector.internalDebugLog('node-mode:' + node.messageSecurityMode + ' securityMode: ' + securityMode)\n      coreConnector.internalDebugLog('node-policy:' + node.securityPolicy + ' securityPolicy: ' + securityPolicy)\n\n      return (securityMode === node.messageSecurityMode && securityPolicy === node.securityPolicy)\n    }\n\n    node.bianco.iiot.selectEndpointFromSettings = function (discoverClient) {\n      discoverClient.getEndpoints(function (err, endpoints) {\n        if (err) {\n          coreConnector.internalDebugLog('Auto Switch To Endpoint Error ' + err)\n          if (node.showErrors) {\n            node.error(err, { payload: 'Get Endpoints Request Error' })\n          }\n        } else {\n          endpoints.forEach(function (endpoint) {\n            if (node.bianco.iiot.endpointMatchForConnecting(endpoint)) {\n              node.endpoint = endpoint.endpointUrl\n              coreConnector.internalDebugLog('Auto Switch To Endpoint ' + node.endpoint)\n            }\n          })\n        }\n\n        discoverClient.disconnect(function (err) {\n          if (err) {\n            coreConnector.internalDebugLog('Endpoints Auto Request Error ' + err)\n            if (node.showErrors) {\n              node.error(err, { payload: 'Discover Client Disconnect Error' })\n            }\n          } else {\n            coreConnector.internalDebugLog('Endpoints Auto Request Done With Endpoint ' + node.endpoint)\n          }\n        })\n      })\n    }\n\n    node.bianco.iiot.autoSelectEndpointFromConnection = function () {\n      coreConnector.internalDebugLog('Auto Searching For Endpoint On ' + node.endpoint)\n\n      let endpointMustExist = node.bianco.iiot.opcuaClientOptions.endpoint_must_exist\n      node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = false\n\n      let discoverClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.bianco.iiot.opcuaClientOptions)\n\n      discoverClient.connect(node.endpoint).then(function () {\n        coreConnector.internalDebugLog('Auto Searching Endpoint Connected To ' + node.endpoint)\n        node.bianco.iiot.selectEndpointFromSettings(discoverClient)\n        node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n      }).catch(function (err) {\n        coreConnector.internalDebugLog('Get Auto Endpoint Request Error ' + err.message)\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n        }\n      })\n    }\n\n    /*  #########    SESSION    #########     */\n\n    node.bianco.iiot.startSession = function (callerInfo) {\n      coreConnector.internalDebugLog('Request For New Session From ' + callerInfo)\n\n      if (node.bianco.iiot.isInactiveOnOPCUA()) {\n        coreConnector.internalDebugLog('State Is Not Active While Start Session-> ' + node.bianco.iiot.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Connector Is Not Active'), { payload: 'Create Session Error' })\n        }\n        return\n      }\n\n      if (node.bianco.iiot.stateMachine.getMachineState() !== 'OPEN') {\n        coreConnector.internalDebugLog('Session Request Not Allowed On State ' + node.bianco.iiot.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Connector Is Not Open'), { payload: 'Create Session Error' })\n        }\n        return\n      }\n\n      if (!node.bianco.iiot.opcuaClient) {\n        coreConnector.internalDebugLog('OPC UA Client Connection Is Not Valid On State ' + node.bianco.iiot.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Client Connection Is Not Valid'), { payload: 'Create Session Error' })\n        }\n        return\n      }\n\n      node.bianco.iiot.stateMachine.sessionrequest()\n\n      node.bianco.iiot.opcuaClient.createSession(node.bianco.iiot.userIdentity || {})\n        .then(function (session) {\n          session.requestedMaxReferencesPerNode = 100000\n          node.bianco.iiot.opcuaSession = session\n          node.bianco.iiot.stateMachine.sessionactive()\n\n          coreConnector.detailDebugLog('Session Created On ' + node.endpoint + ' For ' + callerInfo)\n          coreConnector.logSessionInformation(node)\n\n          node.bianco.iiot.opcuaSession.on('session_closed', function (statusCode) {\n            node.bianco.iiot.handleSessionClose(statusCode)\n          })\n        }).catch(function (err) {\n          if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n            node.bianco.iiot.stateMachine.lock().stopopcua()\n            node.bianco.iiot.handleError(err)\n          } else {\n            coreConnector.internalDebugLog(err.message)\n          }\n          node.emit('session_error', err)\n        })\n    }\n\n    node.bianco.iiot.resetBadSession = function () {\n      if (!coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      node.bianco.iiot.sessionNodeRequests += 1\n      coreConnector.detailDebugLog('Session Node Requests At Connector No.: ' + node.bianco.iiot.sessionNodeRequests)\n      if (node.showErrors) {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!   BAD SESSION ON CONNECTOR   !!!!!!!!!!!!!!!!!!'.bgWhite.red)\n      }\n\n      if (node.bianco.iiot.sessionNodeRequests > node.maxBadSessionRequests) {\n        coreConnector.internalDebugLog('Reset Bad Session Request On State ' + node.bianco.iiot.stateMachine.getMachineState())\n        node.bianco.iiot.resetOPCUAConnection('ToManyBadSessionRequests')\n      }\n    }\n\n    node.bianco.iiot.isInactiveOnOPCUA = function () {\n      let state = node.bianco.iiot.stateMachine.getMachineState()\n      return (state === 'STOPPED' || state === 'END' || state === 'RENEW' || state === 'RECONFIGURED')\n    }\n\n    node.bianco.iiot.resetOPCUAConnection = function (callerInfo) {\n      coreConnector.detailDebugLog(callerInfo + ' Request For New OPC UA Connection')\n      if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        if (node.bianco.iiot.isInactiveOnOPCUA()) {\n          return\n        }\n        node.bianco.iiot.stateMachine.lock().renew()\n        node.emit('reset_opcua_connection')\n        node.bianco.iiot.closeSession(() => {\n          node.bianco.iiot.renewConnection(() => {\n            coreConnector.detailDebugLog('OPC UA Connection Reset Done')\n          })\n        })\n      }\n    }\n\n    node.bianco.iiot.closeSession = function (done) {\n      if (node.bianco.iiot.opcuaClient && node.bianco.iiot.opcuaSession) {\n        coreConnector.detailDebugLog('Close Session And Remove Subscriptions From Session On State ' + node.bianco.iiot.stateMachine.getMachineState())\n\n        try {\n          node.bianco.iiot.opcuaSession.removeAllListeners()\n          node.bianco.iiot.opcuaClient.closeSession(node.bianco.iiot.opcuaSession, node.bianco.iiot.hasOpcUaSubscriptions, function (err) {\n            if (err) {\n              node.bianco.iiot.handleError(err)\n            }\n            done()\n          })\n        } catch (err) {\n          node.bianco.iiot.handleError(err)\n          done()\n        } finally {\n          node.bianco.iiot.opcuaSession = null\n        }\n      } else {\n        coreConnector.internalDebugLog('Close Session Without Session On State ' + node.bianco.iiot.stateMachine.getMachineState())\n        done()\n      }\n    }\n\n    node.bianco.iiot.handleError = function (err) {\n      coreConnector.internalDebugLog('Handle Error On ' + node.endpoint + ' err: ' + err)\n      if (node.showErrors) {\n        node.error(err, { payload: 'Handle Connector Error' })\n      }\n    }\n\n    node.bianco.iiot.handleSessionClose = function (statusCode) {\n      coreConnector.internalDebugLog('Session Closed With StatusCode ' + statusCode)\n\n      if (node.bianco.iiot.isInactiveOnOPCUA()) {\n        coreConnector.detailDebugLog('Connector Is Not Active On OPC UA While Session Close Event')\n        return\n      }\n\n      coreConnector.logSessionInformation(node)\n      if (node.bianco.iiot.stateMachine.getMachineState() !== 'SESSIONRESTART') {\n        node.bianco.iiot.stateMachine.lock().sessionclose()\n      }\n    }\n\n    node.bianco.iiot.disconnectNodeOPCUA = function (done) {\n      coreConnector.internalDebugLog('OPC UA Disconnect Connector On State ' + node.bianco.iiot.stateMachine.getMachineState())\n\n      if (node.bianco.iiot.opcuaClient) {\n        coreConnector.internalDebugLog('Close Node Disconnect Connector From ' + node.endpoint)\n        try {\n          node.bianco.iiot.opcuaClient.disconnect(function (err) {\n            if (err) {\n              node.bianco.iiot.handleError(err)\n            }\n            coreConnector.internalDebugLog('Close Node Done For Connector On ' + node.endpoint)\n            done()\n          })\n        } catch (err) {\n          node.bianco.iiot.handleError(err)\n          done()\n        } finally {\n          node.bianco.iiot.opcuaClient = null\n        }\n      } else {\n        coreConnector.internalDebugLog('Close Node Done For Connector Without Client On ' + node.endpoint)\n        done()\n      }\n    }\n\n    node.on('close', function (done) {\n      node.removeAllListeners()\n      if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.resetAllTimer()\n        if (node.bianco.iiot.isInactiveOnOPCUA()) {\n          coreConnector.detailDebugLog('OPC UA Client Is Not Active On Close Node')\n          coreConnector.core.resetBiancoNode(node)\n          done()\n        } else {\n          coreConnector.detailDebugLog('OPC UA Client Is Active On Close Node With State ' + node.bianco.iiot.stateMachine.getMachineState())\n          let state = node.bianco.iiot.stateMachine.getMachineState()\n          if (node.bianco.iiot.opcuaClient && state !== 'CLOSE' && state !== 'SESSIONCLOSED') {\n            node.bianco.iiot.closeConnector(() => {\n              coreConnector.core.resetBiancoNode(node)\n              done()\n            })\n          } else {\n            coreConnector.internalDebugLog(node.bianco.iiot.stateMachine.getMachineState() + ' -> !!!  CHECK CONNECTOR STATE ON CLOSE  !!!'.bgWhite.red)\n            coreConnector.core.resetBiancoNode(node)\n            done()\n          }\n        }\n      } else {\n        done() // if we have a very fast deploy clicking user\n      }\n    })\n\n    node.bianco.iiot.opcuaDisconnect = function (done) {\n      if (node.bianco.iiot.registeredNodeList.length > 0) {\n        coreConnector.internalDebugLog('Connector Has Registered Nodes And Can Not Close The Node -> Count: ' + node.bianco.iiot.registeredNodeList.length)\n        if (disconnectTimeout) {\n          clearTimeout(disconnectTimeout)\n          disconnectTimeout = null\n        }\n        disconnectTimeout = setTimeout(() => {\n          if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n            node.bianco.iiot.closeConnector(done)\n          }\n        }, node.connectionStopDelay)\n      } else {\n        node.bianco.iiot.opcuaDirectDisconnect(done)\n      }\n    }\n\n    node.bianco.iiot.opcuaDirectDisconnect = function (done) {\n      coreConnector.detailDebugLog('OPC UA Disconnect From Connector ' + node.bianco.iiot.stateMachine.getMachineState())\n      node.bianco.iiot.disconnectNodeOPCUA(() => {\n        node.bianco.iiot.stateMachine.lock().close()\n        let fsmState = node.bianco.iiot.stateMachine.getMachineState()\n        coreConnector.detailDebugLog('Disconnected On State ' + fsmState)\n        if (!node.bianco.iiot.isInactiveOnOPCUA() && fsmState !== 'CLOSED') {\n          console.log(fsmState)\n          done()\n          assert(false)\n        }\n        done()\n      })\n    }\n\n    node.bianco.iiot.closeConnector = (done) => {\n      coreConnector.detailDebugLog('Close Connector ' + node.bianco.iiot.stateMachine.getMachineState())\n\n      if (node.bianco.iiot.isInactiveOnOPCUA()) {\n        coreConnector.detailDebugLog('OPC UA Client Is Not Active On Close Connector')\n        done()\n      } else {\n        if (node.bianco.iiot.opcuaClient) {\n          node.bianco.iiot.opcuaDisconnect(done)\n        } else {\n          coreConnector.detailDebugLog('OPC UA Client Is Not Valid On Close Connector')\n          done()\n        }\n      }\n    }\n\n    node.bianco.iiot.restartWithNewSettings = function (parameters, done) {\n      coreConnector.internalDebugLog('Renew With Flex Connector Request On State ' + node.bianco.iiot.stateMachine.getMachineState())\n      node.bianco.iiot.stateMachine.lock().reconfigure()\n      node.bianco.iiot.setNewParameters(parameters)\n      node.bianco.iiot.initCertificatesAndKeys()\n      node.bianco.iiot.renewConnection(done)\n    }\n\n    node.bianco.iiot.setNewParameters = function (parameters) {\n      node.discoveryUrl = parameters.discoveryUrl || node.discoveryUrl\n      node.endpoint = parameters.endpoint || node.endpoint\n      node.keepSessionAlive = parameters.keepSessionAlive || node.keepSessionAlive\n      node.securityPolicy = parameters.securityPolicy || node.securityPolicy\n      node.messageSecurityMode = parameters.securityMode || node.messageSecurityMode\n      node.name = parameters.name || node.name\n      node.showErrors = parameters.showErrors || node.showErrors\n      node.publicCertificateFile = parameters.publicCertificateFile || node.publicCertificateFile\n      node.privateKeyFile = parameters.privateKeyFile || node.privateKeyFile\n      node.defaultSecureTokenLifetime = parameters.defaultSecureTokenLifetime || node.defaultSecureTokenLifetime\n      node.endpointMustExist = parameters.endpointMustExist || node.endpointMustExist\n      node.autoSelectRightEndpoint = parameters.autoSelectRightEndpoint || node.autoSelectRightEndpoint\n      node.strategyMaxRetry = parameters.strategyMaxRetry || node.strategyMaxRetry\n      node.strategyInitialDelay = parameters.strategyInitialDelay || node.strategyInitialDelay\n      node.strategyMaxDelay = parameters.strategyMaxDelay || node.strategyMaxDelay\n      node.strategyRandomisationFactor = parameters.strategyRandomisationFactor || node.strategyRandomisationFactor\n      node.requestedSessionTimeout = parameters.requestedSessionTimeout || node.requestedSessionTimeout\n      node.connectionStartDelay = parameters.connectionStartDelay || node.connectionStartDelay\n      node.reconnectDelay = parameters.reconnectDelay || node.reconnectDelay\n    }\n\n    node.bianco.iiot.resetOPCUAObjects = function () {\n      coreConnector.detailDebugLog('Reset All OPC UA Objects')\n      node.bianco.iiot.sessionNodeRequests = 0\n      if (node.bianco.iiot.opcuaClient) {\n        node.bianco.iiot.opcuaClient.removeAllListeners()\n      }\n      node.bianco.iiot.opcuaClient = null\n\n      if (node.bianco.iiot.opcuaSession) {\n        node.bianco.iiot.opcuaSession.removeAllListeners()\n      }\n      node.bianco.iiot.opcuaSession = null\n    }\n\n    node.bianco.iiot.subscribeFSMEvents = function (fsm) {\n      if (!coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        throw Error('undefined state of node ' + node.id)\n      }\n      /* #########   FSM EVENTS  #########     */\n\n      fsm.onIDLE = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector IDLE Event FSM')\n        node.bianco.iiot.resetOPCUAObjects()\n      }\n\n      fsm.onINITOPCUA = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Init OPC UA Event FSM')\n        if (!coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          return\n        }\n\n        node.bianco.iiot.resetOPCUAObjects()\n        node.bianco.iiot.resetAllTimer()\n        node.bianco.iiot.initCertificatesAndKeys()\n\n        if (clientStartTimeout) {\n          clearTimeout(clientStartTimeout)\n          clientStartTimeout = null\n        }\n\n        coreConnector.detailDebugLog('connecting OPC UA with delay of msec: ' + node.connectionStartDelay)\n        clientStartTimeout = setTimeout(() => {\n          if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n            try {\n              node.bianco.iiot.connectOPCUAEndpoint()\n            } catch (err) {\n              node.bianco.iiot.handleError(err)\n              node.bianco.iiot.resetOPCUAObjects()\n              node.bianco.iiot.stateMachine.lock().stopopcua()\n            }\n          }\n        }, node.connectionStartDelay)\n        node.emit('connector_init')\n      }\n\n      fsm.onOPEN = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Open Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          coreConnector.internalDebugLog('Client Connected To ' + node.endpoint)\n          coreConnector.detailDebugLog('Client Options ' + JSON.stringify(node.bianco.iiot.opcuaClientOptions))\n          node.bianco.iiot.startSession('Open Event')\n          node.emit('connection_started', node.bianco.iiot.opcuaClient)\n        }\n      }\n\n      fsm.onSESSIONREQUESTED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Request Event FSM')\n      }\n\n      fsm.onSESSIONACTIVE = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Active Event FSM')\n        node.bianco.iiot.sessionNodeRequests = 0\n        node.emit('session_started', node.bianco.iiot.opcuaSession)\n      }\n\n      fsm.onSESSIONCLOSED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Close Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.opcuaSession = null\n        }\n        node.emit('session_closed')\n      }\n\n      fsm.onSESSIONRESTART = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Restart Event FSM')\n        node.emit('session_restart')\n      }\n\n      fsm.onCLOSED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Client Close Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          if (node.bianco.iiot.opcuaClient) {\n            node.bianco.iiot.opcuaClient.removeAllListeners()\n          }\n          node.bianco.iiot.opcuaClient = null\n        }\n        node.emit('connection_closed')\n      }\n\n      fsm.onLOCKED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Lock Event FSM')\n      }\n\n      fsm.onUNLOCKED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Unlock Event FSM')\n      }\n\n      fsm.onSTOPPED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Stopped Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.resetAllTimer()\n        }\n        node.emit('connection_stopped')\n      }\n\n      fsm.onEND = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector End Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.resetAllTimer()\n        }\n        node.emit('connection_end')\n      }\n\n      fsm.onRECONFIGURED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Reconfigure Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.resetAllTimer()\n        }\n        node.emit('connection_reconfigure')\n      }\n\n      fsm.onRENEW = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Renew Event FSM')\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n          node.bianco.iiot.resetAllTimer()\n        }\n        node.emit('connection_renew')\n      }\n    }\n\n    node.bianco.iiot.resetAllTimer = function () {\n      coreConnector.detailDebugLog('Reset All Timer')\n      if (clientStartTimeout) {\n        clearTimeout(clientStartTimeout)\n        clientStartTimeout = null\n      }\n\n      if (sessionStartTimeout) {\n        clearTimeout(sessionStartTimeout)\n        sessionStartTimeout = null\n      }\n\n      if (disconnectTimeout) {\n        clearTimeout(disconnectTimeout)\n        disconnectTimeout = null\n      }\n    }\n\n    /*  ---------------------  handle config node behaviour --------------------- */\n    node.bianco.iiot.registeredNodeList = {}\n\n    node.bianco.iiot.renewFiniteStateMachine = function () {\n      node.bianco.iiot.stateMachine = null\n      node.bianco.iiot.stateMachine = coreConnector.createStatelyMachine()\n      assert(node.bianco.iiot.stateMachine.getMachineState() === 'IDLE')\n      node.bianco.iiot.subscribeFSMEvents(node.bianco.iiot.stateMachine)\n    }\n\n    node.bianco.iiot.registerForOPCUA = function (opcuaNode) {\n      if (!opcuaNode) {\n        coreConnector.internalDebugLog('Node Not Valid To Register In Connector')\n        return\n      }\n\n      coreConnector.internalDebugLog('Register In Connector NodeId: ' + opcuaNode.id)\n\n      if (!coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        coreConnector.internalDebugLog('Node Not Initialized With Bianco To Register In Connector')\n        return\n      }\n\n      node.bianco.iiot.registeredNodeList[opcuaNode.id] = opcuaNode\n\n      opcuaNode.on('opcua_client_not_ready', () => {\n        if (coreConnector.core.isInitializedBiancoIIoTNode(node) && node.bianco.iiot.stateMachine.getMachineState() !== 'END') {\n          node.bianco.iiot.resetBadSession()\n        }\n      })\n\n      if (Object.keys(node.bianco.iiot.registeredNodeList).length === 1) {\n        coreConnector.internalDebugLog('Start Connector OPC UA Connection')\n        node.bianco.iiot.renewFiniteStateMachine()\n        node.bianco.iiot.stateMachine.idle().initopcua()\n      }\n    }\n\n    node.bianco.iiot.deregisterForOPCUA = function (opcuaNode, done) {\n      if (!opcuaNode) {\n        coreConnector.internalDebugLog('Node Not Valid To Deregister In Connector')\n        done()\n        return\n      }\n\n      opcuaNode.removeAllListeners('opcua_client_not_ready')\n\n      if (!coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n        coreConnector.internalDebugLog('Node Not Initialized With Bianco To Deregister In Connector')\n        return\n      }\n\n      coreConnector.internalDebugLog('Deregister In Connector NodeId: ' + opcuaNode.id)\n      delete node.bianco.iiot.registeredNodeList[opcuaNode.id]\n\n      if (node.bianco.iiot.stateMachine.getMachineState() === 'STOPPED' || node.bianco.iiot.stateMachine.getMachineState() === 'END') {\n        done()\n        return\n      }\n\n      if (Object.keys(node.bianco.iiot.registeredNodeList).length === 0) {\n        node.bianco.iiot.stateMachine.lock().stopopcua()\n        if (node.bianco.iiot.opcuaClient) {\n          coreConnector.detailDebugLog('OPC UA Direct Disconnect On Unregister Of All Nodes')\n          try {\n            node.bianco.iiot.opcuaClient.disconnect(function (err) {\n              if (err) {\n                node.bianco.iiot.handleError(err)\n              }\n              done()\n            })\n          } catch (err) {\n            node.bianco.iiot.handleError(err)\n            done()\n          } finally {\n            node.bianco.iiot.opcuaClient.removeAllListeners()\n          }\n        } else {\n          done()\n        }\n      } else {\n        done()\n      }\n    }\n  }\n\n  try {\n    RED.nodes.registerType('OPCUA-IIoT-Connector', OPCUAIIoTConnectorConfiguration, {\n      credentials: {\n        user: { type: 'text' },\n        password: { type: 'password' }\n      }\n    })\n  } catch (e) {\n    coreConnector.internalDebugLog(e.message)\n  }\n\n  /*  ---------------------  HTTP Requests --------------------- */\n\n  RED.httpAdmin.get('/opcuaIIoT/client/discover/:id/:discoveryUrl', RED.auth.needsPermission('opcua.discovery'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let discoverUrlRequest = decodeURIComponent(req.params.discoveryUrl)\n    coreConnector.internalDebugLog('Get Discovery Request ' + JSON.stringify(req.params) + ' for ' + discoverUrlRequest)\n    if (node) {\n      if (discoverUrlRequest && !discoverUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        let performFindServersRequest = coreConnector.core.nodeOPCUA.perform_findServersRequest\n        performFindServersRequest(discoverUrlRequest, function (err, servers) {\n          if (!err) {\n            let endpoints = []\n            servers.forEach(function (server) {\n              server.discoveryUrls.forEach(function (discoveryUrl) {\n                if (discoveryUrl.toString() !== discoverUrlRequest) {\n                  endpoints.push(discoveryUrl.toString())\n                }\n              })\n            })\n            res.json(endpoints)\n          } else {\n            coreConnector.internalDebugLog('Perform Find Servers Request ' + err)\n            if (node.showErrors) {\n              node.error(err, { payload: '' })\n            }\n            res.json([])\n          }\n        })\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Discovery Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/client/endpoints/:id/:endpointUrl', RED.auth.needsPermission('opcua.endpoints'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let endpointUrlRequest = decodeURIComponent(req.params.endpointUrl)\n    coreConnector.internalDebugLog('Get Endpoints Request ' + JSON.stringify(req.params) + ' for ' + endpointUrlRequest)\n    if (node) {\n      if (endpointUrlRequest && !endpointUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        const endpointMustExist = node.bianco.iiot.opcuaClientOptions.endpoint_must_exist // to reset later\n        node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = false\n        let discoveryClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.bianco.iiot.opcuaClientOptions)\n        discoveryClient.connect(endpointUrlRequest).then(function () {\n          coreConnector.internalDebugLog('Get Endpoints Connected For Request')\n          discoveryClient.getEndpoints(function (err, endpoints) {\n            if (err) {\n              if (node.showErrors) {\n                node.error(err, { payload: '' })\n              }\n              coreConnector.internalDebugLog('Get Endpoints Request Error ' + err)\n              res.json([])\n            } else {\n              coreConnector.internalDebugLog('Sending Endpoints For Request')\n              res.json(endpoints)\n            }\n            discoveryClient.disconnect(function () {\n              coreConnector.internalDebugLog('Get Endpoints Request Disconnect')\n            })\n            node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          })\n        }).catch(function (err) {\n          if (coreConnector.core.isInitializedBiancoIIoTNode(node)) {\n            node.bianco.iiot.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          }\n          coreConnector.internalDebugLog('Get Endpoints Request Error ' + err.message)\n          res.json([])\n        })\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Endpoints Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.datatypes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.DataTypeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/AttributeIds', RED.auth.needsPermission('opcuaIIoT.plain.attributeids'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.AttributeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/StatusCodes', RED.auth.needsPermission('opcuaIIoT.plain.statuscodes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.StatusCodes)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ObjectTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.objecttypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ObjectTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.variabletypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.VariableTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.referencetypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ReferenceTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/xmlsets/public', RED.auth.needsPermission('opcuaIIoT.xmlsets'), function (req, res) {\n    let xmlset = []\n    xmlset.push(coreConnector.core.nodeOPCUA.di_nodeset_filename)\n    xmlset.push(coreConnector.core.nodeOPCUA.adi_nodeset_filename)\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Adi.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Di.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Gds.NodeSet2.xml')\n    xmlset.push('public/vendor/harting/10_di.xml')\n    xmlset.push('public/vendor/harting/20_autoid.xml')\n    xmlset.push('public/vendor/harting/30_aim.xml')\n    res.json(xmlset)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.list.datatypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.DataTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/EventTypeIds', RED.auth.needsPermission('opcuaIIoT.list.eventtypeids'), function (req, res) {\n    let objectTypeIds = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let invertedObjectTypeIds = _.invert(objectTypeIds)\n    let eventTypes = _.filter(invertedObjectTypeIds, function (objectTypeId) {\n      return objectTypeId.indexOf('Event') > -1\n    })\n\n    let typelistEntry\n    let eventTypesResults = []\n    for (typelistEntry of eventTypes) {\n      eventTypesResults.push({ nodeId: 'i=' + objectTypeIds[typelistEntry], label: typelistEntry })\n    }\n    res.json(eventTypesResults)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/InstanceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.instancetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let variabletypeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let invertedVariableTypeList = _.toArray(_.invert(variabletypeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    for (typelistEntry of invertedVariableTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.list.variabletypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.referencetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ReferenceTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/FilterTypes', RED.auth.needsPermission('opcuaIIoT.list.filterids'), function (req, res) {\n    let resultTypeList = []\n    resultTypeList.push({ name: 'dataType', label: 'Data Type' })\n    resultTypeList.push({ name: 'dataValue', label: 'Data Value' })\n    resultTypeList.push({ name: 'nodeClass', label: 'Node Class' })\n    resultTypeList.push({ name: 'typeDefinition', label: 'Type Definition' })\n    resultTypeList.push({ name: 'browseName', label: 'Browse Name' })\n    resultTypeList.push({ name: 'nodeId', label: 'Node Id' })\n    res.json(resultTypeList)\n  })\n}\n"]}