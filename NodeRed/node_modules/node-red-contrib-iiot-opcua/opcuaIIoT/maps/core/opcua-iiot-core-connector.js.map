{"version":3,"sources":["core/opcua-iiot-core-connector.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","connector","internalDebugLog","detailDebugLog","libDebugLog","Stately","initConnectorNode","node","this","initClientNode","bianco","sessionNodeRequests","endpoints","userIdentity","opcuaClient","opcuaSession","serverCertificate","createConnectionTimeout","machine","initopcua","lock","end","open","close","sessionrequest","SESSIONREQUESTED","sessionactive","SESSIONACTIVE","sessionclose","SESSIONRESTART","idle","SESSIONCLOSED","sessionrestart","unlock","CLOSED","LOCKED","reconfigure","stopopcua","renew","UNLOCKED","RECONFIGURED","RENEW","STOPPED","END","setListenerToClient","connectorLib","assert","showErrors","error","Error","payload","on","err","isInactiveOnOPCUA","resetOPCUAConnection","bgWhite","red","endpoint","number","delay","yellow","stateMachine","orange","emit","blue","logSessionInformation","name","sessionId","authenticationToken","timeout","serverNonce","toString","serverSignature","lastRequestSentTime","toISOString","lastResponseReceivedTime","Date","checkEndpoint","includes","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core-connector.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {connector: {}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.connector\n */\nvar de = de || { biancoroyal: { opcua: { iiot: { core: { connector: {} } } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.connector.core = de.biancoroyal.opcua.iiot.core.connector.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.connector.internalDebugLog = de.biancoroyal.opcua.iiot.core.connector.internalDebugLog || require('debug')('opcuaIIoT:connector') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.connector.detailDebugLog = de.biancoroyal.opcua.iiot.core.connector.detailDebugLog || require('debug')('opcuaIIoT:connector:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.connector.libDebugLog = de.biancoroyal.opcua.iiot.core.connector.libDebugLog || require('debug')('opcuaIIoT:connector:nodeopcua') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.connector.Stately = de.biancoroyal.opcua.iiot.core.connector.Stately || require('stately.js') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.connector.initConnectorNode = function (node) {\n  this.core.initClientNode(node)\n  node.bianco.iiot.sessionNodeRequests = 0\n  node.bianco.iiot.endpoints = []\n  node.bianco.iiot.userIdentity = null\n  node.bianco.iiot.opcuaClient = null\n  node.bianco.iiot.opcuaSession = null\n  node.bianco.iiot.discoveryServer = null\n  node.bianco.iiot.serverCertificate = null\n  node.bianco.iiot.discoveryServerEndpointUrl = null\n  node.bianco.iiot.createConnectionTimeout = null\n  node.bianco.iiot.hasOpcUaSubscriptions = false\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.connector.createStatelyMachine = function () {\n  return de.biancoroyal.opcua.iiot.core.connector.Stately.machine({\n    'IDLE': {\n      'initopcua': 'INITOPCUA',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'INITOPCUA': {\n      'open': 'OPEN',\n      'close': 'CLOSED',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'OPEN': {\n      'sessionrequest': 'SESSIONREQUESTED',\n      'close': 'CLOSED',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'SESSIONREQUESTED': {\n      'open': 'OPEN',\n      'sessionactive': 'SESSIONACTIVE',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'SESSIONACTIVE': {\n      'open': 'OPEN',\n      'sessionclose': 'SESSIONCLOSED',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'SESSIONRESTART': {\n      'idle': 'IDLE',\n      'open': 'OPEN',\n      'sessionclose': 'SESSIONCLOSED',\n      'close': 'CLOSED',\n      'lock': 'LOCKED',\n      'end': 'END'\n    },\n    'SESSIONCLOSED': {\n      'idle': 'IDLE',\n      'open': 'OPEN',\n      'close': 'CLOSED',\n      'sessionrestart': 'SESSIONRESTART',\n      'lock': 'LOCKED',\n      'unlock': 'UNLOCKED',\n      'end': 'END'\n    },\n    'CLOSED': {\n      'open': 'OPEN',\n      'lock': 'LOCKED',\n      'unlock': 'UNLOCKED',\n      'end': 'END',\n      'idle': 'IDLE'\n    },\n    'LOCKED': {\n      'sessionclose': 'SESSIONCLOSED',\n      'open': 'OPEN',\n      'close': 'CLOSED',\n      'unlock': 'UNLOCKED',\n      'lock': 'LOCKED',\n      'sessionrestart': 'SESSIONRESTART',\n      'reconfigure': 'RECONFIGURED',\n      'stopopcua': 'STOPPED',\n      'renew': 'RENEW',\n      'end': 'END'\n    },\n    'UNLOCKED': {\n      'idle': 'IDLE',\n      'lock': 'LOCKED',\n      'open': 'OPEN',\n      'end': 'END'\n    },\n    'RECONFIGURED': {},\n    'RENEW': {},\n    'STOPPED': {},\n    'END': {}\n  }, 'IDLE')\n}\n\nde.biancoroyal.opcua.iiot.core.connector.setListenerToClient = function (node) {\n  const connectorLib = this\n  this.core.assert(node.bianco.iiot)\n\n  if (!node.bianco.iiot.opcuaClient) {\n    connectorLib.internalDebugLog('Client Not Valid On Setting Events To Client')\n    if (node.showErrors) {\n      node.error(new Error('Client Not Valid To Set Event Listeners'), { payload: 'No Client To Set Event Listeners' })\n    }\n    return\n  }\n\n  node.bianco.iiot.opcuaClient.on('close', function (err) {\n    if (err) {\n      connectorLib.internalDebugLog('Connection Error On Close ' + err)\n    }\n\n    if (node.bianco.iiot.isInactiveOnOPCUA()) {\n      connectorLib.detailDebugLog('Connector Not Active On OPC UA Close Event')\n    } else {\n      node.bianco.iiot.resetOPCUAConnection('Connector To Server Close')\n    }\n\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT CONNECTION CLOSED !!!!!!!!!!!!!!!!!!!'.bgWhite.red)\n    connectorLib.internalDebugLog('CONNECTION CLOSED: ' + node.endpoint)\n    node.emit('server_connection_close')\n  })\n\n  node.bianco.iiot.opcuaClient.on('backoff', function (number, delay) {\n    connectorLib.internalDebugLog('!!! CONNECTION FAILED (backoff) FOR #'.bgWhite.yellow, number, ' retrying ', delay / 1000.0, ' sec. !!!')\n    connectorLib.internalDebugLog('CONNECTION FAILED: ' + node.endpoint)\n    node.bianco.iiot.stateMachine.lock()\n  })\n\n  node.bianco.iiot.opcuaClient.on('abort', function () {\n    connectorLib.internalDebugLog('!!! Abort backoff !!!')\n    connectorLib.internalDebugLog('CONNECTION BROKEN: ' + node.endpoint)\n\n    if (node.bianco.iiot.isInactiveOnOPCUA()) {\n      connectorLib.detailDebugLog('Connector Not Active On OPC UA Backoff Abort Event')\n    } else {\n      node.bianco.iiot.resetOPCUAConnection('Connector To Server Backoff Abort')\n    }\n\n    node.emit('server_connection_abort')\n  })\n\n  node.bianco.iiot.opcuaClient.on('connection_lost', function () {\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT CONNECTION LOST !!!!!!!!!!!!!!!!!!!'.bgWhite.orange)\n    connectorLib.internalDebugLog('CONNECTION LOST: ' + node.endpoint)\n    node.bianco.iiot.stateMachine.lock()\n    node.emit('server_connection_lost')\n  })\n\n  node.bianco.iiot.opcuaClient.on('connection_reestablished', function () {\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT CONNECTION RE-ESTABLISHED !!!!!!!!!!!!!!!!!!!'.bgWhite.orange)\n    connectorLib.internalDebugLog('CONNECTION RE-ESTABLISHED: ' + node.endpoint)\n    node.bianco.iiot.stateMachine.unlock()\n  })\n\n  node.bianco.iiot.opcuaClient.on('start_reconnection', function () {\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT STARTING RECONNECTION !!!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n    connectorLib.internalDebugLog('CONNECTION STARTING RECONNECTION: ' + node.endpoint)\n    node.bianco.iiot.stateMachine.lock()\n  })\n\n  node.bianco.iiot.opcuaClient.on('timed_out_request', function () {\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!! CLIENT TIMED OUT REQUEST !!!!!!!!!!!!!!!!!!!'.bgWhite.blue)\n    connectorLib.internalDebugLog('CONNECTION TIMED OUT REQUEST: ' + node.endpoint)\n  })\n\n  node.bianco.iiot.opcuaClient.on('security_token_renewed', function () {\n    connectorLib.detailDebugLog('!!!!!!!!!!!!!!!!!!!!!!!! CLIENT SECURITY TOKEN RENEWED !!!!!!!!!!!!!!!!!!!'.bgWhite.violet)\n    connectorLib.detailDebugLog('CONNECTION SECURITY TOKEN RENEWE: ' + node.endpoint)\n  })\n\n  node.bianco.iiot.opcuaClient.on('after_reconnection', function () {\n    connectorLib.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!      CLIENT RECONNECTED     !!!!!!!!!!!!!!!!!!!'.bgWhite.green)\n    connectorLib.internalDebugLog('CONNECTION RECONNECTED: ' + node.endpoint)\n    node.emit('after_reconnection', node.bianco.iiot.opcuaClient)\n    node.bianco.iiot.stateMachine.unlock()\n  })\n}\n\nde.biancoroyal.opcua.iiot.core.connector.logSessionInformation = function (node) {\n  if (!node.bianco.iiot.opcuaSession) {\n    this.detailDebugLog('Session Not Valid To Log Information')\n    return\n  }\n\n  this.internalDebugLog('Session ' + node.bianco.iiot.opcuaSession.name + ' Id: ' + node.bianco.iiot.opcuaSession.sessionId + ' Started On ' + node.endpoint)\n  this.detailDebugLog('name :' + node.bianco.iiot.opcuaSession.name)\n  this.detailDebugLog('sessionId :' + node.bianco.iiot.opcuaSession.sessionId)\n  this.detailDebugLog('authenticationToken :' + node.bianco.iiot.opcuaSession.authenticationToken)\n  this.internalDebugLog('timeout :' + node.bianco.iiot.opcuaSession.timeout)\n\n  if (node.bianco.iiot.opcuaSession.serverNonce) {\n    this.detailDebugLog('serverNonce :' + node.bianco.iiot.opcuaSession.serverNonce ? node.bianco.iiot.opcuaSession.serverNonce.toString('hex') : 'none')\n  }\n\n  if (node.bianco.iiot.opcuaSession.serverCertificate) {\n    this.detailDebugLog('serverCertificate :' + node.bianco.iiot.opcuaSession.serverCertificate ? node.bianco.iiot.opcuaSession.serverCertificate.toString('base64') : 'none')\n  } else {\n    this.detailDebugLog('serverCertificate : None'.red)\n  }\n\n  this.detailDebugLog('serverSignature :' + node.bianco.iiot.opcuaSession.serverSignature ? node.bianco.iiot.opcuaSession.serverSignature : 'none')\n\n  if (node.bianco.iiot.opcuaSession.lastRequestSentTime) {\n    this.detailDebugLog('lastRequestSentTime : ' + node.bianco.iiot.opcuaSession.lastRequestSentTime)\n    this.internalDebugLog('lastRequestSentTime converted :' + node.bianco.iiot.opcuaSession.lastRequestSentTime ? new Date(node.bianco.iiot.opcuaSession.lastRequestSentTime).toISOString() : 'none')\n  }\n\n  if (node.bianco.iiot.opcuaSession.lastResponseReceivedTime) {\n    this.detailDebugLog('lastResponseReceivedTime : ' + node.bianco.iiot.opcuaSession.lastResponseReceivedTime)\n    this.internalDebugLog('lastResponseReceivedTime converted :' + node.bianco.iiot.opcuaSession.lastResponseReceivedTime ? new Date(node.bianco.iiot.opcuaSession.lastResponseReceivedTime).toISOString() : 'none')\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.connector.checkEndpoint = function (node) {\n  if (node.endpoint && node.endpoint.includes('opc.tcp://')) {\n    return true\n  } else {\n    this.internalDebugLog('Endpoint Not Valid -> ' + node.endpoint)\n    node.error(new Error('endpoint does not include opc.tcp://'), { payload: 'Client Endpoint Error' })\n    return false\n  }\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.connector\n"]}