{"version":3,"sources":["core/opcua-iiot-core-server.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","server","internalDebugLog","detailDebugLog","isa95DebugLog","isa95DetailDebugLog","flex","simulatorInterval","maxTimeInterval","timeInterval","UNLIMITED_LISTENERS","intervalList","value","Math","sin","data","tankLevel","setValueFromSource","dataType","tankLevel2","constructAddressSpaceFromScript","constructAddressSpaceScript","eventObjects","Promise","resolve","engine","addressSpace","err","reject","Error","constructAddressSpace","asoDemo","LocalizedText","namespace","getOwnNamespace","view","addView","browseName","text","locale","constructAlarmAddressSpaceDemo","setInterval","simulateVariation","coreServer","push","vendorName","addObject","rootFolder","objects","nodeId","displayName","organizedBy","variable1","componentOf","nodeOPCUA","Variant","description","variable2","set","variant","parseFloat","addVariable","StatusCodes","Good","variable3","availableMemory","installHistoricalDataNode","memoryVariable","counterValue","counterVariable","fullcounterValue","get","fullcounterVariable","DataValue","sourceTimestamp","random","Date","timestamped_get","externalValueWithSourceTimestamp","sourcePicoseconds","valueRank","VariantArrayType","Matrix","dimensions","arrayDimensions","arrayType","Array","DataType","DateTime","UTC","fanSpeed","addMethod","Scalar","name","inputArguments","soundVolume","volume","join","barks","i","nbBarks","String","analogItemNode","addAnalogDataItem","outputArguments","low","high","engineeringUnits","standardUnits","degree_celsius","bindMethod","context","callback","addReference","referenceType","callMethodResult","done","forEach","index","list","clearInterval","definition","start","node","this","instrumentRange","initialized","endpoints","endpoint","endpointDescriptions","endpointDescription","endpointUrl","securityMode","toString","securityPolicyUri","on","channel","remoteAddress","remotePort","session","clientDescription","applicationUri","productUri","applicationName","applicationType","sessionName","sessionTimeout","reason","serverInfo","JSON","stringify","readConfigOfServerNode","config","alternateHostname","maxAllowedSessionNumber","maxConnectionsPerEndpoint","maxAllowedSubscriptionNumber","parseInt","maxNodesPerBrowse","showStatusActivities","showErrors","individualCerts","publicCertificateFile","privateCertificateFile","allowAnonymous","port","users","xmlsets","maxNodesPerRead","delayToClose","discoveryServerEndpointUrl","capabilitiesForMDNS","split","initServerNode","serverNode","initCoreServerNode","setMaxListeners","opcuaUsers","loadNodeSets","dirname","_this","xmlFiles","disableDiscovery","standard_nodeset_file","xmlsetFileName","path","startsWith","standardNodeSetFile","loadCertificates","nodeOPCUAServerPath","checkUser","userName","password","isValidUser","user","initRegisterServerMethod","bianco","registerServerMethod","RegisterServerMethod","MDNS","LDS","HIDDEN","setDiscoveryOptions","serverOptions","getAddressSpace","msg","opcuaServer","error","addVariableToAddressSpace","humanReadableType","isProperty","findNode","payload","referenceNodeId","getVariantValue","newNodeOPCUAVariable","propertyOf","browsename","displayname","datatype","variableData","addObjectToAddressSpace","typeDefinition","objecttype","newNodeOPCUObject","searchedNode","shutdown","setNodeStatusTo","handleServerError","createServerNameWithPrefix","serverPort","prefix","buildServerOptions","restartServer","get_fully_qualified_domain_name","makeApplicationUrn","emit","nodeset_filename","resourcePath","buildNumber","today","timestamp","buildDate","serverCapabilities","geFullyQualifiedDomainName","serverPrefix","gatewayServerUri","discoveryProfileUri","discoveryUrls","buildInfo","productName","createServerObject","OPCUAServer","MAX_SUBSCRIPTION","bgYellow","bgCyan","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core-server.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {server: {}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.server\n */\nvar de = de || { biancoroyal: { opcua: { iiot: { core: { server: {} } } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.core = de.biancoroyal.opcua.iiot.core.server.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.internalDebugLog = de.biancoroyal.opcua.iiot.core.server.internalDebugLog || require('debug')('opcuaIIoT:server') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.detailDebugLog = de.biancoroyal.opcua.iiot.core.server.detailDebugLog || require('debug')('opcuaIIoT:server:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.isa95DebugLog = de.biancoroyal.opcua.iiot.core.server.isa95DebugLog || require('debug')('opcuaIIoT:server:ISA95') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.isa95DetailDebugLog = de.biancoroyal.opcua.iiot.core.server.isa95DetailDebugLog || require('debug')('opcuaIIoT:server:ISA95:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex = de.biancoroyal.opcua.iiot.core.server.flex || {} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog = de.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog || require('debug')('opcuaIIoT:server:flex') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex.detailDebugLog = de.biancoroyal.opcua.iiot.core.server.flex.detailDebugLog || require('debug')('opcuaIIoT:server:flex:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.simulatorInterval = de.biancoroyal.opcua.iiot.core.server.simulatorInterval || null // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.maxTimeInterval = de.biancoroyal.opcua.iiot.core.server.maxTimeInterval || 500000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.timeInterval = de.biancoroyal.opcua.iiot.core.server.timeInterval || 1 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.UNLIMITED_LISTENERS = de.biancoroyal.opcua.iiot.core.server.UNLIMITED_LISTENERS || 0 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.intervalList = de.biancoroyal.opcua.iiot.core.server.intervalList || [] // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.path = de.biancoroyal.opcua.iiot.core.server.path || require('path') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.server.simulateVariation = function (data) {\n  let server = de.biancoroyal.opcua.iiot.core.server\n\n  let value = (1.0 + Math.sin(server.timeInterval / 360 * 3)) / 2.0\n\n  server.timeInterval++\n  if (server.timeInterval > server.maxTimeInterval) {\n    server.timeInterval = 1\n  }\n\n  if (data.tankLevel) {\n    data.tankLevel.setValueFromSource({ dataType: 'Double', value })\n  }\n\n  if (data.tankLevel2) {\n    data.tankLevel2.setValueFromSource({ dataType: 'Double', value })\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.constructAddressSpaceFromScript = function (server, constructAddressSpaceScript, eventObjects) {\n  de.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog('Construct Address Space From Script')\n  return new Promise(\n    function (resolve, reject) {\n      if (server.engine && constructAddressSpaceScript && constructAddressSpaceScript !== '') {\n        try {\n          constructAddressSpaceScript(server, server.engine.addressSpace, eventObjects, resolve)\n        } catch (err) {\n          reject(err)\n        }\n      } else {\n        reject(new Error('Wrong Parameters Construct AddressSpace From Script'))\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.constructAddressSpace = function (server, asoDemo) {\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!server) {\n        reject(new Error('Server Not Valid To Construct Address Space'))\n        return\n      }\n\n      let coreServer = de.biancoroyal.opcua.iiot.core.server\n      let addressSpace = server.engine.addressSpace\n      const namespace = addressSpace.getOwnNamespace()\n\n      if (!addressSpace) {\n        reject(new Error('No AddressSpace From OPC UA Server Engine'))\n        return\n      }\n\n      let view = namespace.addView({\n        organizedBy: addressSpace.rootFolder.views,\n        browseName: 'BiancoRoyalView',\n        displayName: [\n          new LocalizedText({ text: 'Bianco Royal View', locale: 'en-US' }),\n          new LocalizedText({ text: 'Bianco Royal Sicht', locale: 'de-DE' })\n        ]\n      })\n\n      if (!asoDemo) {\n        resolve()\n      } else {\n        let constructAlarmAddressSpaceDemo = require('../helpers/alarms-and-conditions-demo').constructAlarmAddressSpaceDemo\n        let data = {}\n        constructAlarmAddressSpaceDemo(data, addressSpace)\n\n        de.biancoroyal.opcua.iiot.core.server.timeInterval = 1\n        de.biancoroyal.opcua.iiot.core.server.simulatorInterval = setInterval(function () {\n          de.biancoroyal.opcua.iiot.core.server.simulateVariation(data)\n        }, 500)\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(de.biancoroyal.opcua.iiot.core.server.simulatorInterval)\n        let vendorName = namespace.addObject({\n          organizedBy: addressSpace.rootFolder.objects,\n          typeDefinition: 'FolderType',\n          nodeId: 'i=1234',\n          browseName: 'BiancoRoyal',\n          displayName: [\n            new LocalizedText({ text: 'Bianco Royal', locale: 'en-US' }),\n            new LocalizedText({ text: 'Bianco Royal', locale: 'de-DE' })\n          ],\n          description: 'Bianco Royal - Software Innovations®'\n        })\n\n        let variable1 = 1\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (variable1 < 1000000) {\n            variable1 += 1\n          } else {\n            variable1 = 0\n          }\n        }, 100))\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 'i=16479',\n          browseName: 'MyVariable1',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable1\n              })\n            }\n          }\n        })\n\n        let variable2 = 10.0\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 'b=1020FFAA',\n          browseName: 'MyVariable2',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable2\n              })\n            },\n            set: function (variant) {\n              variable2 = parseFloat(variant.value)\n              return coreServer.core.nodeOPCUA.StatusCodes.Good\n            }\n          }\n        })\n\n        let variable3 = 1000.0\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=TestReadWrite',\n          browseName: 'TestReadWrite',\n          displayName: 'Test Read and Write',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable3\n              })\n            },\n            set: function (variant) {\n              variable3 = parseFloat(variant.value)\n              return coreServer.core.nodeOPCUA.StatusCodes.Good\n            }\n          }\n        })\n\n        let memoryVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=free_memory',\n          browseName: 'FreeMemory',\n          displayName: [\n            new LocalizedText({ text: 'Free Memory', locale: 'en-US' }),\n            new LocalizedText({ text: 'ungenutzer RAM', locale: 'de-DE' })\n          ],\n          dataType: 'Double',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: coreServer.core.availableMemory()\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n\n        let counterValue = 0\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (counterValue < 65000) {\n            counterValue += 1\n          } else {\n            counterValue = 0\n          }\n        }, 1000))\n\n        let counterVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=Counter',\n          browseName: 'Counter',\n          dataType: 'UInt16',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'UInt16',\n                value: counterValue\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(counterVariable)\n\n        let fullcounterValue = 0\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (fullcounterValue < 100000) {\n            fullcounterValue += 1\n          } else {\n            fullcounterValue = -100000\n          }\n        }, 500))\n\n        let fullcounterVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=FullCounter',\n          browseName: 'FullCounter',\n          dataType: 'Int32',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Int32',\n                value: fullcounterValue\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(fullcounterVariable)\n\n        let externalValueWithSourceTimestamp = new coreServer.core.nodeOPCUA.DataValue({\n          value: new coreServer.core.nodeOPCUA.Variant({ dataType: 'Double', value: 10.0 }),\n          sourceTimestamp: null,\n          sourcePicoseconds: 0\n        })\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          externalValueWithSourceTimestamp.value.value = Math.random()\n          externalValueWithSourceTimestamp.sourceTimestamp = new Date()\n        }, 1000))\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Pressure',\n          browseName: 'Pressure',\n          dataType: 'Double',\n          value: {\n            timestamped_get: function () {\n              return externalValueWithSourceTimestamp\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Matrix',\n          browseName: 'Matrix',\n          dataType: 'Double',\n          valueRank: 2,\n          arrayDimensions: [3, 3],\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Matrix,\n                dimensions: [3, 3],\n                value: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Position',\n          browseName: 'Position',\n          dataType: 'Double',\n          valueRank: 1,\n          arrayDimensions: null,\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n                value: [1, 2, 3, 4]\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=PumpSpeed',\n          browseName: 'PumpSpeed',\n          displayName: [\n            new LocalizedText({ text: 'Pump Speed', locale: 'en-US' }),\n            new LocalizedText({ text: 'Geschwindigkeit Pumpe', locale: 'de-DE' })\n          ],\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: 200 + 100 * Math.sin(Date.now() / 10000)\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=SomeDate',\n          browseName: 'SomeDate',\n          displayName: [\n            new LocalizedText({ text: 'Some Date', locale: 'en-US' }),\n            new LocalizedText({ text: 'Einfaches Datum', locale: 'de-DE' })\n          ],\n          dataType: 'DateTime',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: coreServer.core.nodeOPCUA.DataType.DateTime,\n                value: new Date(Date.UTC(2016, 9, 13, 8, 40, 0))\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=MultiLanguageText',\n          browseName: 'MultiLanguageText',\n          displayName: [\n            new LocalizedText({ text: 'Multi Language Text', locale: 'en-US' }),\n            new LocalizedText({ text: 'Mehrsprachiger Text', locale: 'de-DE' })\n          ],\n          dataType: 'LocalizedText',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: coreServer.core.nodeOPCUA.DataType.LocalizedText,\n                value: [{ text: 'multilingual text', locale: 'en' },\n                  { text: 'mehrsprachiger Text', locale: 'de' },\n                  { text: 'texte multilingue', locale: 'fr' }]\n              })\n            }\n          }\n        })\n\n        let fanSpeed = namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=FanSpeed',\n          browseName: 'FanSpeed',\n          dataType: 'Double',\n          value: new coreServer.core.nodeOPCUA.Variant({ dataType: 'Double', value: 1000.0 })\n        })\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          fanSpeed.setValueFromSource(new coreServer.core.nodeOPCUA.Variant({\n            dataType: 'Double',\n            value: 1000.0 + (Math.random() * 100 - 50)\n          }))\n        }, 10))\n\n        let method = namespace.addMethod(\n          vendorName, {\n            nodeId: 'i=12345',\n            browseName: 'Bark',\n\n            inputArguments: [\n              {\n                name: 'barks',\n                dataType: 'UInt32',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Scalar,\n                description: { text: 'specifies the number of time I should bark' }\n              }, {\n                name: 'volume',\n                dataType: 'UInt32',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Scalar,\n                description: { text: 'specifies the sound volume [0 = quiet ,100 = loud]' }\n              }\n            ],\n\n            outputArguments: [{\n              name: 'Barks',\n              dataType: 'String',\n              arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n              description: { text: 'the generated barks' },\n              valueRank: 1\n            }]\n          })\n\n        method.bindMethod(function (inputArguments, context, callback) {\n          let nbBarks = inputArguments[0].value\n          let volume = inputArguments[1].value\n          let soundVolume = new Array(volume).join('!')\n          let barks = []\n\n          for (let i = 0; i < nbBarks; i++) {\n            barks.push('Whaff' + soundVolume)\n          }\n\n          let callMethodResult = {\n            statusCode: coreServer.core.nodeOPCUA.StatusCodes.Good,\n            outputArguments: [{\n              dataType: coreServer.core.nodeOPCUA.DataType.String,\n              arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n              value: barks\n            }]\n          }\n          callback(null, callMethodResult)\n        })\n\n        let analogItemNode = namespace.addAnalogDataItem({\n          organizedBy: vendorName,\n          nodeId: 's=TemperatureAnalogItem',\n          browseName: 'TemperatureAnalogItem',\n          definition: '(tempA -25) + tempB',\n          valuePrecision: 0.5,\n          engineeringUnitsRange: { low: 100, high: 200 },\n          instrumentRange: { low: -100, high: +200 },\n          engineeringUnits: coreServer.core.nodeOPCUA.standardUnits.degree_celsius,\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: Math.random() + 19.0\n              })\n            }\n          }\n        })\n\n        view.addReference({\n          referenceType: 'Organizes',\n          nodeId: analogItemNode.nodeId\n        })\n\n        resolve()\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.destructAddressSpace = function (done) {\n  de.biancoroyal.opcua.iiot.core.server.intervalList.forEach(function (value, index, list) {\n    clearInterval(value)\n    list[index] = null\n  })\n  de.biancoroyal.opcua.iiot.core.server.intervalList = []\n  done()\n}\n\nde.biancoroyal.opcua.iiot.core.server.start = function (server, node) {\n  let coreServer = this\n  return new Promise(\n    function (resolve, reject) {\n      if (!server) {\n        reject(new Error('Server Not Valid To Start'))\n        return\n      }\n\n      if (!node) {\n        reject(new Error('Node Not Valid To Start'))\n        return\n      }\n\n      server.start(function (err) {\n        if (err) {\n          reject(err)\n        } else {\n          node.bianco.iiot.initialized = true\n\n          if (server.endpoints && server.endpoints.length) {\n            server.endpoints.forEach(function (endpoint) {\n              endpoint.endpointDescriptions().forEach(function (endpointDescription) {\n                coreServer.internalDebugLog('Server endpointUrl: ' +\n              endpointDescription.endpointUrl + ' securityMode: ' +\n              endpointDescription.securityMode.toString() +\n              ' securityPolicyUri: ' + endpointDescription.securityPolicyUri ? endpointDescription.securityPolicyUri.toString() : 'None Security Policy Uri')\n              })\n            })\n\n            let endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl\n            coreServer.internalDebugLog('Primary Server Endpoint URL ' + endpointUrl)\n          }\n\n          server.on('newChannel', function (channel) {\n            coreServer.internalDebugLog('Client connected with address = ' +\n            channel.remoteAddress + ' port = ' + channel.remotePort\n            )\n          })\n\n          server.on('closeChannel', function (channel) {\n            coreServer.internalDebugLog('Client disconnected with address = ' +\n            channel.remoteAddress + ' port = ' + channel.remotePort\n            )\n          })\n\n          server.on('create_session', function (session) {\n            coreServer.internalDebugLog('############## SESSION CREATED ##############')\n            if (session.clientDescription) {\n              coreServer.detailDebugLog('Client application URI:' + session.clientDescription.applicationUri)\n              coreServer.detailDebugLog('Client product URI:' + session.clientDescription.productUri)\n              coreServer.detailDebugLog('Client application name:' + session.clientDescription.applicationName ? session.clientDescription.applicationName.toString() : 'none application name')\n              coreServer.detailDebugLog('Client application type:' + session.clientDescription.applicationType ? session.clientDescription.applicationType.toString() : 'none application type')\n            }\n\n            coreServer.internalDebugLog('Session name:' + session.sessionName ? session.sessionName.toString() : 'none session name')\n            coreServer.internalDebugLog('Session timeout:' + session.sessionTimeout)\n            coreServer.internalDebugLog('Session id:' + session.sessionId)\n          })\n\n          server.on('session_closed', function (session, reason) {\n            coreServer.internalDebugLog('############## SESSION CLOSED ##############')\n            coreServer.internalDebugLog('reason:' + reason)\n            coreServer.internalDebugLog('Session name:' + session.sessionName ? session.sessionName.toString() : 'none session name')\n          })\n\n          coreServer.internalDebugLog('Server Initialized')\n\n          if (server.serverInfo) {\n            coreServer.detailDebugLog('Server Info:' + JSON.stringify(server.serverInfo))\n          }\n\n          resolve()\n        }\n      })\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.readConfigOfServerNode = function (node, config) {\n  node.name = config.name\n\n  // network\n  node.port = config.port\n  node.endpoint = config.endpoint\n  node.alternateHostname = config.alternateHostname\n\n  // limits\n  node.maxAllowedSessionNumber = parseInt(config.maxAllowedSessionNumber) || 10\n  node.maxConnectionsPerEndpoint = parseInt(config.maxConnectionsPerEndpoint) || 10\n  node.maxAllowedSubscriptionNumber = parseInt(config.maxAllowedSubscriptionNumber) || 50\n  node.maxNodesPerRead = config.maxNodesPerRead || 1000\n  node.maxNodesPerBrowse = config.maxNodesPerBrowse || 2000\n\n  node.delayToClose = config.delayToClose || 1000\n  node.showStatusActivities = config.showStatusActivities\n  node.showErrors = config.showErrors\n\n  // certificates\n  node.individualCerts = config.individualCerts\n  node.publicCertificateFile = config.publicCertificateFile\n  node.privateCertificateFile = config.privateCertificateFile\n\n  // Security\n  node.allowAnonymous = config.allowAnonymous\n  // User Management\n  node.opcuaUsers = config.users\n  // XML-Set Management\n  node.xmlsets = config.xmlsets\n  // Audit\n  node.isAuditing = config.isAuditing\n\n  // discovery\n  node.disableDiscovery = !config.serverDiscovery\n  node.registerServerMethod = config.registerServerMethod || 1\n  node.discoveryServerEndpointUrl = config.discoveryServerEndpointUrl\n  node.capabilitiesForMDNS = (config.capabilitiesForMDNS) ? config.capabilitiesForMDNS.split(',') : [config.capabilitiesForMDNS]\n\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.initServerNode = function (node) {\n  let serverNode = this.core.initCoreServerNode(node)\n  serverNode.bianco.iiot.assert = require('better-assert')\n  serverNode.setMaxListeners(this.UNLIMITED_LISTENERS)\n  return serverNode\n}\n\nde.biancoroyal.opcua.iiot.core.server.loadNodeSets = function (node, dirname) {\n  let coreServer = this\n  let standardNodeSetFile = this.core.nodeOPCUA.standard_nodeset_file\n  let xmlFiles = [standardNodeSetFile]\n\n  if (node.xmlsets) {\n    node.xmlsets.forEach((xmlsetFileName) => {\n      coreServer.detailDebugLog('Load XML Set for ' + xmlsetFileName.name)\n      if (xmlsetFileName.path) {\n        if (xmlsetFileName.path.startsWith('public/vendor/')) {\n          xmlFiles.push(this.path.join(dirname, xmlsetFileName.path))\n        } else {\n          xmlFiles.push(xmlsetFileName.path)\n        }\n      }\n    })\n    this.detailDebugLog('appending xmlFiles: ' + xmlFiles.toString())\n  }\n\n  this.detailDebugLog('node set:' + xmlFiles.toString())\n  node.bianco.iiot.xmlFiles = xmlFiles\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.loadCertificates = function (node) {\n  const nodeOPCUAServerPath = this.core.getNodeOPCUAServerPath()\n\n  this.detailDebugLog('config: ' + node.publicCertificateFile)\n  if (!node.individualCerts || node.publicCertificateFile === null || node.publicCertificateFile === '') {\n    node.publicCertificateFile = this.path.join(nodeOPCUAServerPath, '/certificates/server_selfsigned_cert_2048.pem')\n    this.detailDebugLog('default key: ' + node.publicCertificateFile)\n  }\n\n  this.detailDebugLog('config: ' + node.privateCertificateFile)\n  if (!node.individualCerts || node.privateCertificateFile === null || node.privateCertificateFile === '') {\n    node.privateCertificateFile = this.path.join(nodeOPCUAServerPath, '/certificates/PKI/own/private/private_key.pem')\n    this.detailDebugLog('default key: ' + node.privateCertificateFile)\n  }\n\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.checkUser = function (node, userName, password) {\n  let isValidUser = false\n  this.detailDebugLog('Server User Request For ' + userName)\n\n  node.opcuaUsers.forEach(function (user) {\n    if (userName === user.name && password === user.password) {\n      isValidUser = true\n    }\n  })\n\n  if (isValidUser) {\n    this.detailDebugLog('Valid Server User Found')\n  } else {\n    this.detailDebugLog('Server User ' + userName + ' Not Found')\n  }\n\n  return isValidUser\n}\n\nde.biancoroyal.opcua.iiot.core.server.initRegisterServerMethod = function (node) {\n  node.bianco.iiot.initialized = false\n  node.bianco.iiot.opcuaServer = null\n\n  if (!node.registerServerMethod) {\n    node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.HIDDEN\n  } else {\n    switch (parseInt(node.registerServerMethod)) {\n      case 2:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.MDNS\n        break\n      case 3:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.LDS\n        break\n      default:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.HIDDEN\n    }\n  }\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.setDiscoveryOptions = function (node, serverOptions) {\n  if (!node.disableDiscovery) {\n    serverOptions.registerServerMethod = node.registerServerMethod\n\n    if (node.discoveryServerEndpointUrl && node.discoveryServerEndpointUrl !== '') {\n      serverOptions.discoveryServerEndpointUrl = node.discoveryServerEndpointUrl\n    }\n\n    if (node.capabilitiesForMDNS && node.capabilitiesForMDNS.length) {\n      serverOptions.capabilitiesForMDNS = node.capabilitiesForMDNS\n    }\n  } else {\n    node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.HIDDEN\n  }\n  return serverOptions\n}\n\nde.biancoroyal.opcua.iiot.core.server.getAddressSpace = function (node, msg) {\n  if (!node.bianco.iiot.opcuaServer.engine.addressSpace) {\n    node.error(new Error('Server AddressSpace Not Valid'), msg)\n    return null\n  }\n\n  return node.bianco.iiot.opcuaServer.engine.addressSpace\n}\n\nde.biancoroyal.opcua.iiot.core.server.addVariableToAddressSpace = function (node, msg, humanReadableType, isProperty) {\n  let coreServer = this\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n  let variableData = this.core.getVariantValue(msg.payload.datatype, msg.payload.value)\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  let newNodeOPCUAVariable = {}\n\n  if (isProperty) {\n    newNodeOPCUAVariable = {\n      propertyOf: rootFolder\n      // modellingRule: 'Mandatory'\n    }\n  } else {\n    newNodeOPCUAVariable = {\n      componentOf: rootFolder\n    }\n  }\n\n  newNodeOPCUAVariable.nodeId = msg.payload.nodeId\n  newNodeOPCUAVariable.browseName = msg.payload.browsename\n  newNodeOPCUAVariable.displayName = new LocalizedText({ locale: null, text: msg.payload.displayname })\n  newNodeOPCUAVariable.dataType = msg.payload.datatype\n  newNodeOPCUAVariable.value = {\n    get () {\n      return new coreServer.core.nodeOPCUA.Variant({\n        dataType: coreServer.core.nodeOPCUA.DataType[msg.payload.datatype],\n        value: variableData\n      })\n    },\n    set (variant) {\n      variableData = variant.value\n      return coreServer.core.nodeOPCUA.StatusCodes.Good\n    }\n  }\n\n  addressSpace.getOwnNamespace().addVariable(newNodeOPCUAVariable)\n  coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n}\n\nde.biancoroyal.opcua.iiot.core.server.addObjectToAddressSpace = function (node, msg, humanReadableType) {\n  let coreServer = this\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  if (rootFolder) {\n    let newNodeOPCUObject = {\n      organizedBy: rootFolder,\n      typeDefinition: msg.payload.objecttype,\n      nodeId: msg.payload.nodeId,\n      browseName: msg.payload.browsename,\n      displayName: new LocalizedText({ locale: null, text: msg.payload.displayname })\n    }\n\n    addressSpace.getOwnNamespace().addObject(newNodeOPCUObject)\n    coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n  } else {\n    node.error(new Error('Root Reference Not Found'), msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.deleteNOdeFromAddressSpace = function (node, msg) {\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  if (msg.payload.nodeId) {\n    let searchedNode = addressSpace.findNode(msg.payload.nodeId)\n    if (searchedNode) {\n      this.internalDebugLog('Delete NodeId ' + msg.payload.nodeId)\n      addressSpace.deleteNode(searchedNode)\n    } else {\n      this.internalDebugLog('Delete NodeId Not Found ' + msg.payload.nodeId)\n    }\n  } else {\n    node.error(new Error('OPC UA Command NodeId Not Valid'), msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.restartServer = function (node) {\n  if (node.bianco.iiot.opcuaServer) {\n    node.bianco.iiot.opcuaServer.shutdown(function () {\n      node.emit('shutdown')\n    })\n  } else {\n    node.bianco.iiot.opcuaServer = null\n    node.emit('shutdown')\n  }\n\n  node.send({ payload: 'server shutdown' })\n  this.core.setNodeStatusTo(node, 'shutdown')\n}\n\nde.biancoroyal.opcua.iiot.core.server.handleServerError = function (node, err, msg) {\n  this.internalDebugLog(err)\n  if (node.showErrors) {\n    node.error(err, msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.createServerNameWithPrefix = function (serverPort, prefix) {\n  let serverPrefix = (prefix !== '') ? prefix + '-' : prefix\n  return 'NodeRED-IIoT-' + serverPrefix + 'Server-' + serverPort\n}\n\nde.biancoroyal.opcua.iiot.core.server.buildServerOptions = function (node, prefix) {\n  let coreServer = this\n  let geFullyQualifiedDomainName = coreServer.core.nodeOPCUA.get_fully_qualified_domain_name\n  let makeApplicationUrn = coreServer.core.nodeOPCUA.makeApplicationUrn\n  let today = new Date()\n\n  // const SecurityPolicy = require(\"node-opcua\").SecurityPolicy;\n\n  return {\n    port: node.port,\n    nodeset_filename: node.bianco.iiot.xmlFiles,\n    resourcePath: node.endpoint || 'UA/NodeRED' + prefix + 'IIoTServer',\n    buildInfo: {\n      productName: node.name || 'NodeOPCUA IIoT Server',\n      buildNumber: today.timestamp,\n      buildDate: today\n    },\n    serverCapabilities: {\n      operationLimits: {\n        maxNodesPerRead: node.maxNodesPerRead,\n        maxNodesPerBrowse: node.maxNodesPerBrowse\n      }\n    },\n    serverInfo: {\n      // applicationType: ApplicationType.CLIENTANDSERVER,\n      applicationUri: makeApplicationUrn(geFullyQualifiedDomainName(), coreServer.createServerNameWithPrefix(node.port, prefix)),\n      productUri: coreServer.createServerNameWithPrefix(node.port, prefix),\n      applicationName: { text: 'Node-RED', locale: 'en' },\n      gatewayServerUri: null,\n      discoveryProfileUri: null,\n      discoveryUrls: []\n    },\n    maxAllowedSessionNumber: node.maxAllowedSessionNumber,\n    maxConnectionsPerEndpoint: node.maxConnectionsPerEndpoint,\n    allowAnonymous: node.allowAnonymous,\n    /* securityPolicies: [ TODO: configure SecurityPolicies\n      SecurityPolicy.Basic128Rsa15,\n      SecurityPolicy.Basic256,\n      SecurityPolicy.Basic256Sha256\n    ], */\n    certificateFile: node.publicCertificateFile,\n    privateKeyFile: node.privateCertificateFile,\n    alternateHostname: node.alternateHostname || '',\n    userManager: null,\n    isAuditing: node.isAuditing,\n    registerServerMethod: node.registerServerMethod,\n    disableDiscovery: node.disableDiscovery\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.createServerObject = function (node, serverOptions) {\n  this.core.nodeOPCUA.OPCUAServer.MAX_SUBSCRIPTION = node.maxAllowedSubscriptionNumber\n  return new this.core.nodeOPCUA.OPCUAServer(serverOptions)\n}\n\nde.biancoroyal.opcua.iiot.core.server.setOPCUAServerListener = function (node) {\n  let coreServer = this\n\n  node.bianco.iiot.opcuaServer.on('newChannel', function (channel) {\n    coreServer.internalDebugLog('Client connected new channel with address = '.bgYellow, channel.remoteAddress, ' port = ', channel.remotePort)\n  })\n\n  node.bianco.iiot.opcuaServer.on('closeChannel', function (channel) {\n    coreServer.internalDebugLog('Client disconnected close channel with address = '.bgCyan, channel.remoteAddress, ' port = ', channel.remotePort)\n  })\n\n  node.bianco.iiot.opcuaServer.on('post_initialize', function () {\n    coreServer.internalDebugLog('initialized')\n  })\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.server\n"]}