{"version":3,"sources":["core/opcua-iiot-core-listener.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","listener","client","internalDebugLog","detailDebugLog","subscribeDebugLog","subscribeDetailDebugLog","eventDebugLog","eventDetailDebugLog","SUBSCRIBE_DEFAULT_INTERVAL","MIN_LISTENER_INTERVAL","MAX_LISTENER_INTERVAL","SUBSCRIBE_DEFAULT_QUEUE_SIZE","EVENT_DEFAULT_INTERVAL","METHOD_TYPE","MAX_INT32","Stately","machine","requestinitsub","initsub","INIT","terminatesub","idlesub","endsub","ERROR","getEventSubscribtionParameters","timeMilliseconds","requestedPublishingInterval","requestedLifetimeCount","requestedMaxKeepAliveCount","maxNotificationsPerPublish","publishingEnabled","priority","getSubscriptionParameters","collectAlarmFields","field","dataType","value","getBasicEventFields","getAllEventFields","getStateFields","getConditionFields","coreListener","monitoredItem","result","node","msg","uaSubscription","topic","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","addressSpaceItems","Symbol","iterator","next","done","addressSpaceItem","nodeId","datatypeName","nodeIdToMonitor","toString","this","buildNewMonitoredItem","then","monitoredItemId","bianco","monitoredASO","set","catch","err","showErrors","error","return","subscription","interval","queueSize","reject","options","payload","listenerParameters","attributeId","Value","nodeOPCUA","parseInt","monitor","resolveNodeId","AttributeIds","monitoredItemResult","discardOldest","read_service","TimestampsToReturn","Both","buildNewMonitoredItemGroup","Error","resolve","subcriptionItems","filteredAddressSpaceItems","samplingInterval","forEach","item","monitoredItemGroup","monitorItems","buildNewEventItem","eventFilter","EVENT_DEFAULT_QUEUE_SIZE","analyzeEvent","EventNotifier","session","filter","browseForBrowseName","dataValue","variant","eventInformation","browseName","eventResults","eventData","index","monitoringParameters","selectClauses","key","DataType","NodeId","push","toJSON","connector","stateMachine","getMachineState","checkState","callerType","listenerNode","initClientNode","RUNNING_STATE","initListenerNode","opcuaSubscription","monitoredItems","Map","messageQueue","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core-listener.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {client: {listener: {}}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.client.listener\n */\nvar de = de || { biancoroyal: { opcua: { iiot: { core: { listener: {} } } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.core = de.biancoroyal.opcua.iiot.core.listener.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.client = de.biancoroyal.opcua.iiot.core.listener.client || require('./opcua-iiot-core-client') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.internalDebugLog = de.biancoroyal.opcua.iiot.core.listener.internalDebugLog || require('debug')('opcuaIIoT:listener') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.detailDebugLog = de.biancoroyal.opcua.iiot.core.listener.detailDebugLog || require('debug')('opcuaIIoT:listener:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.subscribeDebugLog = de.biancoroyal.opcua.iiot.core.listener.subscribeDebugLog || require('debug')('opcuaIIoT:listener:subscribe') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.subscribeDetailDebugLog = de.biancoroyal.opcua.iiot.core.listener.subscribeDetailDebugLog || require('debug')('opcuaIIoT:listener:subscribe:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.eventDebugLog = de.biancoroyal.opcua.iiot.core.listener.eventDebugLog || require('debug')('opcuaIIoT:listener:event') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.eventDetailDebugLog = de.biancoroyal.opcua.iiot.core.listener.eventDetailDebugLog || require('debug')('opcuaIIoT:listener:event:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.SUBSCRIBE_DEFAULT_INTERVAL = 1000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.MIN_LISTENER_INTERVAL = 0 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.MAX_LISTENER_INTERVAL = 3600000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.SUBSCRIBE_DEFAULT_QUEUE_SIZE = 1 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.EVENT_DEFAULT_INTERVAL = 250 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.EVENT_DEFAULT_QUEUE_SIZE = 10000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE = 'ns=0;i=0' // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.RUNNING_STATE = 'STARTED' // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.MAX_INT32 = 2147483647 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.Stately = de.biancoroyal.opcua.iiot.core.listener.Stately || require('stately.js') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.listener.createStatelyMachine = function () {\n  return de.biancoroyal.opcua.iiot.core.listener.Stately.machine({\n    'IDLE': {\n      'requestinitsub': 'REQUESTED',\n      'endsub': 'END'\n    },\n    'REQUESTED': {\n      'initsub': 'INIT'\n    },\n    'INIT': {\n      'startsub': 'STARTED',\n      'terminatesub': 'TERMINATED',\n      'errorsub': 'ERROR'\n    },\n    'STARTED': {\n      'terminatesub': 'TERMINATED',\n      'errorsub': 'ERROR'\n    },\n    'TERMINATED': {\n      'idlesub': 'IDLE',\n      'errorsub': 'ERROR',\n      'endsub': 'END'\n    },\n    'ERROR': {\n      'idlesub': 'IDLE',\n      'initsub': 'INIT',\n      'endsub': 'END'\n    },\n    'END': {}\n  }, 'IDLE')\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getEventSubscribtionParameters = function (timeMilliseconds) {\n  timeMilliseconds = timeMilliseconds > de.biancoroyal.opcua.iiot.core.listener.MAX_INT32 ? 100 : timeMilliseconds\n  return {\n    requestedPublishingInterval: timeMilliseconds || 100,\n    requestedLifetimeCount: 1000 * 60 * 20,\n    requestedMaxKeepAliveCount: 120,\n    maxNotificationsPerPublish: 200,\n    publishingEnabled: true,\n    priority: 2\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getSubscriptionParameters = function (timeMilliseconds) {\n  timeMilliseconds = timeMilliseconds > de.biancoroyal.opcua.iiot.core.listener.MAX_INT32 ? 200 : timeMilliseconds\n  return {\n    requestedPublishingInterval: timeMilliseconds || 200,\n    requestedLifetimeCount: 1000 * 60 * 10,\n    requestedMaxKeepAliveCount: 60,\n    maxNotificationsPerPublish: 100,\n    publishingEnabled: true,\n    priority: 10\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.collectAlarmFields = function (field, dataType, value) {\n  return {\n    field,\n    dataType,\n    value\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getBasicEventFields = function () {\n  return ['EventId', 'SourceName', 'Message', 'ReceiveTime']\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getAllEventFields = function () {\n  return [\n    'ConditionName',\n    'ConditionType',\n    'ConditionClassId',\n    'ConditionClassName',\n    'ConditionVariableType',\n    'SourceNode',\n    'BranchId',\n    'EventType',\n    'Severity',\n    'Retain',\n    'Comment',\n    'Comment.SourceTimestamp',\n    'EnabledState',\n    'EnabledState.Id',\n    'EnabledState.EffectiveDisplayName',\n    'EnabledState.TransitionTime',\n    'LastSeverity',\n    'LastSeverity.SourceTimestamp',\n    'Quality',\n    'Quality.SourceTimestamp',\n    'Time',\n    'ClientUserId',\n    'AckedState',\n    'AckedState.Id',\n    'ConfirmedState',\n    'ConfirmedState.Id',\n    'LimitState',\n    'LimitState.Id',\n    'ActiveState',\n    'ActiveState.Id'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getStateFields = function () {\n  return [\n    'ConditionName',\n    'SourceNode',\n    'Quality',\n    'Time',\n    'EnabledState',\n    'EnabledState.Id',\n    'EnabledState.EffectiveDisplayName',\n    'EnabledState.TransitionTime',\n    'AckedState',\n    'AckedState.Id',\n    'ConfirmedState',\n    'ConfirmedState.Id',\n    'LimitState',\n    'LimitState.Id',\n    'ActiveState',\n    'ActiveState.Id'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getConditionFields = function () {\n  return [\n    'Time',\n    'Quality',\n    'BranchId',\n    'SourceNode',\n    'ConditionName',\n    'ConditionType',\n    'ConditionClassId',\n    'ConditionClassName',\n    'ConditionVariableType'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.monitorItems = function (node, msg, uaSubscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  for (let addressSpaceItem of msg.addressSpaceItems) {\n    if (!addressSpaceItem.nodeId) {\n      coreListener.subscribeDebugLog('Address Space Item Not Valid to Monitor ' + addressSpaceItem)\n      return\n    }\n\n    if (addressSpaceItem.datatypeName === de.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE) {\n      coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n      return\n    }\n\n    const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n\n    if (nodeIdToMonitor) {\n      coreListener.subscribeDebugLog('Monitored Item Subscribing ' + nodeIdToMonitor)\n      this.buildNewMonitoredItem(nodeIdToMonitor, msg, uaSubscription)\n        .then(function (result) {\n          if (result.monitoredItem.monitoredItemId) {\n            coreListener.subscribeDebugLog('Monitored Item Subscribed Id:' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n            node.bianco.iiot.monitoredASO.set(result.nodeId.toString(), { monitoredItem: result.monitoredItem, topic: msg.topic || node.topic })\n          }\n        }).catch(function (err) {\n          coreListener.subscribeDebugLog(err)\n          if (node.showErrors) {\n            node.error(err, msg)\n          }\n        })\n    }\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewMonitoredItem = function (nodeId, msg, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!nodeId) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n      let options = (msg.payload.listenerParameters) ? msg.payload.listenerParameters : msg.payload\n      if (typeof options.interval === 'number' &&\n        options.interval <= coreListener.MAX_LISTENER_INTERVAL &&\n        options.interval >= coreListener.MIN_LISTENER_INTERVAL) {\n        interval = parseInt(options.interval)\n      } else {\n        interval = coreListener.SUBSCRIBE_DEFAULT_INTERVAL\n      }\n\n      if (options.queueSize && typeof options.queueSize === 'number') {\n        queueSize = parseInt(options.queueSize)\n      } else {\n        queueSize = coreListener.SUBSCRIBE_DEFAULT_QUEUE_SIZE\n      }\n\n      subscription.monitor(\n        {\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.Value\n        },\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemResult) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing monitored item ' + err)\n            reject(err)\n          } else {\n            resolve({ nodeId: nodeId, monitoredItem: monitoredItemResult })\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewMonitoredItemGroup = function (node, msg, addressSpaceItems, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!addressSpaceItems) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n\n      let options = (msg.payload.listenerParameters) ? msg.payload.listenerParameters : msg.payload\n      if (typeof options.interval === 'number' &&\n        options.interval <= coreListener.MAX_LISTENER_INTERVAL &&\n        options.interval >= coreListener.MIN_LISTENER_INTERVAL) {\n        interval = parseInt(options.interval)\n      } else {\n        interval = coreListener.SUBSCRIBE_DEFAULT_INTERVAL\n      }\n\n      if (options.queueSize && typeof options.queueSize === 'number') {\n        queueSize = parseInt(options.queueSize)\n      } else {\n        queueSize = coreListener.SUBSCRIBE_DEFAULT_QUEUE_SIZE\n      }\n\n      let filteredAddressSpaceItems = addressSpaceItems.filter((addressSpaceItem) => {\n        return addressSpaceItem.datatypeName !== de.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE\n      })\n\n      let subcriptionItems = []\n      filteredAddressSpaceItems.forEach((item) => {\n        subcriptionItems.push({\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(item.nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.Value })\n      })\n\n      subscription.monitorItems(\n        subcriptionItems,\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemGroup) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing monitored item group ' + err)\n            reject(err)\n          } else {\n            resolve({ addressSpaceItems: addressSpaceItems, monitoredItemGroup: monitoredItemGroup })\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewEventItem = function (nodeId, msg, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!nodeId) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n\n      if (typeof msg.payload.interval === 'number' && msg.payload.interval < coreListener.MAX_LISTENER_INTERVAL) {\n        interval = parseInt(msg.payload.interval)\n      } else {\n        interval = coreListener.EVENT_DEFAULT_INTERVAL\n      }\n\n      if (typeof msg.payload.queueSize === 'number') {\n        queueSize = parseInt(msg.payload.queueSize)\n      } else {\n        queueSize = coreListener.EVENT_DEFAULT_QUEUE_SIZE\n      }\n\n      subscription.monitor(\n        {\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.EventNotifier\n        },\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize,\n          filter: msg.payload.eventFilter\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemResult) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing event item ' + err)\n            reject(err)\n          } else {\n            resolve({ nodeId: nodeId, monitoredItem: monitoredItemResult })\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.analyzeEvent = function (session, browseForBrowseName, dataValue) {\n  let core = de.biancoroyal.opcua.iiot.core.listener.core\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Session Is Not Valid To Analyze Event'))\n        return\n      }\n\n      if (!browseForBrowseName || typeof browseForBrowseName !== 'function') {\n        reject(new Error('BrowseForBrowseName Is Not Valid Function'))\n        return\n      }\n\n      if (!dataValue) {\n        reject(new Error('Event Response Not Valid'))\n      } else {\n        let index = 0\n        let eventInformation = {}\n        let eventResults = []\n\n        dataValue.forEach(function (variant) {\n          coreListener.eventDebugLog('variant entry: ' + variant.toString())\n\n          try {\n            if (variant.dataType && variant.value) {\n              eventInformation = coreListener.collectAlarmFields(dataValue.monitoringParameters.filter.selectClauses[index], variant.dataType.key.toString(), variant.value)\n\n              if (variant.dataType === core.nodeOPCUA.DataType.NodeId) {\n                browseForBrowseName(session, variant.value, function (err, browseName) {\n                  if (err) {\n                    reject(err)\n                  } else {\n                    eventInformation.browseName = browseName\n                    eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n                  }\n                })\n              } else {\n                eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n              }\n            }\n            index++\n          } catch (err) {\n            eventInformation = { error: err }\n            eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n          }\n        })\n\n        resolve(eventResults)\n      }\n    }\n  )\n}\n\nde.biancoroyal.opcua.iiot.core.listener.checkState = function (node, msg, callerType) {\n  this.internalDebugLog('Check Listener State ' + node.bianco.iiot.stateMachine.getMachineState() + ' By ' + callerType)\n\n  if (node.connector && node.bianco.iiot.stateMachine && node.bianco.iiot.stateMachine.getMachineState() !== this.RUNNING_STATE) {\n    this.internalDebugLog('Wrong Listener State ' + node.bianco.iiot.stateMachine.getMachineState() + ' By ' + callerType)\n    if (node.showErrors) {\n      node.error(new Error('Listener Not ' + this.RUNNING_STATE + ' On ' + callerType), msg)\n    }\n    return false\n  } else {\n    return true\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.initListenerNode = function (node) {\n  let listenerNode = this.core.initClientNode(node)\n  listenerNode.bianco.iiot.opcuaSubscription = null\n  listenerNode.bianco.iiot.monitoredItems = new Map()\n  listenerNode.bianco.iiot.monitoredASO = new Map()\n  listenerNode.bianco.iiot.messageQueue = []\n  return listenerNode\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.listener\n"]}