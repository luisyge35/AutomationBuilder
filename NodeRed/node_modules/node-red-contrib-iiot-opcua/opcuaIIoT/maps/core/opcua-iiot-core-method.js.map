{"version":3,"sources":["core/opcua-iiot-core-method.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","method","internalDebugLog","detailDebugLog","getArgumentDefinition","session","msg","this","nodeOPCUA","coerceNodeId","Promise","resolve","reject","methodId","err","methodDefinition","inputArguments","results","outputArguments","Error","forEach","element","index","array","value","convertDataValueByDataType","dataType","objectId","buildMessagesFromMethodCalls","methodCallsResults","messages","invalidMessage","node","message","response","resultMessages","bianco","handleMethodWarn","buildCallMessage","payload","methodType","nodetype","module","exports"],"mappings":"AAOA,aACAA,QAAQ,sBAAsBC,UAS9B,IAAIC,GAAKA,IAAM,CAAEC,YAAa,CAAEC,MAAO,CAAEC,KAAM,CAAEC,KAAM,CAAEC,OAAQ,QACjEL,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAOD,KAAOJ,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAOD,MAAQN,QAAQ,qBADnGE,GAAAC,YAAeC,MAAAC,KAAAC,KAAAC,OAAAC,iBAAAN,GAAAC,YAAAC,MAAAC,KAAAC,KAAAC,OAAAC,kBAAAR,QAAA,QAAAA,CAAA,oBAAEG,GAAAA,YAAaC,MAAAC,KAAAC,KAAAC,OAAAE,eAAAP,GAAAC,YAAAC,MAAAC,KAAAC,KAAAC,OAAAE,gBAAAT,QAAA,QAAAA,CAAA,4BAAWK,GAAAA,YAAMD,MAAAC,KAAAC,KAAAC,OAAAG,sBAAA,SAAAC,EAAAC,GAAEN,IAAAA,EAAMO,KAAAP,KAAAQ,UAAAC,aAAA,OAAA,IAAAC,QAAR,SAAAC,EAAAC,GAAR,GAAAP,EAa/B,IAZLR,IAAHgB,EAAAJ,EAAsCT,EAAtCa,UACGhB,EAAYC,sBAAuBI,EAAAA,SAAsBL,EAAAA,EAAkBE,GAelE,GAAIe,EAdhBF,EAAqBb,OAgBF,CAdnB,IAAeD,EAAWE,GACpBS,EAAeI,SAAUL,EAElBE,EACTK,iBAAmBH,GACZP,EAASU,iBAAAC,eAAAA,EACLC,EAAAF,iBAAUG,gBAAAA,EACZP,EAAAM,MAIHZ,MAAQD,GACNQ,EAAAE,QAjBkBF,EAAA,IAAAO,MAAA,oDAuBhBF,GAAAA,YAAAA,MAAQF,KAAAA,KAAAA,OAAiBC,YAAzB,SAA0CA,EAA1CV,GACAW,IAAAA,EAAAA,KAAAA,KACAN,EAAQM,KAAAA,KAART,UAAAC,aAEH,OAXD,IAAAC,QAYD,SAACC,EAAYC,GACZA,GAAAA,EArBR,IAHFN,EAAAU,eAAAI,QAAA,SAAAC,EAAAC,EAAAC,GAyCYF,EAAQG,MAAQxB,EAAKyB,2BAA2B,CAAED,MAAOH,EAAQG,OAASH,EAAQK,YATxFjB,IAAAA,EAAoBT,CAAAA,CAEjB2B,SACLlB,EAAUE,EAAVgB,UACOtB,SAASI,EAAAH,EAAAO,UACNG,eAAWV,EAAAU,iBAGfV,EAAIU,KAAAA,EAAuB,SAAUK,EAAAA,GACnCA,EAAkDG,EAAOH,GAD3DV,EAAA,CAAAM,QAAAA,EAAAX,IAAAA,MAMEO,MAAAA,GACAG,EAAAA,QAtBHJ,EAAA,IAAAO,MAAA,sCA6BKR,GAAAA,YAAAA,MAAQZ,KAAAC,KAAAC,OAAA2B,6BAAA,SAAAC,GAAEZ,OAAAA,IAAAA,QAASX,SAAAA,EAAAA,GAAX,GAAAuB,EAJZ,CAQAjB,EAAOE,CAADe,mBAANA,EAAAC,SADY,UAFTlB,EAAA,IAAAO,MAAA,0DAqBbvB,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAO8B,eAAiB,SAAUC,EAAMC,GAZrE,IAACpC,GAAYC,EAoBb,OAjBImC,EAAKJ,WACHjB,EAAAA,OAAOb,KAAIoB,iBAAM,sCAClBe,GAAM,GAEKL,EAAAA,WAAwCC,EAAAA,OAAQ/B,KAAEoC,iBAAAA,sCAApDD,GAAR,GAPRD,EAAAjB,iBA0BIgB,EAAKI,OAAOrC,KAAKsC,iBAAiB,4CAdnCxC,GAAYC,GAGRmC,EAAQN,aACXK,EAAKI,OAAOrC,KAAKsC,iBAAiB,wCAClCH,GAAW,GAGRD,GAGJrC,GAAAC,YAAAC,MAAAC,KAAAC,KAAAC,OAAAqC,iBAAA,SAAAN,EAAA1B,GAgBD,IAAI2B,EAAU3B,EATd,OALA2B,EAAKA,SAAQjB,EAAAA,QAAgBW,UAAAK,EAAAL,SAC3BK,EAAKI,SAAYC,EAAAA,QAAAA,UAAiBL,EAAAnB,SAClCqB,EAAAA,WAAA5B,EAAAiC,QAAAC,YAAAR,EAAAQ,WACDP,EAAAjB,eAAAV,EAAAiC,QAAAvB,gBAAAgB,EAAAhB,eAgBDiB,EAAQQ,SAAW,SAddR,GAGJS,OAAAC,QAAA/C,GAAAC,YAAAC,MAAAC,KAAAC,KAAAC","file":"../../core/opcua-iiot-core-method.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {method: {}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.method\n */\nvar de = de || { biancoroyal: { opcua: { iiot: { core: { method: {} } } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.core = de.biancoroyal.opcua.iiot.core.method.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.internalDebugLog = de.biancoroyal.opcua.iiot.core.method.internalDebugLog || require('debug')('opcuaIIoT:method') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.detailDebugLog = de.biancoroyal.opcua.iiot.core.method.detailDebugLog || require('debug')('opcuaIIoT:method:details') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.method.getArgumentDefinition = function (session, msg) {\n  let coerceNodeId = this.core.nodeOPCUA.coerceNodeId\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Method Argument Definition Session Not Valid'))\n      } else {\n        try {\n          let methodId = coerceNodeId(msg.methodId)\n\n          session.getArgumentDefinition(methodId, function (err, inputArguments, outputArguments) {\n            if (err) {\n              reject(err)\n            } else {\n              let results = {}\n              results.methodId = methodId\n              results.methodDefinition = {}\n              results.methodDefinition.inputArguments = inputArguments\n              results.methodDefinition.outputArguments = outputArguments\n              resolve(results)\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.method.callMethods = function (session, msg) {\n  let core = this.core\n  let coerceNodeId = this.core.nodeOPCUA.coerceNodeId\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Methods Call Session Not Valid'))\n      } else {\n        try {\n          msg.inputArguments.forEach(function (element, index, array) {\n            element.value = core.convertDataValueByDataType({ value: element.value }, element.dataType)\n          })\n\n          let methodCalls = [{\n            objectId: coerceNodeId(msg.objectId),\n            methodId: coerceNodeId(msg.methodId),\n            inputArguments: msg.inputArguments\n          }]\n\n          session.call(methodCalls, function (err, results) {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ results, msg })\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.method.buildMessagesFromMethodCalls = function (methodCallsResults) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!methodCallsResults) {\n        reject(new Error('Methods Call Results To Messages Session Not Valid'))\n      } else {\n        let resultMessages = []\n        resolve({ methodCallsResults: methodCallsResults, messages: resultMessages })\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.method.invalidMessage = function (node, message) {\n  let response = false\n\n  if (!message.objectId) {\n    node.bianco.iiot.handleMethodWarn('No Object-Id Found For Method Call')\n    response = true\n  }\n\n  if (!message.methodId) {\n    node.bianco.iiot.handleMethodWarn('No Method-Id Found For Method Call')\n    response = true\n  }\n\n  if (!message.inputArguments) {\n    node.bianco.iiot.handleMethodWarn('No Input Arguments Found For Method Call')\n    response = true\n  }\n\n  if (!message.methodType) {\n    node.bianco.iiot.handleMethodWarn('No Method Type Found For Method Call')\n    response = true\n  }\n\n  return response\n}\n\nde.biancoroyal.opcua.iiot.core.method.buildCallMessage = function (node, msg) {\n  let message = msg\n  message.objectId = msg.payload.objectId || node.objectId\n  message.methodId = msg.payload.methodId || node.methodId\n  message.methodType = msg.payload.methodType || node.methodType\n  message.inputArguments = msg.payload.inputArguments || node.inputArguments\n  message.nodetype = 'method'\n  return message\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.method\n"]}