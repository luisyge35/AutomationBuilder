{"version":3,"sources":["opcua-iiot-discovery.js"],"names":["module","exports","RED","require","install","coreDiscovery","nodes","registerType","config","OPCUAIIoTDiscovery","createNode","this","name","discoveryPort","DEFAULT_OPCUA_DISCOVERY_PORT","node","bianco","core","createBiancoIIoT","assert","iiot","port","discoveryServer","status","fill","shape","text","detailDebugLog","_get_endpoints","start","msg","getDiscoveryUrls","endpoints","send","shutdown","internalDebugLog","on"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAgBF,QAAQ,oCAsCvBD,EAAAI,MAAAC,aAAA,uBApCL,SAA6BC,GAA7BN,EAAAI,MAASG,WAAAA,KAAoBD,GAC3BN,KAAII,KAAMI,EAAAA,KACVC,KAAKC,cAAcA,EAAnBC,eAAAR,EAAAS,6BAGA,IAAIC,EAAOJ,KACXI,EAAKC,OAASX,EAAcY,KAAKC,mBACjCb,EAAcY,KAAKE,OAAOJ,EAAKC,OAAOI,MAE0CC,IAAIC,EAAOT,IAAAA,EAAAA,KAAAA,UAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,gBAE3FE,EAAKQ,OAAO,CAAAC,KAAA,SAAAC,MAAA,OAAAC,KAAA,aAAkBD,EAAOE,eAAzB,uBAAAL,EAAAM,kBAAAN,EAAZO,MAAA,WAEAxB,EAAcsB,iBAAe,4BAE7BL,EAAAA,OAAAA,CAAgBO,KAAM,QAAAJ,MAAY,MAAAC,KAAA,aAElBF,EAAAA,GAAI,QAAN,SAAAM,GAAiBL,EAAAA,QAAjB,CAA+BC,cAAMJ,EAAAS,oBAAA,GAAjDC,UAAAV,EAAAU,WAAA,IAGFjB,EAAAkB,KAAQH,KAGJE,EAAAA,GAAAA,QAAWV,SAAAA,GAFbA,EAIAP,EAAAmB,SAAA,WALF7B,EAAA8B,iBAAA,YAQKC,MAGC/B","file":"../opcua-iiot-discovery.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreDiscovery = require('./core/opcua-iiot-core-discovery')\n\n  function OPCUAIIoTDiscovery (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.discoveryPort = config.discoveryPort || coreDiscovery.DEFAULT_OPCUA_DISCOVERY_PORT\n\n    let node = this\n    node.bianco = coreDiscovery.core.createBiancoIIoT()\n    coreDiscovery.core.assert(node.bianco.iiot)\n\n    const discoveryServer = new coreDiscovery.core.nodeOPCUA.OPCUADiscoveryServer({ port: node.discoveryPort })\n\n    node.status({ fill: 'yellow', shape: 'ring', text: 'starting' })\n\n    coreDiscovery.detailDebugLog('discovery endpoints:' + discoveryServer._get_endpoints())\n\n    discoveryServer.start(function () {\n      coreDiscovery.internalDebugLog('discovery server started')\n      node.status({ fill: 'green', shape: 'dot', text: 'active' })\n    })\n\n    node.on('input', function (msg) {\n      msg.payload = {\n        discoveryUrls: discoveryServer.getDiscoveryUrls() || [],\n        endpoints: discoveryServer.endpoints || []\n      }\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (discoveryServer) {\n        discoveryServer.shutdown(function () {\n          coreDiscovery.internalDebugLog('shutdown')\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Discovery', OPCUAIIoTDiscovery)\n}\n"]}