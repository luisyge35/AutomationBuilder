{"version":3,"sources":["opcua-iiot-inject.js"],"names":["require","RED","install","coreInject","cron","OPCUAIIoTInject","config","nodes","this","topic","payload","payloadType","repeat","crontab","once","startDelay","parseFloat","name","injectType","node","addressSpaceItems","core","bianco","iiot","intervalId","createBiancoIIoT","assert","onceTimeout","REPEAT_FACTOR","ONE_SECOND","INPUT_TIMEOUT_MILLISECONDS","repeaterSetup","internalDebugLog","clearInterval","setInterval","cronjob","emit","CronJob","clearTimeout","resetAllTimer","on","msg","Object","nodetype","assign","Date","now","util","evaluateNodeProperty","send","err","error","verbose","timeout","parseInt","detailDebugLog","setTimeout","registerType","prototype","close","removeAllListeners","isInitializedBiancoIIoTNode","resetBiancoNode","httpAdmin","post","auth","needsPermission","req","res","getNode","params","id","receive","sendStatus","_","toString"],"mappings":"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","file":"../opcua-iiot-inject.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2013, 2016 IBM Corp. (node-red)\n All rights reserved.\n node-red-contrib-iiot-opcua\n **/\n'use strict'\n\n/**\n * Inject Node-RED node for OPC UA IIoT nodes.\n *\n * @param RED\n */\n\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreInject = require('./core/opcua-iiot-core-inject')\n  let cron = require('cron')\n\n  function OPCUAIIoTInject (config) {\n    RED.nodes.createNode(this, config)\n\n    this.topic = config.topic\n    this.payload = config.payload\n    this.payloadType = config.payloadType\n    this.repeat = config.repeat\n    this.crontab = config.crontab\n    this.once = config.once\n    this.startDelay = parseFloat(config.startDelay) || 10\n    this.name = config.name\n    this.injectType = config.injectType || 'inject'\n\n    this.addressSpaceItems = config.addressSpaceItems || []\n\n    let node = this\n    node.bianco = coreInject.core.createBiancoIIoT()\n    coreInject.core.assert(node.bianco.iiot)\n\n    node.bianco.iiot.intervalId = null\n    node.bianco.iiot.onceTimeout = null\n    node.bianco.iiot.cronjob = null\n    node.bianco.iiot.REPEAT_FACTOR = 1000.0\n    node.bianco.iiot.ONE_SECOND = 1000\n    node.bianco.iiot.INPUT_TIMEOUT_MILLISECONDS = 1000\n\n    node.bianco.iiot.repeaterSetup = function () {\n      coreInject.internalDebugLog('Repeat Is ' + node.repeat)\n      coreInject.internalDebugLog('Crontab Is ' + node.crontab)\n\n      if (node.repeat !== '') {\n        node.repeat = parseFloat(config.repeat) * node.bianco.iiot.REPEAT_FACTOR\n\n        if (node.repeat === 0) {\n          node.repeat = node.bianco.iiot.ONE_SECOND\n        }\n\n        coreInject.internalDebugLog('Repeat Interval Start With ' + node.repeat + ' msec.')\n\n        if (node.bianco.iiot.intervalId) {\n          clearInterval(node.bianco.iiot.intervalId)\n        }\n\n        node.bianco.iiot.intervalId = setInterval(function () {\n          node.emit('input', {})\n        }, node.repeat)\n      } else if (node.crontab !== '') {\n        node.bianco.iiot.cronjob = new cron.CronJob(node.crontab,\n          function () {\n            node.emit('input', {})\n          },\n          null,\n          true)\n      }\n    }\n\n    node.bianco.iiot.resetAllTimer = function () {\n      if (node.bianco.iiot.onceTimeout) {\n        clearTimeout(node.bianco.iiot.onceTimeout)\n        node.bianco.iiot.onceTimeout = null\n      }\n\n      if (node.bianco.iiot.intervalId) {\n        clearInterval(node.bianco.iiot.intervalId)\n        node.bianco.iiot.intervalId = null\n      }\n    }\n\n    node.on('input', function (msg) {\n      try {\n        msg.topic = node.topic\n        msg.nodetype = 'inject'\n        msg.injectType = node.injectType\n        msg.addressSpaceItems = []\n        Object.assign(msg.addressSpaceItems, node.addressSpaceItems)\n\n        switch (node.payloadType) {\n          case 'none':\n            msg.payload = ''\n            break\n          case 'bool':\n            msg.payload = (node.payload === true || node.payload === 'true')\n            break\n          case 'json':\n            msg.payload = JSON.parse(node.payload)\n            break\n          case 'date':\n            msg.payload = Date.now()\n            break\n          default:\n            if (node.payloadType === null) {\n              /* istanbul ignore next */\n              if (node.payload === '') {\n                msg.payload = Date.now()\n              } else {\n                msg.payload = RED.util.evaluateNodeProperty(node.payload, node.payloadType, node, msg)\n              }\n            } else {\n              msg.payload = RED.util.evaluateNodeProperty(node.payload, node.payloadType, node, msg)\n            }\n        }\n\n        node.send(msg)\n      } catch (err) {\n        /* istanbul ignore next */\n        if (RED.settings.verbose) {\n          node.error(err, msg)\n        }\n      }\n    })\n\n    if (node.bianco.iiot.onceTimeout) {\n      clearTimeout(node.bianco.iiot.onceTimeout)\n      node.bianco.iiot.onceTimeout = null\n    }\n    let timeout = parseInt(node.bianco.iiot.INPUT_TIMEOUT_MILLISECONDS * node.startDelay)\n\n    if (node.once) {\n      coreInject.detailDebugLog('injecting once at start delay timeout ' + timeout + ' msec.')\n      node.bianco.iiot.onceTimeout = setTimeout(function () {\n        coreInject.detailDebugLog('injecting once at start')\n        node.emit('input', {})\n        node.bianco.iiot.repeaterSetup()\n      }, timeout)\n    } else if (node.repeat || node.crontab) {\n      coreInject.detailDebugLog('start with delay timeout ' + timeout + ' msec.')\n      node.bianco.iiot.onceTimeout = setTimeout(function () {\n        coreInject.detailDebugLog('had a start delay of ' + timeout + ' msec. to setup inject interval')\n        node.bianco.iiot.repeaterSetup()\n      }, timeout)\n    } else {\n      node.bianco.iiot.repeaterSetup()\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Inject', OPCUAIIoTInject)\n\n  OPCUAIIoTInject.prototype.close = function () {\n    let node = this\n    node.removeAllListeners()\n    if (coreInject.core.isInitializedBiancoIIoTNode(node)) {\n      if (node.bianco.iiot.cronjob) {\n        node.bianco.iiot.cronjob.stop()\n        delete node['cronjob']\n      }\n      coreInject.core.resetBiancoNode(node)\n    }\n  }\n\n  RED.httpAdmin.post('/opcuaIIoT/inject/:id', RED.auth.needsPermission('opcuaIIoT.inject.write'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n\n    if (node) {\n      try {\n        node.receive()\n        res.sendStatus(200)\n      } catch (err) {\n        /* istanbul ignore next */\n        res.sendStatus(500)\n        node.error(RED._('opcuaiiotinject.failed', { error: err.toString() }))\n      }\n    } else {\n      /* istanbul ignore next */\n      res.sendStatus(404)\n    }\n  })\n}\n"]}