{"version":3,"sources":["opcua-iiot-listener.js"],"names":["module","exports","RED","require","install","coreListener","_","nodes","registerType","config","Map","this","action","queueSize","name","topic","OPCUAIIoTListener","createNode","justValue","useGroupItems","showStatusActivities","showErrors","getNode","connector","node","initListenerNode","AttributeIds","StatusCodes","stateMachine","core","createStatelyMachine","getMachineState","iiot","getMachineEvents","detailDebugLog","msg","bianco","internalDebugLog","opcuaSubscription","requestinitsub","payload","listenerParameters","options","dynamicOptions","monitoringOptions","getSubscriptionParameters","timeMilliseconds","makeSubscription","eventOptions","getEventSubscribtionParameters","createSubscription","setSubscriptionEvents","subscription","on","setNodeStatusTo","clear","idlesub","err","message","errorsub","resetSubscription","monitoredItem","updateSubscriptionStatus","parameters","checkSessionNotValid","opcuaSession","JSON","stringify","nodeOPCUA","hasOpcUaSubscriptions","initsub","sendAllMonitoredItems","addressSpaceItems","value","nodeId","key","datatypeName","monitoredItems","monitoredASO","messageQueue","push","subscribeEventsInput","RUNNING_STATE","subscribeMonitoredEvent","size","handleMonitoringOfGroupedItems","monitoredItemGroup","groupId","terminate","buildNewMonitoredItemGroup","then","result","uniqueId","subscribeDebugLog","handleMonitoringOfItems","itemsToMonitor","filter","addressSpaceItem","toString","get","nodeIdToMonitor","itemsToTerminate","monitorMessage","Object","assign","length","monitorItems","item","itemToMonitor","forEach","subscribeMonitoredItem","checkState","handleEventSubscriptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_loop","_step","eventDebugLog","v","isInitializedBiancoIIoTNode","eventMessage","buildNewEventItem","monitoredItemId","set","catch","_ret","_typeof","_iterator","return","error","monitoredItemTerminated","updateMonitoredItemLists","has","delete","isNodeId","map","setMonitoring","monitoredItemToSet","dataValue","sendDataFromEvent","isSessionBad","emit","removeAllListeners","monitoringParameters","injectType","warn","handleEventResults","eventResults","eventDetailDebugLog","sendDataFromMonitoredItem","dataValuesString","util","setMessageProperty","parse","nodetype","analyzeEvent","getBrowseName","errorHandling","terminateSubscription","session","callback","client","read","readValue","statusCode","Good","browseName","handleListenerInput","Error","checkConnectorState","buildNodesToListen","registerToConnector","terminatesub","done","deregisterToConnector","event","oldState","newState","onREQUESTED","onSTARTED","shift","onERROR"],"mappings":"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","file":"../opcua-iiot-listener.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Listener Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n  let Map = require('es6-map')\n  const _ = require('underscore')\n\n  function OPCUAIIoTListener (config) {\n    RED.nodes.createNode(this, config)\n    this.action = config.action\n    this.queueSize = config.queueSize || 1\n    this.name = config.name\n    this.topic = config.topic\n    this.justValue = config.justValue\n    this.useGroupItems = config.useGroupItems\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreListener.initListenerNode(this)\n    coreListener.core.assert(node.bianco.iiot)\n\n    const StatusCodes = coreListener.core.nodeOPCUA.StatusCodes\n    const AttributeIds = coreListener.core.nodeOPCUA.AttributeIds\n\n    node.bianco.iiot.stateMachine = coreListener.createStatelyMachine()\n    coreListener.internalDebugLog('Start FSM: ' + node.bianco.iiot.stateMachine.getMachineState())\n    coreListener.detailDebugLog('FSM events:' + node.bianco.iiot.stateMachine.getMachineEvents())\n\n    node.bianco.iiot.createSubscription = function (msg) {\n      if (node.bianco.iiot.stateMachine.getMachineState() !== 'IDLE') {\n        coreListener.internalDebugLog('New Subscription Request On State ' + node.bianco.iiot.stateMachine.getMachineState())\n        return\n      }\n      coreListener.internalDebugLog('Create Subscription On State ' + node.bianco.iiot.stateMachine.getMachineState())\n      node.bianco.iiot.opcuaSubscription = null\n      node.bianco.iiot.stateMachine.requestinitsub()\n\n      const timeMilliseconds = (typeof msg.payload === 'number') ? msg.payload : null\n      const dynamicOptions = (msg.payload.listenerParameters) ? msg.payload.listenerParameters.options : msg.payload.options\n\n      if (node.action !== 'events') {\n        coreListener.internalDebugLog('create monitoring subscription')\n        const monitoringOptions = dynamicOptions || coreListener.getSubscriptionParameters(timeMilliseconds)\n        node.bianco.iiot.makeSubscription(monitoringOptions)\n      } else {\n        coreListener.internalDebugLog('create event subscription')\n        const eventOptions = dynamicOptions || coreListener.getEventSubscribtionParameters(timeMilliseconds)\n        node.bianco.iiot.makeSubscription(eventOptions)\n      }\n    }\n\n    node.bianco.iiot.setSubscriptionEvents = function (subscription) {\n      subscription.on('started', function () {\n        coreListener.internalDebugLog('Subscription started')\n        coreListener.core.setNodeStatusTo(node, 'started')\n        node.bianco.iiot.monitoredItems.clear()\n        node.bianco.iiot.stateMachine.startsub()\n      })\n\n      subscription.on('terminated', function () {\n        coreListener.internalDebugLog('Subscription terminated')\n        coreListener.core.setNodeStatusTo(node, 'terminated')\n        node.bianco.iiot.stateMachine.terminatesub().idlesub()\n        node.bianco.iiot.resetSubscription()\n      })\n\n      subscription.on('internal_error', function (err) {\n        coreListener.internalDebugLog('internal_error: ' + err.message)\n        if (node.showErrors) {\n          node.error(err, { payload: 'Internal Error' })\n        }\n        coreListener.core.setNodeStatusTo(node, 'error')\n        node.bianco.iiot.stateMachine.errorsub()\n        node.bianco.iiot.resetSubscription()\n      })\n\n      subscription.on('item_added', function (monitoredItem) {\n        node.bianco.iiot.setMonitoring(monitoredItem)\n        node.bianco.iiot.updateSubscriptionStatus()\n      })\n    }\n\n    node.bianco.iiot.makeSubscription = function (parameters) {\n      if (coreListener.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'ListenerSubscription')) {\n        return\n      }\n\n      if (!parameters) {\n        coreListener.internalDebugLog('Subscription Parameters Not Valid')\n        return\n      } else {\n        coreListener.internalDebugLog('Subscription Parameters: ' + JSON.stringify(parameters))\n      }\n\n      node.bianco.iiot.opcuaSubscription = new coreListener.core.nodeOPCUA.ClientSubscription(node.bianco.iiot.opcuaSession, parameters)\n      coreListener.internalDebugLog('New Subscription Created')\n\n      if (node.connector) {\n        node.connector.bianco.iiot.hasOpcUaSubscriptions = true\n      }\n\n      node.bianco.iiot.setSubscriptionEvents(node.bianco.iiot.opcuaSubscription)\n      node.bianco.iiot.stateMachine.initsub()\n    }\n\n    node.bianco.iiot.resetSubscription = function () {\n      node.bianco.iiot.sendAllMonitoredItems('SUBSCRIPTION TERMINATED')\n    }\n\n    node.bianco.iiot.sendAllMonitoredItems = function (payload) {\n      let addressSpaceItems = []\n\n      node.bianco.iiot.monitoredASO.forEach(function (value, key) {\n        addressSpaceItems.push({ name: '', nodeId: key, datatypeName: '' })\n      })\n\n      node.send({ payload: payload, addressSpaceItems: addressSpaceItems })\n\n      node.bianco.iiot.monitoredItems.clear()\n      node.bianco.iiot.monitoredASO.clear()\n    }\n\n    node.bianco.iiot.subscribeActionInput = function (msg) {\n      if (node.bianco.iiot.stateMachine.getMachineState() !== coreListener.RUNNING_STATE) {\n        node.bianco.iiot.messageQueue.push(msg)\n      } else {\n        node.bianco.iiot.subscribeMonitoredItem(msg)\n      }\n    }\n\n    node.bianco.iiot.subscribeEventsInput = function (msg) {\n      if (node.bianco.iiot.stateMachine.getMachineState() !== coreListener.RUNNING_STATE) {\n        node.bianco.iiot.messageQueue.push(msg)\n      } else {\n        node.bianco.iiot.subscribeMonitoredEvent(msg)\n      }\n    }\n\n    node.bianco.iiot.updateSubscriptionStatus = function () {\n      coreListener.internalDebugLog('listening' + ' (' + node.bianco.iiot.monitoredItems.size + ')')\n      coreListener.core.setNodeStatusTo(node, 'listening' + ' (' + node.bianco.iiot.monitoredItems.size + ')')\n    }\n\n    node.bianco.iiot.handleMonitoringOfGroupedItems = function (msg) {\n      if (node.bianco.iiot.monitoredItemGroup && node.bianco.iiot.monitoredItemGroup.groupId !== null) {\n        node.bianco.iiot.monitoredItemGroup.terminate(function (err) {\n          if (err) {\n            coreListener.internalDebugLog('Monitoring Terminate Error')\n            coreListener.internalDebugLog(err)\n          }\n          node.bianco.iiot.monitoredItems.clear()\n          node.bianco.iiot.monitoredASO.clear()\n          node.bianco.iiot.monitoredItemGroup.groupId = null\n          node.bianco.iiot.updateSubscriptionStatus()\n        })\n      } else {\n        coreListener.buildNewMonitoredItemGroup(node, msg, msg.addressSpaceItems, node.bianco.iiot.opcuaSubscription)\n          .then(function (result) {\n            if (!result.monitoredItemGroup) {\n              node.error(new Error('No Monitored Item Group In Result Of NodeOPCUA'))\n            } else {\n              result.monitoredItemGroup.groupId = _.uniqueId('group_')\n              node.bianco.iiot.monitoredItemGroup = result.monitoredItemGroup\n            }\n          }).catch(function (err) {\n            coreListener.subscribeDebugLog('Monitoring Build Item Group Error')\n            coreListener.subscribeDebugLog(err)\n            if (node.showErrors) {\n              node.error(err, msg)\n            }\n          })\n      }\n    }\n\n    node.bianco.iiot.handleMonitoringOfItems = function (msg) {\n      const itemsToMonitor = msg.addressSpaceItems.filter(addressSpaceItem => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof node.bianco.iiot.monitoredASO.get(nodeIdToMonitor) === 'undefined'\n      })\n\n      const itemsToTerminate = msg.addressSpaceItems.filter(addressSpaceItem => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof node.bianco.iiot.monitoredASO.get(nodeIdToMonitor) !== 'undefined'\n      })\n\n      if (itemsToMonitor.length > 0) {\n        const monitorMessage = Object.assign({}, msg)\n        monitorMessage.addressSpaceItems = itemsToMonitor\n        coreListener.subscribeDebugLog('itemsToMonitor ' + itemsToMonitor.length)\n        coreListener.monitorItems(node, monitorMessage, node.bianco.iiot.opcuaSubscription)\n      }\n\n      if (itemsToTerminate.length > 0) {\n        coreListener.subscribeDebugLog('itemsToTerminate ' + itemsToTerminate.length)\n        itemsToTerminate.forEach((addressSpaceItem) => {\n          const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n          const item = node.bianco.iiot.monitoredASO.get(nodeIdToMonitor)\n          if (item && item.monitoredItem) {\n            coreListener.subscribeDebugLog('Monitored Item Unsubscribe ' + nodeIdToMonitor)\n            item.monitoredItem.terminate(function (err) {\n              coreListener.subscribeDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n              node.bianco.iiot.monitoredItemTerminated(msg, item.monitoredItem, nodeIdToMonitor, err)\n            })\n          } else {\n            coreListener.subscribeDebugLog('Monitored Item Was Not Monitoring ' + nodeIdToMonitor)\n          }\n        })\n      }\n    }\n\n    node.bianco.iiot.subscribeMonitoredItem = function (msg) {\n      if (coreListener.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'MonitorListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(node, msg, 'Monitoring')) {\n        return\n      }\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n      if (msg.addressSpaceItems.length) {\n        if (node.useGroupItems) {\n          node.bianco.iiot.handleMonitoringOfGroupedItems(msg)\n        } else {\n          node.bianco.iiot.handleMonitoringOfItems(msg)\n        }\n      }\n    }\n\n    node.bianco.iiot.handleEventSubscriptions = function (msg) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      for (let addressSpaceItem of msg.addressSpaceItems) {\n        if (!addressSpaceItem.nodeId) {\n          coreListener.eventDebugLog('Address Space Item Not Valid to Monitor Event Of ' + addressSpaceItem)\n          return\n        }\n\n        if (addressSpaceItem.datatypeName === 'ns=0;i=0') {\n          coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        let nodeIdToMonitor\n        if (typeof addressSpaceItem.nodeId === 'string') {\n          nodeIdToMonitor = addressSpaceItem.nodeId\n        } else {\n          nodeIdToMonitor = addressSpaceItem.nodeId.toString()\n        }\n\n        const item = node.bianco.iiot.monitoredASO.get(nodeIdToMonitor)\n\n        if (!item) {\n          coreListener.eventDebugLog('Regsiter Event Item ' + nodeIdToMonitor)\n          coreListener.buildNewEventItem(nodeIdToMonitor, msg, node.bianco.iiot.opcuaSubscription)\n            .then(function (result) {\n              if (result.monitoredItem.monitoredItemId) {\n                coreListener.eventDebugLog('Event Item Regsitered ' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n                node.bianco.iiot.monitoredASO.set(result.nodeId.toString(), {\n                  monitoredItem: result.monitoredItem,\n                  topic: msg.topic || node.topic\n                })\n              }\n            }).catch(function (err) {\n              coreListener.eventDebugLog('Build Event Error')\n              coreListener.eventDebugLog(err)\n              if (node.showErrors) {\n                node.error(err, msg)\n              }\n            })\n        } else {\n          coreListener.eventDebugLog('Terminate Event Item' + nodeIdToMonitor)\n          const eventMessage = Object.assign({}, msg)\n          item.monitoredItem.terminate(function (err) {\n            coreListener.eventDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n            node.bianco.iiot.monitoredItemTerminated(eventMessage, item.monitoredItem, nodeIdToMonitor, err)\n          })\n        }\n      }\n    }\n\n    node.bianco.iiot.subscribeMonitoredEvent = function (msg) {\n      if (coreListener.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'EventListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(node, msg, 'Event')) {\n        return\n      }\n      if (coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.handleEventSubscriptions(msg)\n      }\n    }\n\n    node.bianco.iiot.monitoredItemTerminated = function (msg, monitoredItem, nodeId, err) {\n      if (err) {\n        if (monitoredItem && monitoredItem.monitoredItemId) {\n          coreListener.internalDebugLog(err.message + ' on ' + monitoredItem.monitoredItemId)\n        } else {\n          coreListener.internalDebugLog(err.message + ' on monitoredItem')\n        }\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n      if (coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.updateMonitoredItemLists(monitoredItem, nodeId)\n      }\n    }\n\n    node.bianco.iiot.updateMonitoredItemLists = function (monitoredItem, nodeId) {\n      coreListener.internalDebugLog('updateMonitoredItemLists = UMIL')\n\n      if (monitoredItem && monitoredItem.itemToMonitor) {\n        if (node.bianco.iiot.monitoredItems.has(monitoredItem.monitoredItemId)) {\n          node.bianco.iiot.monitoredItems.delete(monitoredItem.monitoredItemId)\n        }\n\n        if (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n          coreListener.internalDebugLog('UMIL Terminate Monitored Item ' + monitoredItem.itemToMonitor.nodeId)\n          if (node.bianco.iiot.monitoredASO.has(nodeId)) {\n            node.bianco.iiot.monitoredASO.delete(nodeId)\n          }\n        } else {\n          coreListener.internalDebugLog('UMIL monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n          node.bianco.iiot.monitoredASO.forEach(function (value, key, map) {\n            coreListener.internalDebugLog('UMIL monitoredItem removing from ASO list key:' + key + ' value ' + value.monitoredItem.monitoredItemId)\n            if (value.monitoredItem.monitoredItemId && value.monitoredItem.monitoredItemId === monitoredItem.monitoredItemId) {\n              coreListener.internalDebugLog('UMIL monitoredItem removed from ASO list' + key)\n              map.delete(key)\n            }\n          })\n        }\n\n        node.bianco.iiot.updateSubscriptionStatus()\n      }\n    }\n\n    node.bianco.iiot.setMonitoring = function (monitoredItemToSet) {\n      const monitoredItem = monitoredItemToSet\n      if (!monitoredItem || monitoredItem.monitoredItemId === void 0) {\n        coreListener.internalDebugLog('monitoredItem Id from server is not valid Id: ' + monitoredItem.monitoredItemId)\n        return\n      }\n\n      if (!coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n        coreListener.internalDebugLog('monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n      }\n\n      coreListener.internalDebugLog('add monitoredItem to list Id:' + monitoredItem.monitoredItemId + ' nodeId: ' + monitoredItem.itemToMonitor.nodeId)\n      node.bianco.iiot.monitoredItems.set(monitoredItem.monitoredItemId, monitoredItem)\n\n      monitoredItem.on('initialized', function () {\n        coreListener.internalDebugLog('monitoredItem ' + monitoredItem.itemToMonitor.nodeId + ' initialized on ' + monitoredItem.monitoredItemId)\n      })\n\n      monitoredItem.on('changed', function (dataValue) {\n        coreListener.detailDebugLog('data changed for item: ' + monitoredItem.itemToMonitor.nodeId + ' with Id ' + monitoredItem.monitoredItemId)\n        if (!monitoredItem.monitoringParameters.filter) {\n          node.bianco.iiot.sendDataFromMonitoredItem(monitoredItem, dataValue)\n        } else {\n          node.bianco.iiot.sendDataFromEvent(monitoredItem, dataValue)\n        }\n      })\n\n      monitoredItem.on('error', function (err) {\n        coreListener.internalDebugLog('monitoredItem Error: ' + err.message + ' on ' + monitoredItem.monitoredItemId)\n        if (node.showErrors) {\n          node.error(err, { payload: 'Monitored Item Error', monitoredItem: monitoredItem })\n        }\n\n        node.bianco.iiot.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n\n        if (coreListener.core.isSessionBad(err)) {\n          node.bianco.iiot.sendAllMonitoredItems('BAD SESSION')\n          node.bianco.iiot.terminateSubscription(() => {\n            node.emit('opcua_client_not_ready')\n          })\n        }\n      })\n\n      monitoredItem.on('terminated', function () {\n        monitoredItem.removeAllListeners()\n        coreListener.internalDebugLog('Terminated For ' + monitoredItem.monitoredItemId)\n        node.bianco.iiot.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n      })\n    }\n\n    node.bianco.iiot.sendDataFromMonitoredItem = function (monitoredItem, dataValue) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid'\n      const item = node.bianco.iiot.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : node.topic\n\n      let msg = {\n        payload: {},\n        topic: topic,\n        addressSpaceItems: [{ name: '', nodeId, datatypeName: '' }],\n        nodetype: 'listen',\n        injectType: 'subscribe'\n      }\n\n      coreListener.internalDebugLog('sendDataFromMonitoredItem: ' + msg.addressSpaceItems[0].nodeId)\n\n      let dataValuesString = {}\n      msg.justValue = node.justValue\n      if (node.justValue) {\n        dataValuesString = JSON.stringify(dataValue, null, 2)\n        try {\n          RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for monitored item')\n            node.error(err, msg)\n          }\n\n          msg.payload = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = { dataValue, monitoredItem }\n      }\n\n      node.send(msg)\n    }\n\n    node.bianco.iiot.handleEventResults = function (msg, dataValue, eventResults, monitoredItem) {\n      coreListener.eventDetailDebugLog('Monitored Event Results ' + eventResults)\n\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify({ dataValue: dataValue }, null, 2)\n        try {\n          RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for monitored item')\n            node.error(err, msg)\n          }\n\n          msg.payload = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = { dataValue, eventResults, monitoredItem }\n      }\n\n      node.send(msg)\n    }\n\n    node.bianco.iiot.sendDataFromEvent = function (monitoredItem, dataValue) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid'\n      const item = node.bianco.iiot.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : node.topic\n\n      let msg = {\n        payload: {},\n        topic: topic || node.topic, // default if item.topic is empty\n        addressSpaceItems: [{ name: '', nodeId: nodeId, datatypeName: '' }],\n        nodetype: 'listen',\n        injectType: 'event'\n      }\n\n      coreListener.analyzeEvent(node.bianco.iiot.opcuaSession, node.bianco.iiot.getBrowseName, dataValue)\n        .then(function (eventResults) {\n          node.bianco.iiot.handleEventResults(msg, dataValue, eventResults, monitoredItem)\n        }).catch(function (err) {\n          (coreListener.core.isInitializedBiancoIIoTNode(node)) ? node.bianco.iiot.errorHandling(err) : coreListener.internalDebugLog(err.message)\n        })\n    }\n\n    node.bianco.iiot.errorHandling = function (err) {\n      coreListener.internalDebugLog('Basic Error Handling')\n      coreListener.internalDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, { payload: 'Error Handling' })\n      }\n\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      if (err) {\n        if (coreListener.core.isSessionBad(err)) {\n          node.bianco.iiot.sendAllMonitoredItems('BAD SESSION')\n          node.bianco.iiot.terminateSubscription(() => {\n            node.emit('opcua_client_not_ready')\n          })\n        }\n      }\n    }\n\n    node.bianco.iiot.getBrowseName = function (session, nodeId, callback) {\n      coreListener.client.read(session, [{\n        nodeId: nodeId,\n        attributeId: AttributeIds.BrowseName\n      }], function (err, org, readValue) {\n        if (!err) {\n          if (readValue[0].statusCode === StatusCodes.Good) {\n            let browseName = readValue[0].value.value.name\n            if (callback) {\n              callback(null, browseName)\n            }\n          }\n        } else {\n          if (callback) {\n            callback(err, 'Unknown')\n          }\n        }\n      })\n    }\n\n    node.bianco.iiot.handleListenerInput = function (msg) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      switch (node.action) {\n        case 'subscribe':\n          node.bianco.iiot.subscribeMonitoredItem(msg)\n          break\n        case 'events':\n          node.bianco.iiot.subscribeMonitoredEvent(msg)\n          break\n        default:\n          node.error(new Error('Type Of Action To Listener Is Not Valid'), msg)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        return\n      }\n\n      if (!coreListener.core.checkConnectorState(node, msg, 'Listener')) {\n        return\n      }\n\n      if (msg.nodetype === 'browse') { /* browse is just to address listening to many nodes */\n        msg.nodetype = 'inject'\n        msg.injectType = 'listen'\n        msg.addressSpaceItems = coreListener.core.buildNodesToListen(msg)\n      }\n\n      if (!msg.addressSpaceItems || !msg.addressSpaceItems.length) {\n        coreListener.subscribeDebugLog('Address-Space-Item Set Not Valid')\n        if (node.showErrors) {\n          node.error(new Error('Address-Space-Item Set Not Valid'), msg)\n        }\n        return\n      }\n\n      if (node.bianco.iiot.stateMachine.getMachineState() === 'IDLE') {\n        node.bianco.iiot.messageQueue.push(msg)\n        node.bianco.iiot.createSubscription(msg)\n      } else {\n        if (!coreListener.checkState(node, msg, 'Input')) {\n          node.bianco.iiot.messageQueue.push(msg)\n          return\n        }\n        node.bianco.iiot.handleListenerInput(msg)\n      }\n    })\n\n    coreListener.core.registerToConnector(node)\n\n    if (node.connector) {\n      node.connector.on('connector_init', () => {\n        if (node.bianco && node.bianco.iiot) {\n          coreListener.internalDebugLog('Reset Subscription On Connector Init')\n          node.bianco.iiot.opcuaSubscription = null\n          node.bianco.iiot.monitoredItems = new Map()\n          node.bianco.iiot.monitoredASO = new Map()\n          node.bianco.iiot.stateMachine = coreListener.createStatelyMachine()\n          node.bianco.iiot.monitoredItemGroup = null\n        }\n      })\n\n      node.connector.on('connection_stopped', () => {\n        if (node.bianco && node.bianco.iiot) {\n          node.bianco.iiot.terminateSubscription(() => {\n            node.bianco.iiot.opcuaSubscription = null\n            coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection stopped')\n          })\n        }\n      })\n\n      node.connector.on('connection_end', () => {\n        if (node.bianco && node.bianco.iiot) {\n          node.bianco.iiot.terminateSubscription(() => {\n            node.bianco.iiot.opcuaSubscription = null\n            coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection ends')\n          })\n        }\n      })\n\n      node.connector.on('connection_reconfigure', () => {\n        if (node.bianco && node.bianco.iiot) {\n          node.bianco.iiot.terminateSubscription(() => {\n            node.bianco.iiot.opcuaSubscription = null\n            coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection reconfigure')\n          })\n        }\n      })\n\n      node.connector.on('connection_renew', () => {\n        if (node.bianco && node.bianco.iiot) {\n          node.bianco.iiot.terminateSubscription(() => {\n            node.bianco.iiot.opcuaSubscription = null\n            coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection renew')\n          })\n        }\n      })\n    }\n\n    node.bianco.iiot.terminateSubscription = function (done) {\n      if (!coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        done()\n        return\n      }\n\n      if (node.bianco.iiot.opcuaSubscription && node.bianco.iiot.stateMachine.getMachineState() === coreListener.RUNNING_STATE) {\n        node.bianco.iiot.stateMachine.terminatesub()\n        node.bianco.iiot.opcuaSubscription.terminate(() => {\n          node.bianco.iiot.opcuaSubscription.removeAllListeners()\n          node.bianco.iiot.stateMachine.idlesub()\n          done()\n        })\n      } else {\n        node.bianco.iiot.stateMachine.idlesub()\n        done()\n      }\n    }\n\n    node.on('close', function (done) {\n      node.removeAllListeners()\n      if (coreListener.core.isInitializedBiancoIIoTNode(node)) {\n        node.bianco.iiot.terminateSubscription(() => {\n          node.removeAllListeners()\n          node.bianco.iiot.opcuaSubscription = null\n          coreListener.core.deregisterToConnector(node, () => {\n            coreListener.core.resetBiancoNode(node)\n            done()\n          })\n          coreListener.internalDebugLog('Close Listener Node')\n        })\n      } else {\n        done()\n      }\n    })\n\n    /* #########   FSM EVENTS  #########     */\n\n    node.bianco.iiot.stateMachine.onIDLE = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener IDLE Event FSM')\n    }\n\n    node.bianco.iiot.stateMachine.onREQUESTED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener REQUESTED Event FSM')\n    }\n\n    node.bianco.iiot.stateMachine.onINIT = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener INIT Event FSM')\n    }\n\n    node.bianco.iiot.stateMachine.onSTARTED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener STARTED Event FSM')\n\n      switch (node.action) {\n        case 'subscribe':\n          while (node.bianco.iiot.messageQueue.length > 0) {\n            node.bianco.iiot.subscribeMonitoredItem(node.bianco.iiot.messageQueue.shift())\n          }\n          break\n        case 'events':\n          while (node.bianco.iiot.messageQueue.length > 0) {\n            node.bianco.iiot.subscribeMonitoredEvent(node.bianco.iiot.messageQueue.shift())\n          }\n          break\n        default:\n          coreListener.internalDebugLog('Unknown Action Type ' + node.action)\n      }\n    }\n\n    node.bianco.iiot.stateMachine.onTERMINATED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener TERMINATED Event FSM')\n    }\n\n    node.bianco.iiot.stateMachine.onERROR = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener ERROR Event FSM')\n    }\n\n    node.bianco.iiot.stateMachine.onEND = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener END Event FSM')\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Listener', OPCUAIIoTListener)\n}\n"]}