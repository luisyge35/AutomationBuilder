{"version":3,"sources":["opcua-iiot-browser.js"],"names":["module","exports","RED","require","install","coreBrowser","nodes","registerType","config","OPCUAIIoTBrowser","this","nodeId","name","justValue","sendNodesToRead","sendNodesToBrowser","sendNodesToListener","singleBrowseResult","showStatusActivities","showErrors","recursiveBrowse","recursiveDepth","delayPerMessage","node","initBrowserNode","connector","delayMessageTimer","core","assert","bianco","iiot","extractDataFromBrowserResults","browserResultsToFilter","lists","length","forEach","browserResultToFilter","result","reference","references","detailDebugLog","transformToEntry","push","toString","nodesToRead","addressItemList","browseName","displayName","nodeClass","addressSpaceItemList","concat","browse","rootNodeId","msg","depth","callback","checkSessionNotValid","opcuaSession","internalDebugLog","browserResults","newDepth","subLists","createListsObject","rootNode","browseNodeList","browseErrorHandling","err","nodesToBrowse","browseAddressSpaceItems","catch","sendMessage","originMessage","Object","assign","nodetype","listenerParameters","getListenParameters","payload","recursiveDepthMax","setMessageLists","messageList","status","text","setNodeStatusTo","FAKTOR_SEC_TO_MSEC","send","shift","clearTimeout","timerId","injectType","browseTopic","browserResultsCount","addressSpaceItems","endpoint","session","addressItemsToRead","addressItemsToBrowse","browseSendResult","reset","browseWithAddressSpaceItems","browseToRoot","startBrowser","extractNodeIdFromTopic","on","checkConnectorState","registerToConnector","deregisterToConnector","httpAdmin","get","auth","needsPermission","req","res","getNode","params","id","entries","nodeRootId","decodeURIComponent","OBJECTS_ROOT","then","browserResult","json"],"mappings":"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","file":"../opcua-iiot-browser.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018,2019 - Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Browser Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreBrowser = require('./core/opcua-iiot-core-browser')\n\n  function OPCUAIIoTBrowser (config) {\n    RED.nodes.createNode(this, config)\n\n    this.nodeId = config.nodeId\n    this.name = config.name\n    this.justValue = config.justValue\n    this.sendNodesToRead = config.sendNodesToRead\n    this.sendNodesToBrowser = config.sendNodesToBrowser\n    this.sendNodesToListener = config.sendNodesToListener\n    this.singleBrowseResult = config.singleBrowseResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.recursiveBrowse = config.recursiveBrowse\n    this.recursiveDepth = config.recursiveDepth || 1\n    this.delayPerMessage = config.delayPerMessage || 0.2\n\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreBrowser.initBrowserNode(this)\n    coreBrowser.core.assert(node.bianco.iiot)\n    node.bianco.iiot.delayMessageTimer = []\n\n    node.bianco.iiot.extractDataFromBrowserResults = (browserResultsToFilter, lists) => {\n      lists.addressItemList = []\n      if (!browserResultsToFilter || !browserResultsToFilter.length) {\n        return\n      }\n      browserResultsToFilter.forEach(browserResultToFilter => {\n        if (!browserResultToFilter || !browserResultToFilter.length) {\n          return\n        }\n        browserResultToFilter.forEach(function (result) {\n          result.references.forEach(function (reference) {\n            coreBrowser.detailDebugLog('Add Reference To List :' + reference)\n            lists.browserResults.push(coreBrowser.transformToEntry(reference))\n\n            if (reference.nodeId) {\n              lists.nodesToRead.push(reference.nodeId.toString())\n              lists.addressItemList.push({\n                nodeId: reference.nodeId.toString(),\n                browseName: reference.browseName.toString(),\n                displayName: reference.displayName.toString(),\n                nodeClass: reference.nodeClass.toString(),\n                datatypeName: reference.typeDefinition.toString()\n              })\n            }\n          })\n        })\n      })\n\n      lists.addressSpaceItemList = lists.addressSpaceItemList.concat(lists.addressItemList)\n    }\n\n    node.bianco.iiot.browse = function (rootNodeId, msg, depth, lists, callback) {\n      if (coreBrowser.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'Browse')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse Topic To Call Browse ' + rootNodeId)\n      let rootNode = 'list'\n\n      coreBrowser.browse(node.bianco.iiot.opcuaSession, rootNodeId)\n        .then(function (browserResults) {\n          if (browserResults && browserResults.length) {\n            coreBrowser.detailDebugLog('Browser Results Count: ' + browserResults.length)\n            node.bianco.iiot.extractDataFromBrowserResults(browserResults, lists)\n            if (node.recursiveBrowse) {\n              if (depth > 0) {\n                let newDepth = depth - 1\n\n                let subLists = node.bianco.iiot.createListsObject()\n                if (!node.singleBrowseResult) {\n                  callback(rootNode, depth, msg, lists)\n                } else {\n                  subLists = lists\n                }\n\n                node.bianco.iiot.browseNodeList(lists.addressItemList, msg, newDepth, subLists, callback)\n              } else {\n                coreBrowser.internalDebugLog('Minimum Depth Reached On Browse At ' + rootNodeId)\n                callback(rootNodeId, depth, msg, lists)\n              }\n            } else {\n              callback(rootNodeId, depth, msg, lists)\n            }\n          } else {\n            coreBrowser.internalDebugLog('No Browse Results On ' + rootNodeId)\n          }\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg, lists)\n        })\n    }\n\n    node.bianco.iiot.createListsObject = () => {\n      return {\n        nodesToBrowse: [],\n        nodesToRead: [],\n        addressItemList: [],\n        addressSpaceItemList: [],\n        browserResults: []\n      }\n    }\n\n    node.bianco.iiot.browseNodeList = function (addressSpaceItems, msg, depth, lists, callback) {\n      if (coreBrowser.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'BrowseList')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse For NodeId List')\n      let rootNode = 'list'\n\n      if (node.bianco.iiot.opcuaSession) {\n        coreBrowser.browseAddressSpaceItems(node.bianco.iiot.opcuaSession, addressSpaceItems)\n          .then(function (browserResults) {\n            coreBrowser.detailDebugLog('List Browser Result To String: ' + browserResults.toString())\n            node.bianco.iiot.extractDataFromBrowserResults(browserResults, lists)\n            if (node.recursiveBrowse) {\n              if (depth > 0) {\n                let newDepth = depth - 1\n\n                let subLists = node.bianco.iiot.createListsObject()\n                if (!node.singleBrowseResult) {\n                  callback(rootNode, depth, msg, lists)\n                } else {\n                  subLists = lists\n                }\n                node.bianco.iiot.browseNodeList(lists.addressItemList, msg, newDepth, subLists, callback)\n              } else {\n                coreBrowser.internalDebugLog('Minimum Depth Reached On Browse List')\n                callback(rootNode, depth, msg, lists)\n              }\n            } else {\n              callback(rootNode, depth, msg, lists)\n            }\n          }).catch(function (err) {\n            coreBrowser.browseErrorHandling(node, err, msg, lists)\n          })\n      }\n    }\n\n    node.bianco.iiot.sendMessage = function (rootNodeId, depth, originMessage, lists) {\n      let msg = Object.assign({}, originMessage)\n      msg.nodetype = 'browse'\n      msg.justValue = node.justValue\n\n      if (!lists) {\n        coreBrowser.internalDebugLog('Lists Not Valid!')\n        if (node.showErrors) {\n          node.error(new Error('Lists Not Valid On Browse Send Message'), msg)\n        }\n      }\n\n      let listenerParameters = node.bianco.iiot.getListenParameters(msg)\n\n      msg.payload = {\n        rootNodeId,\n        browserResults: lists.browserResults,\n        recursiveBrowse: node.recursiveBrowse,\n        recursiveDepth: depth,\n        recursiveDepthMax: node.recursiveDepth,\n        listenerParameters\n      }\n\n      msg = node.bianco.iiot.enhanceMessage(msg, lists)\n      msg = node.bianco.iiot.setMessageLists(msg, lists)\n\n      node.bianco.iiot.messageList.push(msg)\n\n      if (node.showStatusActivities && node.status.text !== 'active') {\n        coreBrowser.core.setNodeStatusTo(node, 'active')\n      }\n\n      node.bianco.iiot.delayMessageTimer.push(setTimeout(() => {\n        node.send(node.bianco.iiot.messageList.shift())\n      }, node.delayPerMessage * coreBrowser.core.FAKTOR_SEC_TO_MSEC))\n    }\n\n    node.bianco.iiot.resetAllTimer = function () {\n      node.bianco.iiot.delayMessageTimer.forEach((timerId) => {\n        clearTimeout(timerId)\n        timerId = null\n      })\n    }\n\n    node.bianco.iiot.getListenParameters = function (msg) {\n      if (msg.injectType === 'listen') {\n        return msg.payload\n      } else {\n        return null\n      }\n    }\n\n    node.bianco.iiot.enhanceMessage = function (msg, lists) {\n      if (!node.justValue) {\n        msg.payload.browseTopic = node.browseTopic\n        msg.payload.addressSpaceItems = msg.addressSpaceItems\n        msg.payload.browserResultsCount = lists.browserResults.length\n        if (node.connector) {\n          msg.payload.endpoint = node.connector.endpoint\n        }\n        msg.payload.session = (node.bianco.iiot.opcuaSession) ? node.bianco.iiot.opcuaSession.name : 'none'\n      } else {\n        msg.payload.browserResults = lists.addressSpaceItemList\n      }\n      return msg\n    }\n\n    node.bianco.iiot.setMessageLists = function (msg, lists) {\n      if (node.sendNodesToRead && lists.nodesToRead) {\n        msg.nodesToRead = lists.nodesToRead\n        msg.nodesToReadCount = lists.nodesToRead.length\n      }\n\n      if (node.sendNodesToListener && lists.addressSpaceItemList) {\n        msg.addressItemsToRead = lists.addressSpaceItemList\n        msg.addressItemsToReadCount = lists.addressSpaceItemList.length\n      }\n\n      if (node.sendNodesToBrowser && lists.addressSpaceItemList) {\n        msg.addressItemsToBrowse = lists.addressSpaceItemList\n        msg.addressItemsToBrowseCount = lists.addressSpaceItemList.length\n      }\n      return msg\n    }\n\n    node.bianco.iiot.browseSendResult = function (rootNodeId, depth, msg, lists) {\n      coreBrowser.internalDebugLog(rootNodeId + ' called by depth ' + depth)\n\n      if (node.singleBrowseResult) {\n        if (depth <= 0) {\n          node.bianco.iiot.sendMessage(rootNodeId, depth, msg, lists)\n          node.bianco.iiot.reset(lists)\n        }\n      } else {\n        node.bianco.iiot.sendMessage(rootNodeId, depth, msg, lists)\n        node.bianco.iiot.reset(lists)\n      }\n    }\n\n    node.bianco.iiot.reset = function (lists) {\n      lists = node.bianco.iiot.createListsObject()\n    }\n\n    node.bianco.iiot.browseWithAddressSpaceItems = function (msg, depth, lists) {\n      if (msg.addressItemsToBrowse && msg.addressItemsToBrowse.length > 0) {\n        msg.addressSpaceItems = msg.addressItemsToBrowse\n      }\n\n      if (msg.addressSpaceItems && msg.addressSpaceItems.length > 0) {\n        node.bianco.iiot.browseNodeList(msg.addressSpaceItems, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.bianco.iiot.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      } else {\n        coreBrowser.detailDebugLog('Fallback NodeId On Browse Without AddressSpace Items')\n        node.browseTopic = node.nodeId || coreBrowser.browseToRoot()\n        node.bianco.iiot.browse(node.browseTopic, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.bianco.iiot.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      }\n    }\n\n    node.bianco.iiot.startBrowser = function (msg) {\n      if (coreBrowser.core.checkSessionNotValid(node.bianco.iiot.opcuaSession, 'Browser')) {\n        return\n      }\n\n      let lists = node.bianco.iiot.createListsObject()\n      let depth = (node.recursiveBrowse) ? node.recursiveDepth : 0\n      node.browseTopic = coreBrowser.extractNodeIdFromTopic(msg, node) // set topic to the node object for HTTP requests at node\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        node.bianco.iiot.browse(node.browseTopic, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.bianco.iiot.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      } else {\n        node.bianco.iiot.browseWithAddressSpaceItems(msg, depth, lists)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreBrowser.core.checkConnectorState(node, msg, 'Browser')) {\n        return\n      }\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'browsing')\n      }\n      node.bianco.iiot.startBrowser(msg)\n    })\n\n    coreBrowser.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreBrowser.core.deregisterToConnector(node, () => {\n        coreBrowser.core.resetBiancoNode(node)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Browser', OPCUAIIoTBrowser)\n\n  RED.httpAdmin.get('/opcuaIIoT/browse/:id/:nodeId', RED.auth.needsPermission('opcuaIIoT.browse'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let entries = []\n    let nodeRootId = decodeURIComponent(req.params.nodeId) || coreBrowser.core.OBJECTS_ROOT\n    coreBrowser.detailDebugLog('request for ' + req.params.nodeId)\n\n    if (node.bianco.iiot.opcuaSession) {\n      coreBrowser.browse(node.bianco.iiot.opcuaSession, nodeRootId).then(function (browserResults) {\n        browserResults.forEach(browserResult => {\n          browserResult.forEach(function (result) {\n            if (result.references && result.references.length) {\n              result.references.forEach(function (reference) {\n                entries.push(coreBrowser.transformToEntry(reference))\n              })\n            }\n          })\n        })\n        res.json(entries)\n      }).catch(function (err) {\n        coreBrowser.internalDebugLog('Browser Error ' + err)\n        if (node.showErrors) {\n          node.error(err, { payload: 'Browse Internal Error' })\n        }\n\n        entries.push({\n          displayName: { text: 'Objects' },\n          nodeId: coreBrowser.core.OBJECTS_ROOT,\n          browseName: 'Objects'\n        })\n        res.json(entries)\n      })\n    } else {\n      res.json(entries)\n    }\n  })\n}\n"]}