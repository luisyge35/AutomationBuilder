"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}module.exports=function(n){require("source-map-support").install();var s=require("./core/opcua-iiot-core-client");n.nodes.registerType("OPCUA-IIoT-Write",function(e){n.nodes.createNode(this,e),this.name=e.name,this.justValue=e.justValue,this.showStatusActivities=e.showStatusActivities,this.showErrors=e.showErrors,this.connector=n.nodes.getNode(e.connector);var r=s.core.initClientNode(this);s.core.assert(r.bianco.iiot),r.bianco.iiot.handleWriteError=function(e,t){s.writeDebugLog(e),r.showErrors&&r.error(e,t),s.core.isSessionBad(e)&&r.emit("opcua_client_not_ready")},r.bianco.iiot.writeToSession=function(e,t){if(!s.core.checkSessionNotValid(e,"Writer")){var o=Object.assign({},t),i=s.core.buildNodesToWrite(o);s.write(e,i,o).then(function(e){try{var t=r.bianco.iiot.buildResultMessage(e);r.send(t)}catch(e){s.core.isInitializedBiancoIIoTNode(r)?r.bianco.iiot.handleWriteError(e,o):s.internalDebugLog(e.message)}}).catch(function(e){s.core.isInitializedBiancoIIoTNode(r)?r.bianco.iiot.handleWriteError(e,o):s.internalDebugLog(e.message)})}},r.bianco.iiot.buildResultMessage=function(e){var t=Object.assign({},e.msg);t.nodetype="write",t.justValue=r.justValue;var o=r.bianco.iiot.extractDataValueString(t,e);return t=r.bianco.iiot.setMessageProperties(t,e,o)},r.bianco.iiot.extractDataValueString=function(e,t){var o={};return r.justValue?(o=JSON.stringify({statusCodes:t.statusCodes},null,2),e.valuesToWrite&&delete e.valuesToWrite):o=JSON.stringify(t,null,2),o},r.bianco.iiot.setMessageProperties=function(t,o,i){try{n.util.setMessageProperty(t,"payload",JSON.parse(i))}catch(e){s.writeDebugLog(e),r.showErrors&&(r.warn("JSON not to parse from string for write statusCodes type "+_typeof(o.statusCodes)),r.error(e,o.msg)),t.resultsConverted=i,t.error=e.message}return t},r.on("input",function(e){s.core.checkConnectorState(r,e,"Write")&&("write"===e.injectType?r.bianco.iiot.writeToSession(r.bianco.iiot.opcuaSession,e):(s.writeDebugLog("Wrong Inject Type "+e.injectType+"! The Type has to be write."),r.showErrors&&r.warn("Wrong Inject Type "+e.injectType+"! The msg.injectType has to be write.")))}),s.core.registerToConnector(r),r.on("close",function(e){s.core.deregisterToConnector(r,function(){s.core.resetBiancoNode(r),e()})})})};
//# sourceMappingURL=maps/opcua-iiot-write.js.map
